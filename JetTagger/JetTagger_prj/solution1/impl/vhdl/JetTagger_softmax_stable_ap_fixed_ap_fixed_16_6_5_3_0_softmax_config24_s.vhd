-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_0_ap_vld : OUT STD_LOGIC;
    layer24_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_1_ap_vld : OUT STD_LOGIC;
    layer24_out_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_2_ap_vld : OUT STD_LOGIC;
    layer24_out_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_3_ap_vld : OUT STD_LOGIC;
    layer24_out_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_4_ap_vld : OUT STD_LOGIC;
    layer24_out_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_5_ap_vld : OUT STD_LOGIC;
    layer24_out_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_6_ap_vld : OUT STD_LOGIC;
    layer24_out_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer24_out_7_ap_vld : OUT STD_LOGIC );
end;


architecture behav of JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_1585 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_1_reg_1585_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1591 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1591_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1597 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1597_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1603 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1603_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1609 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1609_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1615 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1615_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1621 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1621_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1627 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1627_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_fu_422_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_reg_1653 : STD_LOGIC_VECTOR (15 downto 0);
    signal exp_res_reg_1698 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_reg_1698_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_reg_1698_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_reg_1698_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1703 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1703_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1703_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1703_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1708 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1708_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1708_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1708_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1713 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1713_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1713_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1713_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1718 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1718_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1718_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1718_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1723 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1723_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1723_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1723_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1728 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1728_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1728_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1728_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1733 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1733_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1733_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1733_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_2_fu_1047_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_2_reg_1738 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_fu_1077_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_reg_1744 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_fu_1107_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_reg_1750 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_fu_1137_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_reg_1756 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_fu_1235_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_reg_1762 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_fu_1333_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_reg_1768 : STD_LOGIC_VECTOR (17 downto 0);
    signal inv_exp_sum_reg_1779 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_6_fu_989_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_7_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_1417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal layer24_out_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal layer24_out_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer24_out_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal icmp_ln65_fu_302_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_308_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_314_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_320_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln65_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_331_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_342_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_2_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_3_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_4_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_373_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_5_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_5_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_402_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_6_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_6_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_fu_430_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln245_1_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_fu_436_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_2_fu_476_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_1_fu_479_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_3_fu_519_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_2_fu_522_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_4_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_4_fu_562_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_3_fu_565_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_6_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_5_fu_605_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_4_fu_608_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_fu_614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_8_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_6_fu_648_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_5_fu_651_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_10_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_7_fu_691_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_6_fu_694_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_12_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_8_fu_734_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_7_fu_737_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_751_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_14_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln245_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_785_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_1_fu_795_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_1_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_2_fu_808_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_816_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_fu_826_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_5_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_4_fu_839_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_847_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_fu_857_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_3_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_7_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_6_fu_870_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_878_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_fu_888_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_4_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_9_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_8_fu_901_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_909_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_fu_919_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_5_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_11_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_10_fu_932_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_940_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_fu_950_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_6_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_13_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_12_fu_963_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_971_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_fu_981_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_7_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_15_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_14_fu_994_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_1002_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_fu_1012_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_1_fu_1029_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_fu_1025_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_1033_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_1039_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_3_fu_1059_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_2_fu_1055_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_3_fu_1063_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_1069_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_5_fu_1089_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_4_fu_1085_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_5_fu_1093_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_1099_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_7_fu_1119_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_6_fu_1115_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_6_fu_1123_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_1129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln50_3_fu_1148_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_2_fu_1145_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_4_fu_1155_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_8_fu_1151_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_1161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_2_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_3_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_4_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_1_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_5_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_2_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_1219_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_5_fu_1227_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_5_fu_1246_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_4_fu_1243_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_7_fu_1253_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_9_fu_1249_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_31_fu_1259_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_6_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_7_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_8_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_3_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_9_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_4_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_1_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_9_fu_1317_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_10_fu_1325_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_fu_1341_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_1_fu_1344_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_fu_1351_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_1_fu_1347_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_1357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_1391_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1399_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_1_fu_1409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln268_fu_1428_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln268_fu_1422_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_fu_1428_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_fu_1428_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_1_fu_1448_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_1_fu_1448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_1_fu_1448_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_2_fu_1468_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_2_fu_1468_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_2_fu_1468_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_3_fu_1488_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_3_fu_1488_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_3_fu_1488_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_4_fu_1508_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_4_fu_1508_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_4_fu_1508_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_5_fu_1528_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_5_fu_1528_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_5_fu_1528_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_6_fu_1548_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_6_fu_1548_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_6_fu_1548_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_7_fu_1568_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_7_fu_1568_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_7_fu_1568_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln268_1_fu_1448_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_2_fu_1468_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_3_fu_1488_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_4_fu_1508_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_5_fu_1528_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_6_fu_1548_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_7_fu_1568_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_fu_1428_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component JetTagger_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7);

    invert_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_1_1_U5823 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_fu_1428_p0,
        din1 => mul_ln268_fu_1428_p1,
        dout => mul_ln268_fu_1428_p2);

    mul_18s_17ns_26_1_1_U5824 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_1_fu_1448_p0,
        din1 => mul_ln268_1_fu_1448_p1,
        dout => mul_ln268_1_fu_1448_p2);

    mul_18s_17ns_26_1_1_U5825 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_2_fu_1468_p0,
        din1 => mul_ln268_2_fu_1468_p1,
        dout => mul_ln268_2_fu_1468_p2);

    mul_18s_17ns_26_1_1_U5826 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_3_fu_1488_p0,
        din1 => mul_ln268_3_fu_1488_p1,
        dout => mul_ln268_3_fu_1488_p2);

    mul_18s_17ns_26_1_1_U5827 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_4_fu_1508_p0,
        din1 => mul_ln268_4_fu_1508_p1,
        dout => mul_ln268_4_fu_1508_p2);

    mul_18s_17ns_26_1_1_U5828 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_5_fu_1528_p0,
        din1 => mul_ln268_5_fu_1528_p1,
        dout => mul_ln268_5_fu_1528_p2);

    mul_18s_17ns_26_1_1_U5829 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_6_fu_1548_p0,
        din1 => mul_ln268_6_fu_1548_p1,
        dout => mul_ln268_6_fu_1548_p2);

    mul_18s_17ns_26_1_1_U5830 : component JetTagger_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_7_fu_1568_p0,
        din1 => mul_ln268_7_fu_1568_p1,
        dout => mul_ln268_7_fu_1568_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    layer24_out_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_0_preg <= mul_ln268_fu_1428_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_1_preg <= mul_ln268_1_fu_1448_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_2_preg <= mul_ln268_2_fu_1468_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_3_preg <= mul_ln268_3_fu_1488_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_4_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_4_preg <= mul_ln268_4_fu_1508_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_5_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_5_preg <= mul_ln268_5_fu_1528_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_6_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_6_preg <= mul_ln268_6_fu_1548_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer24_out_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer24_out_7_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    layer24_out_7_preg <= mul_ln268_7_fu_1568_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_1_reg_1703 <= exp_table_q6;
                exp_res_2_reg_1708 <= exp_table_q5;
                exp_res_3_reg_1713 <= exp_table_q4;
                exp_res_4_reg_1718 <= exp_table_q3;
                exp_res_5_reg_1723 <= exp_table_q2;
                exp_res_6_reg_1728 <= exp_table_q1;
                exp_res_7_reg_1733 <= exp_table_q0;
                exp_res_reg_1698 <= exp_table_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_1_reg_1703_pp0_iter4_reg <= exp_res_1_reg_1703;
                exp_res_1_reg_1703_pp0_iter5_reg <= exp_res_1_reg_1703_pp0_iter4_reg;
                exp_res_1_reg_1703_pp0_iter6_reg <= exp_res_1_reg_1703_pp0_iter5_reg;
                exp_res_2_reg_1708_pp0_iter4_reg <= exp_res_2_reg_1708;
                exp_res_2_reg_1708_pp0_iter5_reg <= exp_res_2_reg_1708_pp0_iter4_reg;
                exp_res_2_reg_1708_pp0_iter6_reg <= exp_res_2_reg_1708_pp0_iter5_reg;
                exp_res_3_reg_1713_pp0_iter4_reg <= exp_res_3_reg_1713;
                exp_res_3_reg_1713_pp0_iter5_reg <= exp_res_3_reg_1713_pp0_iter4_reg;
                exp_res_3_reg_1713_pp0_iter6_reg <= exp_res_3_reg_1713_pp0_iter5_reg;
                exp_res_4_reg_1718_pp0_iter4_reg <= exp_res_4_reg_1718;
                exp_res_4_reg_1718_pp0_iter5_reg <= exp_res_4_reg_1718_pp0_iter4_reg;
                exp_res_4_reg_1718_pp0_iter6_reg <= exp_res_4_reg_1718_pp0_iter5_reg;
                exp_res_5_reg_1723_pp0_iter4_reg <= exp_res_5_reg_1723;
                exp_res_5_reg_1723_pp0_iter5_reg <= exp_res_5_reg_1723_pp0_iter4_reg;
                exp_res_5_reg_1723_pp0_iter6_reg <= exp_res_5_reg_1723_pp0_iter5_reg;
                exp_res_6_reg_1728_pp0_iter4_reg <= exp_res_6_reg_1728;
                exp_res_6_reg_1728_pp0_iter5_reg <= exp_res_6_reg_1728_pp0_iter4_reg;
                exp_res_6_reg_1728_pp0_iter6_reg <= exp_res_6_reg_1728_pp0_iter5_reg;
                exp_res_7_reg_1733_pp0_iter4_reg <= exp_res_7_reg_1733;
                exp_res_7_reg_1733_pp0_iter5_reg <= exp_res_7_reg_1733_pp0_iter4_reg;
                exp_res_7_reg_1733_pp0_iter6_reg <= exp_res_7_reg_1733_pp0_iter5_reg;
                exp_res_reg_1698_pp0_iter4_reg <= exp_res_reg_1698;
                exp_res_reg_1698_pp0_iter5_reg <= exp_res_reg_1698_pp0_iter4_reg;
                exp_res_reg_1698_pp0_iter6_reg <= exp_res_reg_1698_pp0_iter5_reg;
                inv_exp_sum_reg_1779 <= invert_table_q0;
                select_ln50_11_reg_1768 <= select_ln50_11_fu_1333_p3;
                select_ln50_2_reg_1738 <= select_ln50_2_fu_1047_p3;
                select_ln50_3_reg_1744 <= select_ln50_3_fu_1077_p3;
                select_ln50_6_reg_1762 <= select_ln50_6_fu_1235_p3;
                select_ln50_7_reg_1750 <= select_ln50_7_fu_1107_p3;
                select_ln50_8_reg_1756 <= select_ln50_8_fu_1137_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln65_1_reg_1638 <= icmp_ln65_1_fu_308_p2;
                icmp_ln65_3_reg_1643 <= icmp_ln65_3_fu_314_p2;
                icmp_ln65_4_reg_1648 <= icmp_ln65_4_fu_320_p2;
                icmp_ln65_reg_1633 <= icmp_ln65_fu_302_p2;
                p_read_1_reg_1585 <= p_read7;
                p_read_1_reg_1585_pp0_iter1_reg <= p_read_1_reg_1585;
                p_read_2_reg_1591 <= p_read6;
                p_read_2_reg_1591_pp0_iter1_reg <= p_read_2_reg_1591;
                p_read_3_reg_1597 <= p_read5;
                p_read_3_reg_1597_pp0_iter1_reg <= p_read_3_reg_1597;
                p_read_4_reg_1603 <= p_read4;
                p_read_4_reg_1603_pp0_iter1_reg <= p_read_4_reg_1603;
                p_read_5_reg_1609 <= p_read3;
                p_read_5_reg_1609_pp0_iter1_reg <= p_read_5_reg_1609;
                p_read_6_reg_1615 <= p_read2;
                p_read_6_reg_1615_pp0_iter1_reg <= p_read_6_reg_1615;
                p_read_7_reg_1621 <= p_read1;
                p_read_7_reg_1621_pp0_iter1_reg <= p_read_7_reg_1621;
                p_read_8_reg_1627 <= p_read;
                p_read_8_reg_1627_pp0_iter1_reg <= p_read_8_reg_1627;
                x_max_reg_1653 <= x_max_fu_422_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_1347_p2 <= std_logic_vector(signed(select_ln50_6_reg_1762) + signed(select_ln50_11_reg_1768));
    add_ln50_2_fu_1033_p2 <= std_logic_vector(unsigned(zext_ln50_1_fu_1029_p1) + unsigned(zext_ln50_fu_1025_p1));
    add_ln50_3_fu_1063_p2 <= std_logic_vector(unsigned(zext_ln50_3_fu_1059_p1) + unsigned(zext_ln50_2_fu_1055_p1));
    add_ln50_4_fu_1155_p2 <= std_logic_vector(signed(sext_ln50_3_fu_1148_p1) + signed(sext_ln50_2_fu_1145_p1));
    add_ln50_5_fu_1093_p2 <= std_logic_vector(unsigned(zext_ln50_5_fu_1089_p1) + unsigned(zext_ln50_4_fu_1085_p1));
    add_ln50_6_fu_1123_p2 <= std_logic_vector(unsigned(zext_ln50_7_fu_1119_p1) + unsigned(zext_ln50_6_fu_1115_p1));
    add_ln50_7_fu_1253_p2 <= std_logic_vector(signed(sext_ln50_5_fu_1246_p1) + signed(sext_ln50_4_fu_1243_p1));
    add_ln50_8_fu_1151_p2 <= std_logic_vector(signed(select_ln50_3_reg_1744) + signed(select_ln50_2_reg_1738));
    add_ln50_9_fu_1249_p2 <= std_logic_vector(signed(select_ln50_8_reg_1756) + signed(select_ln50_7_reg_1750));
    add_ln50_fu_1351_p2 <= std_logic_vector(signed(sext_ln50_fu_1341_p1) + signed(sext_ln50_1_fu_1344_p1));
    and_ln245_1_fu_507_p2 <= (xor_ln245_2_fu_501_p2 and tmp_12_fu_493_p3);
    and_ln245_2_fu_550_p2 <= (xor_ln245_4_fu_544_p2 and tmp_14_fu_536_p3);
    and_ln245_3_fu_593_p2 <= (xor_ln245_6_fu_587_p2 and tmp_16_fu_579_p3);
    and_ln245_4_fu_636_p2 <= (xor_ln245_8_fu_630_p2 and tmp_18_fu_622_p3);
    and_ln245_5_fu_679_p2 <= (xor_ln245_10_fu_673_p2 and tmp_20_fu_665_p3);
    and_ln245_6_fu_722_p2 <= (xor_ln245_12_fu_716_p2 and tmp_22_fu_708_p3);
    and_ln245_7_fu_765_p2 <= (xor_ln245_14_fu_759_p2 and tmp_24_fu_751_p3);
    and_ln245_fu_464_p2 <= (xor_ln245_fu_458_p2 and tmp_10_fu_450_p3);
    and_ln50_1_fu_1183_p2 <= (xor_ln50_2_fu_1177_p2 and tmp_28_fu_1169_p3);
    and_ln50_2_fu_1195_p2 <= (xor_ln50_3_fu_1189_p2 and tmp_27_fu_1161_p3);
    and_ln50_3_fu_1281_p2 <= (xor_ln50_6_fu_1275_p2 and tmp_32_fu_1267_p3);
    and_ln50_4_fu_1293_p2 <= (xor_ln50_7_fu_1287_p2 and tmp_31_fu_1259_p3);
    and_ln50_fu_1379_p2 <= (xor_ln50_fu_1373_p2 and tmp_34_fu_1365_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter7, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table_address0 <= zext_ln255_7_fu_1020_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_6_fu_989_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_5_fu_958_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_4_fu_927_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_3_fu_896_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_2_fu_865_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln255_1_fu_834_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln255_fu_803_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln65_1_fu_308_p0 <= p_read2;
    icmp_ln65_1_fu_308_p1 <= p_read3;
    icmp_ln65_1_fu_308_p2 <= "1" when (signed(icmp_ln65_1_fu_308_p0) < signed(icmp_ln65_1_fu_308_p1)) else "0";
    icmp_ln65_2_fu_348_p2 <= "1" when (signed(select_ln65_fu_331_p3) < signed(select_ln65_1_fu_342_p3)) else "0";
    icmp_ln65_3_fu_314_p0 <= p_read4;
    icmp_ln65_3_fu_314_p1 <= p_read5;
    icmp_ln65_3_fu_314_p2 <= "1" when (signed(icmp_ln65_3_fu_314_p0) < signed(icmp_ln65_3_fu_314_p1)) else "0";
    icmp_ln65_4_fu_320_p0 <= p_read6;
    icmp_ln65_4_fu_320_p1 <= p_read7;
    icmp_ln65_4_fu_320_p2 <= "1" when (signed(icmp_ln65_4_fu_320_p0) < signed(icmp_ln65_4_fu_320_p1)) else "0";
    icmp_ln65_5_fu_390_p2 <= "1" when (signed(select_ln65_3_fu_373_p3) < signed(select_ln65_4_fu_384_p3)) else "0";
    icmp_ln65_6_fu_410_p2 <= "1" when (signed(select_ln65_2_fu_360_p3) < signed(select_ln65_5_fu_402_p3)) else "0";
    icmp_ln65_fu_302_p0 <= p_read;
    icmp_ln65_fu_302_p1 <= p_read1;
    icmp_ln65_fu_302_p2 <= "1" when (signed(icmp_ln65_fu_302_p0) < signed(icmp_ln65_fu_302_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_1417_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_0_assign_proc : process(ap_enable_reg_pp0_iter7, layer24_out_0_preg, ap_block_pp0_stage0_01001, mul_ln268_fu_1428_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_0 <= mul_ln268_fu_1428_p2(25 downto 10);
        else 
            layer24_out_0 <= layer24_out_0_preg;
        end if; 
    end process;


    layer24_out_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_1_preg, mul_ln268_1_fu_1448_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_1 <= mul_ln268_1_fu_1448_p2(25 downto 10);
        else 
            layer24_out_1 <= layer24_out_1_preg;
        end if; 
    end process;


    layer24_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_2_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_2_preg, mul_ln268_2_fu_1468_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_2 <= mul_ln268_2_fu_1468_p2(25 downto 10);
        else 
            layer24_out_2 <= layer24_out_2_preg;
        end if; 
    end process;


    layer24_out_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_3_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_3_preg, mul_ln268_3_fu_1488_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_3 <= mul_ln268_3_fu_1488_p2(25 downto 10);
        else 
            layer24_out_3 <= layer24_out_3_preg;
        end if; 
    end process;


    layer24_out_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_4_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_4_preg, mul_ln268_4_fu_1508_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_4 <= mul_ln268_4_fu_1508_p2(25 downto 10);
        else 
            layer24_out_4 <= layer24_out_4_preg;
        end if; 
    end process;


    layer24_out_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_5_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_5_preg, mul_ln268_5_fu_1528_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_5 <= mul_ln268_5_fu_1528_p2(25 downto 10);
        else 
            layer24_out_5 <= layer24_out_5_preg;
        end if; 
    end process;


    layer24_out_5_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_6_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_6_preg, mul_ln268_6_fu_1548_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_6 <= mul_ln268_6_fu_1548_p2(25 downto 10);
        else 
            layer24_out_6 <= layer24_out_6_preg;
        end if; 
    end process;


    layer24_out_6_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer24_out_7_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_01001, layer24_out_7_preg, mul_ln268_7_fu_1568_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_7 <= mul_ln268_7_fu_1568_p2(25 downto 10);
        else 
            layer24_out_7 <= layer24_out_7_preg;
        end if; 
    end process;


    layer24_out_7_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer24_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer24_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln268_1_fu_1448_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_1_fu_1448_p1 <= mul_ln268_1_fu_1448_p10(17 - 1 downto 0);
    mul_ln268_1_fu_1448_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_reg_1703_pp0_iter6_reg),26));
    mul_ln268_2_fu_1468_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_2_fu_1468_p1 <= mul_ln268_2_fu_1468_p10(17 - 1 downto 0);
    mul_ln268_2_fu_1468_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_reg_1708_pp0_iter6_reg),26));
    mul_ln268_3_fu_1488_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_3_fu_1488_p1 <= mul_ln268_3_fu_1488_p10(17 - 1 downto 0);
    mul_ln268_3_fu_1488_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_reg_1713_pp0_iter6_reg),26));
    mul_ln268_4_fu_1508_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_4_fu_1508_p1 <= mul_ln268_4_fu_1508_p10(17 - 1 downto 0);
    mul_ln268_4_fu_1508_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_reg_1718_pp0_iter6_reg),26));
    mul_ln268_5_fu_1528_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_5_fu_1528_p1 <= mul_ln268_5_fu_1528_p10(17 - 1 downto 0);
    mul_ln268_5_fu_1528_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_5_reg_1723_pp0_iter6_reg),26));
    mul_ln268_6_fu_1548_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_6_fu_1548_p1 <= mul_ln268_6_fu_1548_p10(17 - 1 downto 0);
    mul_ln268_6_fu_1548_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_6_reg_1728_pp0_iter6_reg),26));
    mul_ln268_7_fu_1568_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_7_fu_1568_p1 <= mul_ln268_7_fu_1568_p10(17 - 1 downto 0);
    mul_ln268_7_fu_1568_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_reg_1733_pp0_iter6_reg),26));
    mul_ln268_fu_1428_p0 <= sext_ln268_fu_1422_p1(18 - 1 downto 0);
    mul_ln268_fu_1428_p1 <= mul_ln268_fu_1428_p10(17 - 1 downto 0);
    mul_ln268_fu_1428_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_reg_1698_pp0_iter6_reg),26));
    or_ln50_1_fu_1311_p2 <= (xor_ln50_9_fu_1305_p2 or and_ln50_3_fu_1281_p2);
    or_ln50_fu_1213_p2 <= (xor_ln50_5_fu_1207_p2 or and_ln50_1_fu_1183_p2);
    select_ln245_10_fu_932_p3 <= 
        ap_const_lv10_1FF when (and_ln245_5_fu_679_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_11_fu_950_p3 <= 
        select_ln245_10_fu_932_p3 when (xor_ln245_11_fu_685_p2(0) = '1') else 
        tmp_5_fu_940_p4;
    select_ln245_12_fu_963_p3 <= 
        ap_const_lv10_1FF when (and_ln245_6_fu_722_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_13_fu_981_p3 <= 
        select_ln245_12_fu_963_p3 when (xor_ln245_13_fu_728_p2(0) = '1') else 
        tmp_6_fu_971_p4;
    select_ln245_14_fu_994_p3 <= 
        ap_const_lv10_1FF when (and_ln245_7_fu_765_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_15_fu_1012_p3 <= 
        select_ln245_14_fu_994_p3 when (xor_ln245_15_fu_771_p2(0) = '1') else 
        tmp_7_fu_1002_p4;
    select_ln245_1_fu_795_p3 <= 
        select_ln245_fu_777_p3 when (xor_ln245_1_fu_470_p2(0) = '1') else 
        tmp_fu_785_p4;
    select_ln245_2_fu_808_p3 <= 
        ap_const_lv10_1FF when (and_ln245_1_fu_507_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_3_fu_826_p3 <= 
        select_ln245_2_fu_808_p3 when (xor_ln245_3_fu_513_p2(0) = '1') else 
        tmp_1_fu_816_p4;
    select_ln245_4_fu_839_p3 <= 
        ap_const_lv10_1FF when (and_ln245_2_fu_550_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_5_fu_857_p3 <= 
        select_ln245_4_fu_839_p3 when (xor_ln245_5_fu_556_p2(0) = '1') else 
        tmp_2_fu_847_p4;
    select_ln245_6_fu_870_p3 <= 
        ap_const_lv10_1FF when (and_ln245_3_fu_593_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_7_fu_888_p3 <= 
        select_ln245_6_fu_870_p3 when (xor_ln245_7_fu_599_p2(0) = '1') else 
        tmp_3_fu_878_p4;
    select_ln245_8_fu_901_p3 <= 
        ap_const_lv10_1FF when (and_ln245_4_fu_636_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_9_fu_919_p3 <= 
        select_ln245_8_fu_901_p3 when (xor_ln245_9_fu_642_p2(0) = '1') else 
        tmp_4_fu_909_p4;
    select_ln245_fu_777_p3 <= 
        ap_const_lv10_1FF when (and_ln245_fu_464_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln50_10_fu_1325_p3 <= 
        ap_const_lv18_20000 when (and_ln50_4_fu_1293_p2(0) = '1') else 
        add_ln50_9_fu_1249_p2;
    select_ln50_11_fu_1333_p3 <= 
        select_ln50_9_fu_1317_p3 when (or_ln50_1_fu_1311_p2(0) = '1') else 
        select_ln50_10_fu_1325_p3;
    select_ln50_1_fu_1409_p3 <= 
        select_ln50_fu_1391_p3 when (xor_ln50_1_fu_1385_p2(0) = '1') else 
        tmp_8_fu_1399_p4;
    select_ln50_2_fu_1047_p3 <= 
        ap_const_lv18_1FFFF when (tmp_25_fu_1039_p3(0) = '1') else 
        add_ln50_2_fu_1033_p2;
    select_ln50_3_fu_1077_p3 <= 
        ap_const_lv18_1FFFF when (tmp_26_fu_1069_p3(0) = '1') else 
        add_ln50_3_fu_1063_p2;
    select_ln50_4_fu_1219_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_4_fu_1201_p2(0) = '1') else 
        add_ln50_8_fu_1151_p2;
    select_ln50_5_fu_1227_p3 <= 
        ap_const_lv18_20000 when (and_ln50_2_fu_1195_p2(0) = '1') else 
        add_ln50_8_fu_1151_p2;
    select_ln50_6_fu_1235_p3 <= 
        select_ln50_4_fu_1219_p3 when (or_ln50_fu_1213_p2(0) = '1') else 
        select_ln50_5_fu_1227_p3;
    select_ln50_7_fu_1107_p3 <= 
        ap_const_lv18_1FFFF when (tmp_29_fu_1099_p3(0) = '1') else 
        add_ln50_5_fu_1093_p2;
    select_ln50_8_fu_1137_p3 <= 
        ap_const_lv18_1FFFF when (tmp_30_fu_1129_p3(0) = '1') else 
        add_ln50_6_fu_1123_p2;
    select_ln50_9_fu_1317_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_8_fu_1299_p2(0) = '1') else 
        add_ln50_9_fu_1249_p2;
    select_ln50_fu_1391_p3 <= 
        ap_const_lv10_1FF when (and_ln50_fu_1379_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_342_p3 <= 
        p_read_6_reg_1615 when (xor_ln65_1_fu_337_p2(0) = '1') else 
        p_read_5_reg_1609;
    select_ln65_2_fu_360_p3 <= 
        select_ln65_fu_331_p3 when (xor_ln65_2_fu_354_p2(0) = '1') else 
        select_ln65_1_fu_342_p3;
    select_ln65_3_fu_373_p3 <= 
        p_read_4_reg_1603 when (xor_ln65_3_fu_368_p2(0) = '1') else 
        p_read_3_reg_1597;
    select_ln65_4_fu_384_p3 <= 
        p_read_2_reg_1591 when (xor_ln65_4_fu_379_p2(0) = '1') else 
        p_read_1_reg_1585;
    select_ln65_5_fu_402_p3 <= 
        select_ln65_3_fu_373_p3 when (xor_ln65_5_fu_396_p2(0) = '1') else 
        select_ln65_4_fu_384_p3;
    select_ln65_fu_331_p3 <= 
        p_read_8_reg_1627 when (xor_ln65_fu_326_p2(0) = '1') else 
        p_read_7_reg_1621;
        sext_ln245_1_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_reg_1653),17));

        sext_ln245_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_7_reg_1621_pp0_iter1_reg),17));

        sext_ln245_3_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_6_reg_1615_pp0_iter1_reg),17));

        sext_ln245_4_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_5_reg_1609_pp0_iter1_reg),17));

        sext_ln245_5_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_1603_pp0_iter1_reg),17));

        sext_ln245_6_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_1597_pp0_iter1_reg),17));

        sext_ln245_7_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_1591_pp0_iter1_reg),17));

        sext_ln245_8_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_1585_pp0_iter1_reg),17));

        sext_ln245_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_8_reg_1627_pp0_iter1_reg),17));

        sext_ln268_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_reg_1779),26));

        sext_ln50_1_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_11_reg_1768),19));

        sext_ln50_2_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_2_reg_1738),19));

        sext_ln50_3_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_3_reg_1744),19));

        sext_ln50_4_fu_1243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_7_reg_1750),19));

        sext_ln50_5_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_8_reg_1756),19));

        sext_ln50_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_6_reg_1762),19));

    sub_ln245_1_fu_479_p2 <= std_logic_vector(signed(sext_ln245_2_fu_476_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_2_fu_522_p2 <= std_logic_vector(signed(sext_ln245_3_fu_519_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_3_fu_565_p2 <= std_logic_vector(signed(sext_ln245_4_fu_562_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_4_fu_608_p2 <= std_logic_vector(signed(sext_ln245_5_fu_605_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_5_fu_651_p2 <= std_logic_vector(signed(sext_ln245_6_fu_648_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_6_fu_694_p2 <= std_logic_vector(signed(sext_ln245_7_fu_691_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_7_fu_737_p2 <= std_logic_vector(signed(sext_ln245_8_fu_734_p1) - signed(sext_ln245_1_fu_433_p1));
    sub_ln245_fu_436_p2 <= std_logic_vector(signed(sext_ln245_fu_430_p1) - signed(sext_ln245_1_fu_433_p1));
    tmp_10_fu_450_p3 <= sub_ln245_fu_436_p2(15 downto 15);
    tmp_11_fu_485_p3 <= sub_ln245_1_fu_479_p2(16 downto 16);
    tmp_12_fu_493_p3 <= sub_ln245_1_fu_479_p2(15 downto 15);
    tmp_13_fu_528_p3 <= sub_ln245_2_fu_522_p2(16 downto 16);
    tmp_14_fu_536_p3 <= sub_ln245_2_fu_522_p2(15 downto 15);
    tmp_15_fu_571_p3 <= sub_ln245_3_fu_565_p2(16 downto 16);
    tmp_16_fu_579_p3 <= sub_ln245_3_fu_565_p2(15 downto 15);
    tmp_17_fu_614_p3 <= sub_ln245_4_fu_608_p2(16 downto 16);
    tmp_18_fu_622_p3 <= sub_ln245_4_fu_608_p2(15 downto 15);
    tmp_19_fu_657_p3 <= sub_ln245_5_fu_651_p2(16 downto 16);
    tmp_1_fu_816_p4 <= sub_ln245_1_fu_479_p2(15 downto 6);
    tmp_20_fu_665_p3 <= sub_ln245_5_fu_651_p2(15 downto 15);
    tmp_21_fu_700_p3 <= sub_ln245_6_fu_694_p2(16 downto 16);
    tmp_22_fu_708_p3 <= sub_ln245_6_fu_694_p2(15 downto 15);
    tmp_23_fu_743_p3 <= sub_ln245_7_fu_737_p2(16 downto 16);
    tmp_24_fu_751_p3 <= sub_ln245_7_fu_737_p2(15 downto 15);
    tmp_25_fu_1039_p3 <= add_ln50_2_fu_1033_p2(17 downto 17);
    tmp_26_fu_1069_p3 <= add_ln50_3_fu_1063_p2(17 downto 17);
    tmp_27_fu_1161_p3 <= add_ln50_4_fu_1155_p2(18 downto 18);
    tmp_28_fu_1169_p3 <= add_ln50_8_fu_1151_p2(17 downto 17);
    tmp_29_fu_1099_p3 <= add_ln50_5_fu_1093_p2(17 downto 17);
    tmp_2_fu_847_p4 <= sub_ln245_2_fu_522_p2(15 downto 6);
    tmp_30_fu_1129_p3 <= add_ln50_6_fu_1123_p2(17 downto 17);
    tmp_31_fu_1259_p3 <= add_ln50_7_fu_1253_p2(18 downto 18);
    tmp_32_fu_1267_p3 <= add_ln50_9_fu_1249_p2(17 downto 17);
    tmp_33_fu_1357_p3 <= add_ln50_fu_1351_p2(18 downto 18);
    tmp_34_fu_1365_p3 <= add_ln50_1_fu_1347_p2(17 downto 17);
    tmp_3_fu_878_p4 <= sub_ln245_3_fu_565_p2(15 downto 6);
    tmp_4_fu_909_p4 <= sub_ln245_4_fu_608_p2(15 downto 6);
    tmp_5_fu_940_p4 <= sub_ln245_5_fu_651_p2(15 downto 6);
    tmp_6_fu_971_p4 <= sub_ln245_6_fu_694_p2(15 downto 6);
    tmp_7_fu_1002_p4 <= sub_ln245_7_fu_737_p2(15 downto 6);
    tmp_8_fu_1399_p4 <= add_ln50_1_fu_1347_p2(17 downto 8);
    tmp_9_fu_442_p3 <= sub_ln245_fu_436_p2(16 downto 16);
    tmp_fu_785_p4 <= sub_ln245_fu_436_p2(15 downto 6);
    x_max_fu_422_p3 <= 
        select_ln65_2_fu_360_p3 when (xor_ln65_6_fu_416_p2(0) = '1') else 
        select_ln65_5_fu_402_p3;
    xor_ln245_10_fu_673_p2 <= (tmp_19_fu_657_p3 xor ap_const_lv1_1);
    xor_ln245_11_fu_685_p2 <= (tmp_20_fu_665_p3 xor tmp_19_fu_657_p3);
    xor_ln245_12_fu_716_p2 <= (tmp_21_fu_700_p3 xor ap_const_lv1_1);
    xor_ln245_13_fu_728_p2 <= (tmp_22_fu_708_p3 xor tmp_21_fu_700_p3);
    xor_ln245_14_fu_759_p2 <= (tmp_23_fu_743_p3 xor ap_const_lv1_1);
    xor_ln245_15_fu_771_p2 <= (tmp_24_fu_751_p3 xor tmp_23_fu_743_p3);
    xor_ln245_1_fu_470_p2 <= (tmp_9_fu_442_p3 xor tmp_10_fu_450_p3);
    xor_ln245_2_fu_501_p2 <= (tmp_11_fu_485_p3 xor ap_const_lv1_1);
    xor_ln245_3_fu_513_p2 <= (tmp_12_fu_493_p3 xor tmp_11_fu_485_p3);
    xor_ln245_4_fu_544_p2 <= (tmp_13_fu_528_p3 xor ap_const_lv1_1);
    xor_ln245_5_fu_556_p2 <= (tmp_14_fu_536_p3 xor tmp_13_fu_528_p3);
    xor_ln245_6_fu_587_p2 <= (tmp_15_fu_571_p3 xor ap_const_lv1_1);
    xor_ln245_7_fu_599_p2 <= (tmp_16_fu_579_p3 xor tmp_15_fu_571_p3);
    xor_ln245_8_fu_630_p2 <= (tmp_17_fu_614_p3 xor ap_const_lv1_1);
    xor_ln245_9_fu_642_p2 <= (tmp_18_fu_622_p3 xor tmp_17_fu_614_p3);
    xor_ln245_fu_458_p2 <= (tmp_9_fu_442_p3 xor ap_const_lv1_1);
    xor_ln50_1_fu_1385_p2 <= (tmp_34_fu_1365_p3 xor tmp_33_fu_1357_p3);
    xor_ln50_2_fu_1177_p2 <= (tmp_27_fu_1161_p3 xor ap_const_lv1_1);
    xor_ln50_3_fu_1189_p2 <= (tmp_28_fu_1169_p3 xor ap_const_lv1_1);
    xor_ln50_4_fu_1201_p2 <= (tmp_28_fu_1169_p3 xor tmp_27_fu_1161_p3);
    xor_ln50_5_fu_1207_p2 <= (xor_ln50_4_fu_1201_p2 xor ap_const_lv1_1);
    xor_ln50_6_fu_1275_p2 <= (tmp_31_fu_1259_p3 xor ap_const_lv1_1);
    xor_ln50_7_fu_1287_p2 <= (tmp_32_fu_1267_p3 xor ap_const_lv1_1);
    xor_ln50_8_fu_1299_p2 <= (tmp_32_fu_1267_p3 xor tmp_31_fu_1259_p3);
    xor_ln50_9_fu_1305_p2 <= (xor_ln50_8_fu_1299_p2 xor ap_const_lv1_1);
    xor_ln50_fu_1373_p2 <= (tmp_33_fu_1357_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_337_p2 <= (icmp_ln65_1_reg_1638 xor ap_const_lv1_1);
    xor_ln65_2_fu_354_p2 <= (icmp_ln65_2_fu_348_p2 xor ap_const_lv1_1);
    xor_ln65_3_fu_368_p2 <= (icmp_ln65_3_reg_1643 xor ap_const_lv1_1);
    xor_ln65_4_fu_379_p2 <= (icmp_ln65_4_reg_1648 xor ap_const_lv1_1);
    xor_ln65_5_fu_396_p2 <= (icmp_ln65_5_fu_390_p2 xor ap_const_lv1_1);
    xor_ln65_6_fu_416_p2 <= (icmp_ln65_6_fu_410_p2 xor ap_const_lv1_1);
    xor_ln65_fu_326_p2 <= (icmp_ln65_reg_1633 xor ap_const_lv1_1);
    zext_ln255_1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_3_fu_826_p3),64));
    zext_ln255_2_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_5_fu_857_p3),64));
    zext_ln255_3_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_7_fu_888_p3),64));
    zext_ln255_4_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_9_fu_919_p3),64));
    zext_ln255_5_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_11_fu_950_p3),64));
    zext_ln255_6_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_13_fu_981_p3),64));
    zext_ln255_7_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_15_fu_1012_p3),64));
    zext_ln255_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_1_fu_795_p3),64));
    zext_ln265_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_1409_p3),64));
    zext_ln50_1_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q6),18));
    zext_ln50_2_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q5),18));
    zext_ln50_3_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q4),18));
    zext_ln50_4_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q3),18));
    zext_ln50_5_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q2),18));
    zext_ln50_6_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q1),18));
    zext_ln50_7_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q0),18));
    zext_ln50_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q7),18));
end behav;
