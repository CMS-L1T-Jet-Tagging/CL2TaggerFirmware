// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
output  [15:0] res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] res;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [16:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [16:0] exp_table_q4;
wire   [9:0] exp_table_address5;
reg    exp_table_ce5;
wire   [16:0] exp_table_q5;
wire   [9:0] exp_table_address6;
reg    exp_table_ce6;
wire   [16:0] exp_table_q6;
wire   [9:0] exp_table_address7;
reg    exp_table_ce7;
wire   [16:0] exp_table_q7;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] p_read_1_reg_1353;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] p_read_1_reg_1353_pp0_iter1_reg;
reg  signed [15:0] p_read_1_reg_1353_pp0_iter2_reg;
reg  signed [15:0] p_read_1_reg_1353_pp0_iter3_reg;
reg  signed [15:0] p_read_2_reg_1360;
reg  signed [15:0] p_read_2_reg_1360_pp0_iter1_reg;
reg  signed [15:0] p_read_2_reg_1360_pp0_iter2_reg;
reg  signed [15:0] p_read_2_reg_1360_pp0_iter3_reg;
reg  signed [15:0] p_read_3_reg_1367;
reg  signed [15:0] p_read_3_reg_1367_pp0_iter1_reg;
reg  signed [15:0] p_read_3_reg_1367_pp0_iter2_reg;
reg  signed [15:0] p_read_3_reg_1367_pp0_iter3_reg;
reg  signed [15:0] p_read_4_reg_1374;
reg  signed [15:0] p_read_4_reg_1374_pp0_iter1_reg;
reg  signed [15:0] p_read_4_reg_1374_pp0_iter2_reg;
reg  signed [15:0] p_read_4_reg_1374_pp0_iter3_reg;
reg  signed [15:0] p_read_5_reg_1381;
reg  signed [15:0] p_read_5_reg_1381_pp0_iter1_reg;
reg  signed [15:0] p_read_5_reg_1381_pp0_iter2_reg;
reg  signed [15:0] p_read_5_reg_1381_pp0_iter3_reg;
reg  signed [15:0] p_read_6_reg_1388;
reg  signed [15:0] p_read_6_reg_1388_pp0_iter1_reg;
reg  signed [15:0] p_read_6_reg_1388_pp0_iter2_reg;
reg  signed [15:0] p_read_6_reg_1388_pp0_iter3_reg;
reg  signed [15:0] p_read_7_reg_1395;
reg  signed [15:0] p_read_7_reg_1395_pp0_iter1_reg;
reg  signed [15:0] p_read_7_reg_1395_pp0_iter2_reg;
reg  signed [15:0] p_read_7_reg_1395_pp0_iter3_reg;
reg  signed [15:0] p_read_8_reg_1402;
reg  signed [15:0] p_read_8_reg_1402_pp0_iter1_reg;
reg  signed [15:0] p_read_8_reg_1402_pp0_iter2_reg;
reg  signed [15:0] p_read_8_reg_1402_pp0_iter3_reg;
wire   [0:0] icmp_ln65_fu_239_p2;
reg   [0:0] icmp_ln65_reg_1409;
wire   [0:0] icmp_ln65_1_fu_243_p2;
reg   [0:0] icmp_ln65_1_reg_1414;
wire   [0:0] icmp_ln65_3_fu_247_p2;
reg   [0:0] icmp_ln65_3_reg_1419;
wire   [0:0] icmp_ln65_4_fu_251_p2;
reg   [0:0] icmp_ln65_4_reg_1424;
wire   [15:0] select_ln65_2_fu_289_p3;
reg   [15:0] select_ln65_2_reg_1429;
wire   [15:0] select_ln65_5_fu_331_p3;
reg   [15:0] select_ln65_5_reg_1435;
wire   [15:0] x_max_fu_349_p3;
reg   [15:0] x_max_reg_1441;
wire   [9:0] select_ln245_1_fu_720_p3;
reg   [9:0] select_ln245_1_reg_1446;
wire   [9:0] select_ln245_3_fu_746_p3;
reg   [9:0] select_ln245_3_reg_1451;
wire   [9:0] select_ln245_5_fu_772_p3;
reg   [9:0] select_ln245_5_reg_1456;
wire   [9:0] select_ln245_7_fu_798_p3;
reg   [9:0] select_ln245_7_reg_1461;
wire   [9:0] select_ln245_9_fu_824_p3;
reg   [9:0] select_ln245_9_reg_1466;
wire   [9:0] select_ln245_11_fu_850_p3;
reg   [9:0] select_ln245_11_reg_1471;
wire   [9:0] select_ln245_13_fu_876_p3;
reg   [9:0] select_ln245_13_reg_1476;
wire   [9:0] select_ln245_15_fu_902_p3;
reg   [9:0] select_ln245_15_reg_1481;
reg   [16:0] exp_res_reg_1526;
reg   [16:0] exp_res_1_reg_1531;
reg   [16:0] exp_res_2_reg_1536;
reg   [16:0] exp_res_3_reg_1541;
reg   [16:0] exp_res_4_reg_1546;
reg   [16:0] exp_res_5_reg_1551;
reg   [16:0] exp_res_6_reg_1556;
reg   [16:0] exp_res_7_reg_1561;
reg   [16:0] exp_res_7_reg_1561_pp0_iter7_reg;
reg   [16:0] exp_res_7_reg_1561_pp0_iter8_reg;
reg   [16:0] exp_res_7_reg_1561_pp0_iter9_reg;
reg   [16:0] exp_res_7_reg_1561_pp0_iter10_reg;
reg   [16:0] exp_res_7_reg_1561_pp0_iter11_reg;
wire  signed [17:0] select_ln50_2_fu_962_p3;
reg  signed [17:0] select_ln50_2_reg_1567;
wire  signed [17:0] select_ln50_3_fu_990_p3;
reg  signed [17:0] select_ln50_3_reg_1573;
wire  signed [17:0] select_ln50_7_fu_1018_p3;
reg  signed [17:0] select_ln50_7_reg_1579;
wire  signed [17:0] select_ln50_8_fu_1046_p3;
reg  signed [17:0] select_ln50_8_reg_1585;
wire  signed [17:0] select_ln50_6_fu_1144_p3;
reg  signed [17:0] select_ln50_6_reg_1591;
wire  signed [17:0] select_ln50_11_fu_1242_p3;
reg  signed [17:0] select_ln50_11_reg_1597;
wire   [9:0] select_ln50_1_fu_1318_p3;
reg   [9:0] select_ln50_1_reg_1603;
reg  signed [17:0] inv_exp_sum_reg_1613;
wire   [63:0] zext_ln255_fu_910_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_914_p1;
wire   [63:0] zext_ln255_2_fu_918_p1;
wire   [63:0] zext_ln255_3_fu_922_p1;
wire   [63:0] zext_ln255_4_fu_926_p1;
wire   [63:0] zext_ln255_5_fu_930_p1;
wire   [63:0] zext_ln255_6_fu_934_p1;
wire   [63:0] zext_ln255_7_fu_938_p1;
wire   [63:0] zext_ln265_fu_1326_p1;
reg   [15:0] res_preg;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln65_fu_255_p2;
wire   [0:0] xor_ln65_1_fu_266_p2;
wire   [15:0] select_ln65_fu_260_p3;
wire   [15:0] select_ln65_1_fu_271_p3;
wire   [0:0] icmp_ln65_2_fu_277_p2;
wire   [0:0] xor_ln65_2_fu_283_p2;
wire   [0:0] xor_ln65_3_fu_297_p2;
wire   [0:0] xor_ln65_4_fu_308_p2;
wire   [15:0] select_ln65_3_fu_302_p3;
wire   [15:0] select_ln65_4_fu_313_p3;
wire   [0:0] icmp_ln65_5_fu_319_p2;
wire   [0:0] xor_ln65_5_fu_325_p2;
wire   [0:0] icmp_ln65_6_fu_339_p2;
wire   [0:0] xor_ln65_6_fu_343_p2;
wire  signed [16:0] sext_ln245_fu_355_p1;
wire  signed [16:0] sext_ln245_1_fu_358_p1;
wire   [16:0] sub_ln245_fu_361_p2;
wire   [0:0] tmp_9_fu_367_p3;
wire   [0:0] tmp_10_fu_375_p3;
wire   [0:0] xor_ln245_fu_383_p2;
wire  signed [16:0] sext_ln245_2_fu_401_p1;
wire   [16:0] sub_ln245_1_fu_404_p2;
wire   [0:0] tmp_11_fu_410_p3;
wire   [0:0] tmp_12_fu_418_p3;
wire   [0:0] xor_ln245_2_fu_426_p2;
wire  signed [16:0] sext_ln245_3_fu_444_p1;
wire   [16:0] sub_ln245_2_fu_447_p2;
wire   [0:0] tmp_13_fu_453_p3;
wire   [0:0] tmp_14_fu_461_p3;
wire   [0:0] xor_ln245_4_fu_469_p2;
wire  signed [16:0] sext_ln245_4_fu_487_p1;
wire   [16:0] sub_ln245_3_fu_490_p2;
wire   [0:0] tmp_15_fu_496_p3;
wire   [0:0] tmp_16_fu_504_p3;
wire   [0:0] xor_ln245_6_fu_512_p2;
wire  signed [16:0] sext_ln245_5_fu_530_p1;
wire   [16:0] sub_ln245_4_fu_533_p2;
wire   [0:0] tmp_17_fu_539_p3;
wire   [0:0] tmp_18_fu_547_p3;
wire   [0:0] xor_ln245_8_fu_555_p2;
wire  signed [16:0] sext_ln245_6_fu_573_p1;
wire   [16:0] sub_ln245_5_fu_576_p2;
wire   [0:0] tmp_19_fu_582_p3;
wire   [0:0] tmp_20_fu_590_p3;
wire   [0:0] xor_ln245_10_fu_598_p2;
wire  signed [16:0] sext_ln245_7_fu_616_p1;
wire   [16:0] sub_ln245_6_fu_619_p2;
wire   [0:0] tmp_21_fu_625_p3;
wire   [0:0] tmp_22_fu_633_p3;
wire   [0:0] xor_ln245_12_fu_641_p2;
wire  signed [16:0] sext_ln245_8_fu_659_p1;
wire   [16:0] sub_ln245_7_fu_662_p2;
wire   [0:0] tmp_23_fu_668_p3;
wire   [0:0] tmp_24_fu_676_p3;
wire   [0:0] xor_ln245_14_fu_684_p2;
wire   [0:0] and_ln245_fu_389_p2;
wire   [0:0] xor_ln245_1_fu_395_p2;
wire   [9:0] select_ln245_fu_702_p3;
wire   [9:0] tmp_fu_710_p4;
wire   [0:0] and_ln245_1_fu_432_p2;
wire   [0:0] xor_ln245_3_fu_438_p2;
wire   [9:0] select_ln245_2_fu_728_p3;
wire   [9:0] tmp_1_fu_736_p4;
wire   [0:0] and_ln245_2_fu_475_p2;
wire   [0:0] xor_ln245_5_fu_481_p2;
wire   [9:0] select_ln245_4_fu_754_p3;
wire   [9:0] tmp_2_fu_762_p4;
wire   [0:0] and_ln245_3_fu_518_p2;
wire   [0:0] xor_ln245_7_fu_524_p2;
wire   [9:0] select_ln245_6_fu_780_p3;
wire   [9:0] tmp_3_fu_788_p4;
wire   [0:0] and_ln245_4_fu_561_p2;
wire   [0:0] xor_ln245_9_fu_567_p2;
wire   [9:0] select_ln245_8_fu_806_p3;
wire   [9:0] tmp_4_fu_814_p4;
wire   [0:0] and_ln245_5_fu_604_p2;
wire   [0:0] xor_ln245_11_fu_610_p2;
wire   [9:0] select_ln245_10_fu_832_p3;
wire   [9:0] tmp_5_fu_840_p4;
wire   [0:0] and_ln245_6_fu_647_p2;
wire   [0:0] xor_ln245_13_fu_653_p2;
wire   [9:0] select_ln245_12_fu_858_p3;
wire   [9:0] tmp_6_fu_866_p4;
wire   [0:0] and_ln245_7_fu_690_p2;
wire   [0:0] xor_ln245_15_fu_696_p2;
wire   [9:0] select_ln245_14_fu_884_p3;
wire   [9:0] tmp_7_fu_892_p4;
wire   [17:0] zext_ln50_1_fu_945_p1;
wire   [17:0] zext_ln50_fu_942_p1;
wire   [17:0] add_ln50_2_fu_948_p2;
wire   [0:0] tmp_25_fu_954_p3;
wire   [17:0] zext_ln50_3_fu_973_p1;
wire   [17:0] zext_ln50_2_fu_970_p1;
wire   [17:0] add_ln50_3_fu_976_p2;
wire   [0:0] tmp_26_fu_982_p3;
wire   [17:0] zext_ln50_5_fu_1001_p1;
wire   [17:0] zext_ln50_4_fu_998_p1;
wire   [17:0] add_ln50_5_fu_1004_p2;
wire   [0:0] tmp_29_fu_1010_p3;
wire   [17:0] zext_ln50_7_fu_1029_p1;
wire   [17:0] zext_ln50_6_fu_1026_p1;
wire   [17:0] add_ln50_6_fu_1032_p2;
wire   [0:0] tmp_30_fu_1038_p3;
wire  signed [18:0] sext_ln50_3_fu_1057_p1;
wire  signed [18:0] sext_ln50_2_fu_1054_p1;
wire   [18:0] add_ln50_4_fu_1064_p2;
wire   [17:0] add_ln50_8_fu_1060_p2;
wire   [0:0] tmp_27_fu_1070_p3;
wire   [0:0] tmp_28_fu_1078_p3;
wire   [0:0] xor_ln50_2_fu_1086_p2;
wire   [0:0] xor_ln50_3_fu_1098_p2;
wire   [0:0] xor_ln50_4_fu_1110_p2;
wire   [0:0] and_ln50_1_fu_1092_p2;
wire   [0:0] xor_ln50_5_fu_1116_p2;
wire   [0:0] and_ln50_2_fu_1104_p2;
wire   [0:0] or_ln50_fu_1122_p2;
wire   [17:0] select_ln50_4_fu_1128_p3;
wire   [17:0] select_ln50_5_fu_1136_p3;
wire  signed [18:0] sext_ln50_5_fu_1155_p1;
wire  signed [18:0] sext_ln50_4_fu_1152_p1;
wire   [18:0] add_ln50_7_fu_1162_p2;
wire   [17:0] add_ln50_9_fu_1158_p2;
wire   [0:0] tmp_31_fu_1168_p3;
wire   [0:0] tmp_32_fu_1176_p3;
wire   [0:0] xor_ln50_6_fu_1184_p2;
wire   [0:0] xor_ln50_7_fu_1196_p2;
wire   [0:0] xor_ln50_8_fu_1208_p2;
wire   [0:0] and_ln50_3_fu_1190_p2;
wire   [0:0] xor_ln50_9_fu_1214_p2;
wire   [0:0] and_ln50_4_fu_1202_p2;
wire   [0:0] or_ln50_1_fu_1220_p2;
wire   [17:0] select_ln50_9_fu_1226_p3;
wire   [17:0] select_ln50_10_fu_1234_p3;
wire  signed [18:0] sext_ln50_fu_1250_p1;
wire  signed [18:0] sext_ln50_1_fu_1253_p1;
wire   [18:0] add_ln50_fu_1260_p2;
wire   [17:0] add_ln50_1_fu_1256_p2;
wire   [0:0] tmp_33_fu_1266_p3;
wire   [0:0] tmp_34_fu_1274_p3;
wire   [0:0] xor_ln50_fu_1282_p2;
wire   [0:0] and_ln50_fu_1288_p2;
wire   [0:0] xor_ln50_1_fu_1294_p2;
wire   [9:0] select_ln50_fu_1300_p3;
wire   [9:0] tmp_8_fu_1308_p4;
wire   [16:0] grp_fu_1336_p1;
wire   [25:0] grp_fu_1336_p2;
reg    grp_fu_1336_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] grp_fu_1336_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 res_preg = 16'd0;
end

JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4),
    .address5(exp_table_address5),
    .ce5(exp_table_ce5),
    .q5(exp_table_q5),
    .address6(exp_table_address6),
    .ce6(exp_table_ce6),
    .q6(exp_table_q6),
    .address7(exp_table_address7),
    .ce7(exp_table_ce7),
    .q7(exp_table_q7)
);

JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

JetTagger_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U6626(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inv_exp_sum_reg_1613),
    .din1(grp_fu_1336_p1),
    .ce(grp_fu_1336_ce),
    .dout(grp_fu_1336_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            res_preg <= {{grp_fu_1336_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        exp_res_1_reg_1531 <= exp_table_q6;
        exp_res_2_reg_1536 <= exp_table_q5;
        exp_res_3_reg_1541 <= exp_table_q4;
        exp_res_4_reg_1546 <= exp_table_q3;
        exp_res_5_reg_1551 <= exp_table_q2;
        exp_res_6_reg_1556 <= exp_table_q1;
        exp_res_7_reg_1561 <= exp_table_q0;
        exp_res_reg_1526 <= exp_table_q7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_7_reg_1561_pp0_iter10_reg <= exp_res_7_reg_1561_pp0_iter9_reg;
        exp_res_7_reg_1561_pp0_iter11_reg <= exp_res_7_reg_1561_pp0_iter10_reg;
        exp_res_7_reg_1561_pp0_iter7_reg <= exp_res_7_reg_1561;
        exp_res_7_reg_1561_pp0_iter8_reg <= exp_res_7_reg_1561_pp0_iter7_reg;
        exp_res_7_reg_1561_pp0_iter9_reg <= exp_res_7_reg_1561_pp0_iter8_reg;
        inv_exp_sum_reg_1613 <= invert_table_q0;
        p_read_1_reg_1353_pp0_iter2_reg <= p_read_1_reg_1353_pp0_iter1_reg;
        p_read_1_reg_1353_pp0_iter3_reg <= p_read_1_reg_1353_pp0_iter2_reg;
        p_read_2_reg_1360_pp0_iter2_reg <= p_read_2_reg_1360_pp0_iter1_reg;
        p_read_2_reg_1360_pp0_iter3_reg <= p_read_2_reg_1360_pp0_iter2_reg;
        p_read_3_reg_1367_pp0_iter2_reg <= p_read_3_reg_1367_pp0_iter1_reg;
        p_read_3_reg_1367_pp0_iter3_reg <= p_read_3_reg_1367_pp0_iter2_reg;
        p_read_4_reg_1374_pp0_iter2_reg <= p_read_4_reg_1374_pp0_iter1_reg;
        p_read_4_reg_1374_pp0_iter3_reg <= p_read_4_reg_1374_pp0_iter2_reg;
        p_read_5_reg_1381_pp0_iter2_reg <= p_read_5_reg_1381_pp0_iter1_reg;
        p_read_5_reg_1381_pp0_iter3_reg <= p_read_5_reg_1381_pp0_iter2_reg;
        p_read_6_reg_1388_pp0_iter2_reg <= p_read_6_reg_1388_pp0_iter1_reg;
        p_read_6_reg_1388_pp0_iter3_reg <= p_read_6_reg_1388_pp0_iter2_reg;
        p_read_7_reg_1395_pp0_iter2_reg <= p_read_7_reg_1395_pp0_iter1_reg;
        p_read_7_reg_1395_pp0_iter3_reg <= p_read_7_reg_1395_pp0_iter2_reg;
        p_read_8_reg_1402_pp0_iter2_reg <= p_read_8_reg_1402_pp0_iter1_reg;
        p_read_8_reg_1402_pp0_iter3_reg <= p_read_8_reg_1402_pp0_iter2_reg;
        select_ln245_11_reg_1471 <= select_ln245_11_fu_850_p3;
        select_ln245_13_reg_1476 <= select_ln245_13_fu_876_p3;
        select_ln245_15_reg_1481 <= select_ln245_15_fu_902_p3;
        select_ln245_1_reg_1446 <= select_ln245_1_fu_720_p3;
        select_ln245_3_reg_1451 <= select_ln245_3_fu_746_p3;
        select_ln245_5_reg_1456 <= select_ln245_5_fu_772_p3;
        select_ln245_7_reg_1461 <= select_ln245_7_fu_798_p3;
        select_ln245_9_reg_1466 <= select_ln245_9_fu_824_p3;
        select_ln50_11_reg_1597 <= select_ln50_11_fu_1242_p3;
        select_ln50_1_reg_1603 <= select_ln50_1_fu_1318_p3;
        select_ln50_2_reg_1567 <= select_ln50_2_fu_962_p3;
        select_ln50_3_reg_1573 <= select_ln50_3_fu_990_p3;
        select_ln50_6_reg_1591 <= select_ln50_6_fu_1144_p3;
        select_ln50_7_reg_1579 <= select_ln50_7_fu_1018_p3;
        select_ln50_8_reg_1585 <= select_ln50_8_fu_1046_p3;
        select_ln65_2_reg_1429 <= select_ln65_2_fu_289_p3;
        select_ln65_5_reg_1435 <= select_ln65_5_fu_331_p3;
        x_max_reg_1441 <= x_max_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln65_1_reg_1414 <= icmp_ln65_1_fu_243_p2;
        icmp_ln65_3_reg_1419 <= icmp_ln65_3_fu_247_p2;
        icmp_ln65_4_reg_1424 <= icmp_ln65_4_fu_251_p2;
        icmp_ln65_reg_1409 <= icmp_ln65_fu_239_p2;
        p_read_1_reg_1353 <= p_read7;
        p_read_1_reg_1353_pp0_iter1_reg <= p_read_1_reg_1353;
        p_read_2_reg_1360 <= p_read6;
        p_read_2_reg_1360_pp0_iter1_reg <= p_read_2_reg_1360;
        p_read_3_reg_1367 <= p_read5;
        p_read_3_reg_1367_pp0_iter1_reg <= p_read_3_reg_1367;
        p_read_4_reg_1374 <= p_read4;
        p_read_4_reg_1374_pp0_iter1_reg <= p_read_4_reg_1374;
        p_read_5_reg_1381 <= p_read3;
        p_read_5_reg_1381_pp0_iter1_reg <= p_read_5_reg_1381;
        p_read_6_reg_1388 <= p_read2;
        p_read_6_reg_1388_pp0_iter1_reg <= p_read_6_reg_1388;
        p_read_7_reg_1395 <= p_read1;
        p_read_7_reg_1395_pp0_iter1_reg <= p_read_7_reg_1395;
        p_read_8_reg_1402 <= p_read;
        p_read_8_reg_1402_pp0_iter1_reg <= p_read_8_reg_1402;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce5 = 1'b1;
    end else begin
        exp_table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce6 = 1'b1;
    end else begin
        exp_table_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce7 = 1'b1;
    end else begin
        exp_table_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1336_ce = 1'b1;
    end else begin
        grp_fu_1336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        res = {{grp_fu_1336_p2[25:10]}};
    end else begin
        res = res_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_1256_p2 = ($signed(select_ln50_6_reg_1591) + $signed(select_ln50_11_reg_1597));

assign add_ln50_2_fu_948_p2 = (zext_ln50_1_fu_945_p1 + zext_ln50_fu_942_p1);

assign add_ln50_3_fu_976_p2 = (zext_ln50_3_fu_973_p1 + zext_ln50_2_fu_970_p1);

assign add_ln50_4_fu_1064_p2 = ($signed(sext_ln50_3_fu_1057_p1) + $signed(sext_ln50_2_fu_1054_p1));

assign add_ln50_5_fu_1004_p2 = (zext_ln50_5_fu_1001_p1 + zext_ln50_4_fu_998_p1);

assign add_ln50_6_fu_1032_p2 = (zext_ln50_7_fu_1029_p1 + zext_ln50_6_fu_1026_p1);

assign add_ln50_7_fu_1162_p2 = ($signed(sext_ln50_5_fu_1155_p1) + $signed(sext_ln50_4_fu_1152_p1));

assign add_ln50_8_fu_1060_p2 = ($signed(select_ln50_3_reg_1573) + $signed(select_ln50_2_reg_1567));

assign add_ln50_9_fu_1158_p2 = ($signed(select_ln50_8_reg_1585) + $signed(select_ln50_7_reg_1579));

assign add_ln50_fu_1260_p2 = ($signed(sext_ln50_fu_1250_p1) + $signed(sext_ln50_1_fu_1253_p1));

assign and_ln245_1_fu_432_p2 = (xor_ln245_2_fu_426_p2 & tmp_12_fu_418_p3);

assign and_ln245_2_fu_475_p2 = (xor_ln245_4_fu_469_p2 & tmp_14_fu_461_p3);

assign and_ln245_3_fu_518_p2 = (xor_ln245_6_fu_512_p2 & tmp_16_fu_504_p3);

assign and_ln245_4_fu_561_p2 = (xor_ln245_8_fu_555_p2 & tmp_18_fu_547_p3);

assign and_ln245_5_fu_604_p2 = (xor_ln245_10_fu_598_p2 & tmp_20_fu_590_p3);

assign and_ln245_6_fu_647_p2 = (xor_ln245_12_fu_641_p2 & tmp_22_fu_633_p3);

assign and_ln245_7_fu_690_p2 = (xor_ln245_14_fu_684_p2 & tmp_24_fu_676_p3);

assign and_ln245_fu_389_p2 = (xor_ln245_fu_383_p2 & tmp_10_fu_375_p3);

assign and_ln50_1_fu_1092_p2 = (xor_ln50_2_fu_1086_p2 & tmp_28_fu_1078_p3);

assign and_ln50_2_fu_1104_p2 = (xor_ln50_3_fu_1098_p2 & tmp_27_fu_1070_p3);

assign and_ln50_3_fu_1190_p2 = (xor_ln50_6_fu_1184_p2 & tmp_32_fu_1176_p3);

assign and_ln50_4_fu_1202_p2 = (xor_ln50_7_fu_1196_p2 & tmp_31_fu_1168_p3);

assign and_ln50_fu_1288_p2 = (xor_ln50_fu_1282_p2 & tmp_34_fu_1274_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table_address0 = zext_ln255_7_fu_938_p1;

assign exp_table_address1 = zext_ln255_6_fu_934_p1;

assign exp_table_address2 = zext_ln255_5_fu_930_p1;

assign exp_table_address3 = zext_ln255_4_fu_926_p1;

assign exp_table_address4 = zext_ln255_3_fu_922_p1;

assign exp_table_address5 = zext_ln255_2_fu_918_p1;

assign exp_table_address6 = zext_ln255_1_fu_914_p1;

assign exp_table_address7 = zext_ln255_fu_910_p1;

assign grp_fu_1336_p1 = grp_fu_1336_p10;

assign grp_fu_1336_p10 = exp_res_7_reg_1561_pp0_iter11_reg;

assign icmp_ln65_1_fu_243_p2 = (($signed(p_read_6_reg_1388) < $signed(p_read_5_reg_1381)) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_277_p2 = (($signed(select_ln65_fu_260_p3) < $signed(select_ln65_1_fu_271_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_247_p2 = (($signed(p_read_4_reg_1374) < $signed(p_read_3_reg_1367)) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_251_p2 = (($signed(p_read_2_reg_1360) < $signed(p_read_1_reg_1353)) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_319_p2 = (($signed(select_ln65_3_fu_302_p3) < $signed(select_ln65_4_fu_313_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_339_p2 = (($signed(select_ln65_2_reg_1429) < $signed(select_ln65_5_reg_1435)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_239_p2 = (($signed(p_read_8_reg_1402) < $signed(p_read_7_reg_1395)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_1326_p1;

assign or_ln50_1_fu_1220_p2 = (xor_ln50_9_fu_1214_p2 | and_ln50_3_fu_1190_p2);

assign or_ln50_fu_1122_p2 = (xor_ln50_5_fu_1116_p2 | and_ln50_1_fu_1092_p2);

assign select_ln245_10_fu_832_p3 = ((and_ln245_5_fu_604_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_11_fu_850_p3 = ((xor_ln245_11_fu_610_p2[0:0] == 1'b1) ? select_ln245_10_fu_832_p3 : tmp_5_fu_840_p4);

assign select_ln245_12_fu_858_p3 = ((and_ln245_6_fu_647_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_13_fu_876_p3 = ((xor_ln245_13_fu_653_p2[0:0] == 1'b1) ? select_ln245_12_fu_858_p3 : tmp_6_fu_866_p4);

assign select_ln245_14_fu_884_p3 = ((and_ln245_7_fu_690_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_15_fu_902_p3 = ((xor_ln245_15_fu_696_p2[0:0] == 1'b1) ? select_ln245_14_fu_884_p3 : tmp_7_fu_892_p4);

assign select_ln245_1_fu_720_p3 = ((xor_ln245_1_fu_395_p2[0:0] == 1'b1) ? select_ln245_fu_702_p3 : tmp_fu_710_p4);

assign select_ln245_2_fu_728_p3 = ((and_ln245_1_fu_432_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_3_fu_746_p3 = ((xor_ln245_3_fu_438_p2[0:0] == 1'b1) ? select_ln245_2_fu_728_p3 : tmp_1_fu_736_p4);

assign select_ln245_4_fu_754_p3 = ((and_ln245_2_fu_475_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_5_fu_772_p3 = ((xor_ln245_5_fu_481_p2[0:0] == 1'b1) ? select_ln245_4_fu_754_p3 : tmp_2_fu_762_p4);

assign select_ln245_6_fu_780_p3 = ((and_ln245_3_fu_518_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_7_fu_798_p3 = ((xor_ln245_7_fu_524_p2[0:0] == 1'b1) ? select_ln245_6_fu_780_p3 : tmp_3_fu_788_p4);

assign select_ln245_8_fu_806_p3 = ((and_ln245_4_fu_561_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_9_fu_824_p3 = ((xor_ln245_9_fu_567_p2[0:0] == 1'b1) ? select_ln245_8_fu_806_p3 : tmp_4_fu_814_p4);

assign select_ln245_fu_702_p3 = ((and_ln245_fu_389_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln50_10_fu_1234_p3 = ((and_ln50_4_fu_1202_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_9_fu_1158_p2);

assign select_ln50_11_fu_1242_p3 = ((or_ln50_1_fu_1220_p2[0:0] == 1'b1) ? select_ln50_9_fu_1226_p3 : select_ln50_10_fu_1234_p3);

assign select_ln50_1_fu_1318_p3 = ((xor_ln50_1_fu_1294_p2[0:0] == 1'b1) ? select_ln50_fu_1300_p3 : tmp_8_fu_1308_p4);

assign select_ln50_2_fu_962_p3 = ((tmp_25_fu_954_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_2_fu_948_p2);

assign select_ln50_3_fu_990_p3 = ((tmp_26_fu_982_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_3_fu_976_p2);

assign select_ln50_4_fu_1128_p3 = ((xor_ln50_4_fu_1110_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_8_fu_1060_p2);

assign select_ln50_5_fu_1136_p3 = ((and_ln50_2_fu_1104_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_8_fu_1060_p2);

assign select_ln50_6_fu_1144_p3 = ((or_ln50_fu_1122_p2[0:0] == 1'b1) ? select_ln50_4_fu_1128_p3 : select_ln50_5_fu_1136_p3);

assign select_ln50_7_fu_1018_p3 = ((tmp_29_fu_1010_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_5_fu_1004_p2);

assign select_ln50_8_fu_1046_p3 = ((tmp_30_fu_1038_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_6_fu_1032_p2);

assign select_ln50_9_fu_1226_p3 = ((xor_ln50_8_fu_1208_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_9_fu_1158_p2);

assign select_ln50_fu_1300_p3 = ((and_ln50_fu_1288_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_271_p3 = ((xor_ln65_1_fu_266_p2[0:0] == 1'b1) ? p_read_6_reg_1388_pp0_iter1_reg : p_read_5_reg_1381_pp0_iter1_reg);

assign select_ln65_2_fu_289_p3 = ((xor_ln65_2_fu_283_p2[0:0] == 1'b1) ? select_ln65_fu_260_p3 : select_ln65_1_fu_271_p3);

assign select_ln65_3_fu_302_p3 = ((xor_ln65_3_fu_297_p2[0:0] == 1'b1) ? p_read_4_reg_1374_pp0_iter1_reg : p_read_3_reg_1367_pp0_iter1_reg);

assign select_ln65_4_fu_313_p3 = ((xor_ln65_4_fu_308_p2[0:0] == 1'b1) ? p_read_2_reg_1360_pp0_iter1_reg : p_read_1_reg_1353_pp0_iter1_reg);

assign select_ln65_5_fu_331_p3 = ((xor_ln65_5_fu_325_p2[0:0] == 1'b1) ? select_ln65_3_fu_302_p3 : select_ln65_4_fu_313_p3);

assign select_ln65_fu_260_p3 = ((xor_ln65_fu_255_p2[0:0] == 1'b1) ? p_read_8_reg_1402_pp0_iter1_reg : p_read_7_reg_1395_pp0_iter1_reg);

assign sext_ln245_1_fu_358_p1 = $signed(x_max_reg_1441);

assign sext_ln245_2_fu_401_p1 = p_read_7_reg_1395_pp0_iter3_reg;

assign sext_ln245_3_fu_444_p1 = p_read_6_reg_1388_pp0_iter3_reg;

assign sext_ln245_4_fu_487_p1 = p_read_5_reg_1381_pp0_iter3_reg;

assign sext_ln245_5_fu_530_p1 = p_read_4_reg_1374_pp0_iter3_reg;

assign sext_ln245_6_fu_573_p1 = p_read_3_reg_1367_pp0_iter3_reg;

assign sext_ln245_7_fu_616_p1 = p_read_2_reg_1360_pp0_iter3_reg;

assign sext_ln245_8_fu_659_p1 = p_read_1_reg_1353_pp0_iter3_reg;

assign sext_ln245_fu_355_p1 = p_read_8_reg_1402_pp0_iter3_reg;

assign sext_ln50_1_fu_1253_p1 = select_ln50_11_reg_1597;

assign sext_ln50_2_fu_1054_p1 = select_ln50_2_reg_1567;

assign sext_ln50_3_fu_1057_p1 = select_ln50_3_reg_1573;

assign sext_ln50_4_fu_1152_p1 = select_ln50_7_reg_1579;

assign sext_ln50_5_fu_1155_p1 = select_ln50_8_reg_1585;

assign sext_ln50_fu_1250_p1 = select_ln50_6_reg_1591;

assign sub_ln245_1_fu_404_p2 = ($signed(sext_ln245_2_fu_401_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_2_fu_447_p2 = ($signed(sext_ln245_3_fu_444_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_3_fu_490_p2 = ($signed(sext_ln245_4_fu_487_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_4_fu_533_p2 = ($signed(sext_ln245_5_fu_530_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_5_fu_576_p2 = ($signed(sext_ln245_6_fu_573_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_6_fu_619_p2 = ($signed(sext_ln245_7_fu_616_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_7_fu_662_p2 = ($signed(sext_ln245_8_fu_659_p1) - $signed(sext_ln245_1_fu_358_p1));

assign sub_ln245_fu_361_p2 = ($signed(sext_ln245_fu_355_p1) - $signed(sext_ln245_1_fu_358_p1));

assign tmp_10_fu_375_p3 = sub_ln245_fu_361_p2[32'd15];

assign tmp_11_fu_410_p3 = sub_ln245_1_fu_404_p2[32'd16];

assign tmp_12_fu_418_p3 = sub_ln245_1_fu_404_p2[32'd15];

assign tmp_13_fu_453_p3 = sub_ln245_2_fu_447_p2[32'd16];

assign tmp_14_fu_461_p3 = sub_ln245_2_fu_447_p2[32'd15];

assign tmp_15_fu_496_p3 = sub_ln245_3_fu_490_p2[32'd16];

assign tmp_16_fu_504_p3 = sub_ln245_3_fu_490_p2[32'd15];

assign tmp_17_fu_539_p3 = sub_ln245_4_fu_533_p2[32'd16];

assign tmp_18_fu_547_p3 = sub_ln245_4_fu_533_p2[32'd15];

assign tmp_19_fu_582_p3 = sub_ln245_5_fu_576_p2[32'd16];

assign tmp_1_fu_736_p4 = {{sub_ln245_1_fu_404_p2[15:6]}};

assign tmp_20_fu_590_p3 = sub_ln245_5_fu_576_p2[32'd15];

assign tmp_21_fu_625_p3 = sub_ln245_6_fu_619_p2[32'd16];

assign tmp_22_fu_633_p3 = sub_ln245_6_fu_619_p2[32'd15];

assign tmp_23_fu_668_p3 = sub_ln245_7_fu_662_p2[32'd16];

assign tmp_24_fu_676_p3 = sub_ln245_7_fu_662_p2[32'd15];

assign tmp_25_fu_954_p3 = add_ln50_2_fu_948_p2[32'd17];

assign tmp_26_fu_982_p3 = add_ln50_3_fu_976_p2[32'd17];

assign tmp_27_fu_1070_p3 = add_ln50_4_fu_1064_p2[32'd18];

assign tmp_28_fu_1078_p3 = add_ln50_8_fu_1060_p2[32'd17];

assign tmp_29_fu_1010_p3 = add_ln50_5_fu_1004_p2[32'd17];

assign tmp_2_fu_762_p4 = {{sub_ln245_2_fu_447_p2[15:6]}};

assign tmp_30_fu_1038_p3 = add_ln50_6_fu_1032_p2[32'd17];

assign tmp_31_fu_1168_p3 = add_ln50_7_fu_1162_p2[32'd18];

assign tmp_32_fu_1176_p3 = add_ln50_9_fu_1158_p2[32'd17];

assign tmp_33_fu_1266_p3 = add_ln50_fu_1260_p2[32'd18];

assign tmp_34_fu_1274_p3 = add_ln50_1_fu_1256_p2[32'd17];

assign tmp_3_fu_788_p4 = {{sub_ln245_3_fu_490_p2[15:6]}};

assign tmp_4_fu_814_p4 = {{sub_ln245_4_fu_533_p2[15:6]}};

assign tmp_5_fu_840_p4 = {{sub_ln245_5_fu_576_p2[15:6]}};

assign tmp_6_fu_866_p4 = {{sub_ln245_6_fu_619_p2[15:6]}};

assign tmp_7_fu_892_p4 = {{sub_ln245_7_fu_662_p2[15:6]}};

assign tmp_8_fu_1308_p4 = {{add_ln50_1_fu_1256_p2[17:8]}};

assign tmp_9_fu_367_p3 = sub_ln245_fu_361_p2[32'd16];

assign tmp_fu_710_p4 = {{sub_ln245_fu_361_p2[15:6]}};

assign x_max_fu_349_p3 = ((xor_ln65_6_fu_343_p2[0:0] == 1'b1) ? select_ln65_2_reg_1429 : select_ln65_5_reg_1435);

assign xor_ln245_10_fu_598_p2 = (tmp_19_fu_582_p3 ^ 1'd1);

assign xor_ln245_11_fu_610_p2 = (tmp_20_fu_590_p3 ^ tmp_19_fu_582_p3);

assign xor_ln245_12_fu_641_p2 = (tmp_21_fu_625_p3 ^ 1'd1);

assign xor_ln245_13_fu_653_p2 = (tmp_22_fu_633_p3 ^ tmp_21_fu_625_p3);

assign xor_ln245_14_fu_684_p2 = (tmp_23_fu_668_p3 ^ 1'd1);

assign xor_ln245_15_fu_696_p2 = (tmp_24_fu_676_p3 ^ tmp_23_fu_668_p3);

assign xor_ln245_1_fu_395_p2 = (tmp_9_fu_367_p3 ^ tmp_10_fu_375_p3);

assign xor_ln245_2_fu_426_p2 = (tmp_11_fu_410_p3 ^ 1'd1);

assign xor_ln245_3_fu_438_p2 = (tmp_12_fu_418_p3 ^ tmp_11_fu_410_p3);

assign xor_ln245_4_fu_469_p2 = (tmp_13_fu_453_p3 ^ 1'd1);

assign xor_ln245_5_fu_481_p2 = (tmp_14_fu_461_p3 ^ tmp_13_fu_453_p3);

assign xor_ln245_6_fu_512_p2 = (tmp_15_fu_496_p3 ^ 1'd1);

assign xor_ln245_7_fu_524_p2 = (tmp_16_fu_504_p3 ^ tmp_15_fu_496_p3);

assign xor_ln245_8_fu_555_p2 = (tmp_17_fu_539_p3 ^ 1'd1);

assign xor_ln245_9_fu_567_p2 = (tmp_18_fu_547_p3 ^ tmp_17_fu_539_p3);

assign xor_ln245_fu_383_p2 = (tmp_9_fu_367_p3 ^ 1'd1);

assign xor_ln50_1_fu_1294_p2 = (tmp_34_fu_1274_p3 ^ tmp_33_fu_1266_p3);

assign xor_ln50_2_fu_1086_p2 = (tmp_27_fu_1070_p3 ^ 1'd1);

assign xor_ln50_3_fu_1098_p2 = (tmp_28_fu_1078_p3 ^ 1'd1);

assign xor_ln50_4_fu_1110_p2 = (tmp_28_fu_1078_p3 ^ tmp_27_fu_1070_p3);

assign xor_ln50_5_fu_1116_p2 = (xor_ln50_4_fu_1110_p2 ^ 1'd1);

assign xor_ln50_6_fu_1184_p2 = (tmp_31_fu_1168_p3 ^ 1'd1);

assign xor_ln50_7_fu_1196_p2 = (tmp_32_fu_1176_p3 ^ 1'd1);

assign xor_ln50_8_fu_1208_p2 = (tmp_32_fu_1176_p3 ^ tmp_31_fu_1168_p3);

assign xor_ln50_9_fu_1214_p2 = (xor_ln50_8_fu_1208_p2 ^ 1'd1);

assign xor_ln50_fu_1282_p2 = (tmp_33_fu_1266_p3 ^ 1'd1);

assign xor_ln65_1_fu_266_p2 = (icmp_ln65_1_reg_1414 ^ 1'd1);

assign xor_ln65_2_fu_283_p2 = (icmp_ln65_2_fu_277_p2 ^ 1'd1);

assign xor_ln65_3_fu_297_p2 = (icmp_ln65_3_reg_1419 ^ 1'd1);

assign xor_ln65_4_fu_308_p2 = (icmp_ln65_4_reg_1424 ^ 1'd1);

assign xor_ln65_5_fu_325_p2 = (icmp_ln65_5_fu_319_p2 ^ 1'd1);

assign xor_ln65_6_fu_343_p2 = (icmp_ln65_6_fu_339_p2 ^ 1'd1);

assign xor_ln65_fu_255_p2 = (icmp_ln65_reg_1409 ^ 1'd1);

assign zext_ln255_1_fu_914_p1 = select_ln245_3_reg_1451;

assign zext_ln255_2_fu_918_p1 = select_ln245_5_reg_1456;

assign zext_ln255_3_fu_922_p1 = select_ln245_7_reg_1461;

assign zext_ln255_4_fu_926_p1 = select_ln245_9_reg_1466;

assign zext_ln255_5_fu_930_p1 = select_ln245_11_reg_1471;

assign zext_ln255_6_fu_934_p1 = select_ln245_13_reg_1476;

assign zext_ln255_7_fu_938_p1 = select_ln245_15_reg_1481;

assign zext_ln255_fu_910_p1 = select_ln245_1_reg_1446;

assign zext_ln265_fu_1326_p1 = select_ln50_1_reg_1603;

assign zext_ln50_1_fu_945_p1 = exp_res_1_reg_1531;

assign zext_ln50_2_fu_970_p1 = exp_res_2_reg_1536;

assign zext_ln50_3_fu_973_p1 = exp_res_3_reg_1541;

assign zext_ln50_4_fu_998_p1 = exp_res_4_reg_1546;

assign zext_ln50_5_fu_1001_p1 = exp_res_5_reg_1551;

assign zext_ln50_6_fu_1026_p1 = exp_res_6_reg_1556;

assign zext_ln50_7_fu_1029_p1 = exp_res_7_reg_1561;

assign zext_ln50_fu_942_p1 = exp_res_reg_1526;

endmodule //JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s
