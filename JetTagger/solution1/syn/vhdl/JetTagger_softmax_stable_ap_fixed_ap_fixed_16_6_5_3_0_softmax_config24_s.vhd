-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    res : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_1_reg_1353_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_1353_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_1353_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1360_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1360_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1360_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1367 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1367_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1367_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1367_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1374_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1374_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1374_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1381 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1381_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1381_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1381_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1388 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1388_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1388_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1388_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1395_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1395_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1395_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1402 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1402_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1402_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1402_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_reg_1419 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_reg_1424 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_289_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_1429 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_331_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_1435 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_fu_349_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_reg_1441 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln245_1_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_1_reg_1446 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_fu_746_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_reg_1451 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_fu_772_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_reg_1456 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_fu_798_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_reg_1461 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_fu_824_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_reg_1466 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_fu_850_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_reg_1471 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_fu_876_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_reg_1476 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_reg_1481 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_reg_1526 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1531 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1536 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1541 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1546 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1551 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1556 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1561_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_2_fu_962_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_2_reg_1567 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_fu_990_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_reg_1573 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_fu_1018_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_reg_1579 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_fu_1046_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_reg_1585 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_fu_1144_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_reg_1591 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_fu_1242_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_reg_1597 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_1_fu_1318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_1_reg_1603 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_reg_1613 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_6_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_7_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_1326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln65_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_260_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_271_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_2_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_2_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_3_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_302_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_313_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_5_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_5_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_6_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_6_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_fu_355_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln245_1_fu_358_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_fu_361_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_375_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_2_fu_401_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_1_fu_404_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_3_fu_444_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_2_fu_447_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_4_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_4_fu_487_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_3_fu_490_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_6_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_5_fu_530_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_4_fu_533_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_8_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_6_fu_573_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_5_fu_576_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_10_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_7_fu_616_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_6_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_12_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_8_fu_659_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_7_fu_662_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_14_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln245_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_702_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_710_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_3_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_2_fu_728_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_736_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_2_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_5_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_4_fu_754_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_762_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_7_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_6_fu_780_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_788_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_4_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_9_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_8_fu_806_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_814_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_5_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_11_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_10_fu_832_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_840_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_6_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_13_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_12_fu_858_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_866_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_7_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_15_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_14_fu_884_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_892_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_1_fu_945_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_fu_942_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_948_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_954_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_3_fu_973_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_2_fu_970_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_3_fu_976_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_982_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_5_fu_1001_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_4_fu_998_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_5_fu_1004_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_1010_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_7_fu_1029_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_6_fu_1026_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_6_fu_1032_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_1038_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln50_3_fu_1057_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_2_fu_1054_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_4_fu_1064_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_8_fu_1060_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1078_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_2_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_3_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_4_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_5_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_2_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_1128_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_5_fu_1136_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_5_fu_1155_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_4_fu_1152_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_7_fu_1162_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_9_fu_1158_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_31_fu_1168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_6_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_7_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_8_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_3_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_9_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_4_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_1_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_9_fu_1226_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_10_fu_1234_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_fu_1250_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_1_fu_1253_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_fu_1260_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_1_fu_1256_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_1266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_1300_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1308_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1336_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1336_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1336_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1336_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component JetTagger_mul_18s_17ns_26_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7);

    invert_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_2_1_U6626 : component JetTagger_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => inv_exp_sum_reg_1613,
        din1 => grp_fu_1336_p1,
        ce => grp_fu_1336_ce,
        dout => grp_fu_1336_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    res_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                res_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    res_preg <= grp_fu_1336_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                exp_res_1_reg_1531 <= exp_table_q6;
                exp_res_2_reg_1536 <= exp_table_q5;
                exp_res_3_reg_1541 <= exp_table_q4;
                exp_res_4_reg_1546 <= exp_table_q3;
                exp_res_5_reg_1551 <= exp_table_q2;
                exp_res_6_reg_1556 <= exp_table_q1;
                exp_res_7_reg_1561 <= exp_table_q0;
                exp_res_reg_1526 <= exp_table_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_7_reg_1561_pp0_iter10_reg <= exp_res_7_reg_1561_pp0_iter9_reg;
                exp_res_7_reg_1561_pp0_iter11_reg <= exp_res_7_reg_1561_pp0_iter10_reg;
                exp_res_7_reg_1561_pp0_iter7_reg <= exp_res_7_reg_1561;
                exp_res_7_reg_1561_pp0_iter8_reg <= exp_res_7_reg_1561_pp0_iter7_reg;
                exp_res_7_reg_1561_pp0_iter9_reg <= exp_res_7_reg_1561_pp0_iter8_reg;
                inv_exp_sum_reg_1613 <= invert_table_q0;
                p_read_1_reg_1353_pp0_iter2_reg <= p_read_1_reg_1353_pp0_iter1_reg;
                p_read_1_reg_1353_pp0_iter3_reg <= p_read_1_reg_1353_pp0_iter2_reg;
                p_read_2_reg_1360_pp0_iter2_reg <= p_read_2_reg_1360_pp0_iter1_reg;
                p_read_2_reg_1360_pp0_iter3_reg <= p_read_2_reg_1360_pp0_iter2_reg;
                p_read_3_reg_1367_pp0_iter2_reg <= p_read_3_reg_1367_pp0_iter1_reg;
                p_read_3_reg_1367_pp0_iter3_reg <= p_read_3_reg_1367_pp0_iter2_reg;
                p_read_4_reg_1374_pp0_iter2_reg <= p_read_4_reg_1374_pp0_iter1_reg;
                p_read_4_reg_1374_pp0_iter3_reg <= p_read_4_reg_1374_pp0_iter2_reg;
                p_read_5_reg_1381_pp0_iter2_reg <= p_read_5_reg_1381_pp0_iter1_reg;
                p_read_5_reg_1381_pp0_iter3_reg <= p_read_5_reg_1381_pp0_iter2_reg;
                p_read_6_reg_1388_pp0_iter2_reg <= p_read_6_reg_1388_pp0_iter1_reg;
                p_read_6_reg_1388_pp0_iter3_reg <= p_read_6_reg_1388_pp0_iter2_reg;
                p_read_7_reg_1395_pp0_iter2_reg <= p_read_7_reg_1395_pp0_iter1_reg;
                p_read_7_reg_1395_pp0_iter3_reg <= p_read_7_reg_1395_pp0_iter2_reg;
                p_read_8_reg_1402_pp0_iter2_reg <= p_read_8_reg_1402_pp0_iter1_reg;
                p_read_8_reg_1402_pp0_iter3_reg <= p_read_8_reg_1402_pp0_iter2_reg;
                select_ln245_11_reg_1471 <= select_ln245_11_fu_850_p3;
                select_ln245_13_reg_1476 <= select_ln245_13_fu_876_p3;
                select_ln245_15_reg_1481 <= select_ln245_15_fu_902_p3;
                select_ln245_1_reg_1446 <= select_ln245_1_fu_720_p3;
                select_ln245_3_reg_1451 <= select_ln245_3_fu_746_p3;
                select_ln245_5_reg_1456 <= select_ln245_5_fu_772_p3;
                select_ln245_7_reg_1461 <= select_ln245_7_fu_798_p3;
                select_ln245_9_reg_1466 <= select_ln245_9_fu_824_p3;
                select_ln50_11_reg_1597 <= select_ln50_11_fu_1242_p3;
                select_ln50_1_reg_1603 <= select_ln50_1_fu_1318_p3;
                select_ln50_2_reg_1567 <= select_ln50_2_fu_962_p3;
                select_ln50_3_reg_1573 <= select_ln50_3_fu_990_p3;
                select_ln50_6_reg_1591 <= select_ln50_6_fu_1144_p3;
                select_ln50_7_reg_1579 <= select_ln50_7_fu_1018_p3;
                select_ln50_8_reg_1585 <= select_ln50_8_fu_1046_p3;
                select_ln65_2_reg_1429 <= select_ln65_2_fu_289_p3;
                select_ln65_5_reg_1435 <= select_ln65_5_fu_331_p3;
                x_max_reg_1441 <= x_max_fu_349_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln65_1_reg_1414 <= icmp_ln65_1_fu_243_p2;
                icmp_ln65_3_reg_1419 <= icmp_ln65_3_fu_247_p2;
                icmp_ln65_4_reg_1424 <= icmp_ln65_4_fu_251_p2;
                icmp_ln65_reg_1409 <= icmp_ln65_fu_239_p2;
                p_read_1_reg_1353 <= p_read7;
                p_read_1_reg_1353_pp0_iter1_reg <= p_read_1_reg_1353;
                p_read_2_reg_1360 <= p_read6;
                p_read_2_reg_1360_pp0_iter1_reg <= p_read_2_reg_1360;
                p_read_3_reg_1367 <= p_read5;
                p_read_3_reg_1367_pp0_iter1_reg <= p_read_3_reg_1367;
                p_read_4_reg_1374 <= p_read4;
                p_read_4_reg_1374_pp0_iter1_reg <= p_read_4_reg_1374;
                p_read_5_reg_1381 <= p_read3;
                p_read_5_reg_1381_pp0_iter1_reg <= p_read_5_reg_1381;
                p_read_6_reg_1388 <= p_read2;
                p_read_6_reg_1388_pp0_iter1_reg <= p_read_6_reg_1388;
                p_read_7_reg_1395 <= p_read1;
                p_read_7_reg_1395_pp0_iter1_reg <= p_read_7_reg_1395;
                p_read_8_reg_1402 <= p_read;
                p_read_8_reg_1402_pp0_iter1_reg <= p_read_8_reg_1402;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_1256_p2 <= std_logic_vector(signed(select_ln50_6_reg_1591) + signed(select_ln50_11_reg_1597));
    add_ln50_2_fu_948_p2 <= std_logic_vector(unsigned(zext_ln50_1_fu_945_p1) + unsigned(zext_ln50_fu_942_p1));
    add_ln50_3_fu_976_p2 <= std_logic_vector(unsigned(zext_ln50_3_fu_973_p1) + unsigned(zext_ln50_2_fu_970_p1));
    add_ln50_4_fu_1064_p2 <= std_logic_vector(signed(sext_ln50_3_fu_1057_p1) + signed(sext_ln50_2_fu_1054_p1));
    add_ln50_5_fu_1004_p2 <= std_logic_vector(unsigned(zext_ln50_5_fu_1001_p1) + unsigned(zext_ln50_4_fu_998_p1));
    add_ln50_6_fu_1032_p2 <= std_logic_vector(unsigned(zext_ln50_7_fu_1029_p1) + unsigned(zext_ln50_6_fu_1026_p1));
    add_ln50_7_fu_1162_p2 <= std_logic_vector(signed(sext_ln50_5_fu_1155_p1) + signed(sext_ln50_4_fu_1152_p1));
    add_ln50_8_fu_1060_p2 <= std_logic_vector(signed(select_ln50_3_reg_1573) + signed(select_ln50_2_reg_1567));
    add_ln50_9_fu_1158_p2 <= std_logic_vector(signed(select_ln50_8_reg_1585) + signed(select_ln50_7_reg_1579));
    add_ln50_fu_1260_p2 <= std_logic_vector(signed(sext_ln50_fu_1250_p1) + signed(sext_ln50_1_fu_1253_p1));
    and_ln245_1_fu_432_p2 <= (xor_ln245_2_fu_426_p2 and tmp_12_fu_418_p3);
    and_ln245_2_fu_475_p2 <= (xor_ln245_4_fu_469_p2 and tmp_14_fu_461_p3);
    and_ln245_3_fu_518_p2 <= (xor_ln245_6_fu_512_p2 and tmp_16_fu_504_p3);
    and_ln245_4_fu_561_p2 <= (xor_ln245_8_fu_555_p2 and tmp_18_fu_547_p3);
    and_ln245_5_fu_604_p2 <= (xor_ln245_10_fu_598_p2 and tmp_20_fu_590_p3);
    and_ln245_6_fu_647_p2 <= (xor_ln245_12_fu_641_p2 and tmp_22_fu_633_p3);
    and_ln245_7_fu_690_p2 <= (xor_ln245_14_fu_684_p2 and tmp_24_fu_676_p3);
    and_ln245_fu_389_p2 <= (xor_ln245_fu_383_p2 and tmp_10_fu_375_p3);
    and_ln50_1_fu_1092_p2 <= (xor_ln50_2_fu_1086_p2 and tmp_28_fu_1078_p3);
    and_ln50_2_fu_1104_p2 <= (xor_ln50_3_fu_1098_p2 and tmp_27_fu_1070_p3);
    and_ln50_3_fu_1190_p2 <= (xor_ln50_6_fu_1184_p2 and tmp_32_fu_1176_p3);
    and_ln50_4_fu_1202_p2 <= (xor_ln50_7_fu_1196_p2 and tmp_31_fu_1168_p3);
    and_ln50_fu_1288_p2 <= (xor_ln50_fu_1282_p2 and tmp_34_fu_1274_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter13, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table_address0 <= zext_ln255_7_fu_938_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_6_fu_934_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_5_fu_930_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_4_fu_926_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_3_fu_922_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_2_fu_918_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln255_1_fu_914_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln255_fu_910_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1336_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1336_ce <= ap_const_logic_1;
        else 
            grp_fu_1336_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1336_p1 <= grp_fu_1336_p10(17 - 1 downto 0);
    grp_fu_1336_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_reg_1561_pp0_iter11_reg),26));
    icmp_ln65_1_fu_243_p2 <= "1" when (signed(p_read_6_reg_1388) < signed(p_read_5_reg_1381)) else "0";
    icmp_ln65_2_fu_277_p2 <= "1" when (signed(select_ln65_fu_260_p3) < signed(select_ln65_1_fu_271_p3)) else "0";
    icmp_ln65_3_fu_247_p2 <= "1" when (signed(p_read_4_reg_1374) < signed(p_read_3_reg_1367)) else "0";
    icmp_ln65_4_fu_251_p2 <= "1" when (signed(p_read_2_reg_1360) < signed(p_read_1_reg_1353)) else "0";
    icmp_ln65_5_fu_319_p2 <= "1" when (signed(select_ln65_3_fu_302_p3) < signed(select_ln65_4_fu_313_p3)) else "0";
    icmp_ln65_6_fu_339_p2 <= "1" when (signed(select_ln65_2_reg_1429) < signed(select_ln65_5_reg_1435)) else "0";
    icmp_ln65_fu_239_p2 <= "1" when (signed(p_read_8_reg_1402) < signed(p_read_7_reg_1395)) else "0";
    invert_table_address0 <= zext_ln265_fu_1326_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln50_1_fu_1220_p2 <= (xor_ln50_9_fu_1214_p2 or and_ln50_3_fu_1190_p2);
    or_ln50_fu_1122_p2 <= (xor_ln50_5_fu_1116_p2 or and_ln50_1_fu_1092_p2);

    res_assign_proc : process(ap_enable_reg_pp0_iter13, res_preg, ap_block_pp0_stage0_01001, grp_fu_1336_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res <= grp_fu_1336_p2(25 downto 10);
        else 
            res <= res_preg;
        end if; 
    end process;


    res_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln245_10_fu_832_p3 <= 
        ap_const_lv10_1FF when (and_ln245_5_fu_604_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_11_fu_850_p3 <= 
        select_ln245_10_fu_832_p3 when (xor_ln245_11_fu_610_p2(0) = '1') else 
        tmp_5_fu_840_p4;
    select_ln245_12_fu_858_p3 <= 
        ap_const_lv10_1FF when (and_ln245_6_fu_647_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_13_fu_876_p3 <= 
        select_ln245_12_fu_858_p3 when (xor_ln245_13_fu_653_p2(0) = '1') else 
        tmp_6_fu_866_p4;
    select_ln245_14_fu_884_p3 <= 
        ap_const_lv10_1FF when (and_ln245_7_fu_690_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_15_fu_902_p3 <= 
        select_ln245_14_fu_884_p3 when (xor_ln245_15_fu_696_p2(0) = '1') else 
        tmp_7_fu_892_p4;
    select_ln245_1_fu_720_p3 <= 
        select_ln245_fu_702_p3 when (xor_ln245_1_fu_395_p2(0) = '1') else 
        tmp_fu_710_p4;
    select_ln245_2_fu_728_p3 <= 
        ap_const_lv10_1FF when (and_ln245_1_fu_432_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_3_fu_746_p3 <= 
        select_ln245_2_fu_728_p3 when (xor_ln245_3_fu_438_p2(0) = '1') else 
        tmp_1_fu_736_p4;
    select_ln245_4_fu_754_p3 <= 
        ap_const_lv10_1FF when (and_ln245_2_fu_475_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_5_fu_772_p3 <= 
        select_ln245_4_fu_754_p3 when (xor_ln245_5_fu_481_p2(0) = '1') else 
        tmp_2_fu_762_p4;
    select_ln245_6_fu_780_p3 <= 
        ap_const_lv10_1FF when (and_ln245_3_fu_518_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_7_fu_798_p3 <= 
        select_ln245_6_fu_780_p3 when (xor_ln245_7_fu_524_p2(0) = '1') else 
        tmp_3_fu_788_p4;
    select_ln245_8_fu_806_p3 <= 
        ap_const_lv10_1FF when (and_ln245_4_fu_561_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_9_fu_824_p3 <= 
        select_ln245_8_fu_806_p3 when (xor_ln245_9_fu_567_p2(0) = '1') else 
        tmp_4_fu_814_p4;
    select_ln245_fu_702_p3 <= 
        ap_const_lv10_1FF when (and_ln245_fu_389_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln50_10_fu_1234_p3 <= 
        ap_const_lv18_20000 when (and_ln50_4_fu_1202_p2(0) = '1') else 
        add_ln50_9_fu_1158_p2;
    select_ln50_11_fu_1242_p3 <= 
        select_ln50_9_fu_1226_p3 when (or_ln50_1_fu_1220_p2(0) = '1') else 
        select_ln50_10_fu_1234_p3;
    select_ln50_1_fu_1318_p3 <= 
        select_ln50_fu_1300_p3 when (xor_ln50_1_fu_1294_p2(0) = '1') else 
        tmp_8_fu_1308_p4;
    select_ln50_2_fu_962_p3 <= 
        ap_const_lv18_1FFFF when (tmp_25_fu_954_p3(0) = '1') else 
        add_ln50_2_fu_948_p2;
    select_ln50_3_fu_990_p3 <= 
        ap_const_lv18_1FFFF when (tmp_26_fu_982_p3(0) = '1') else 
        add_ln50_3_fu_976_p2;
    select_ln50_4_fu_1128_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_4_fu_1110_p2(0) = '1') else 
        add_ln50_8_fu_1060_p2;
    select_ln50_5_fu_1136_p3 <= 
        ap_const_lv18_20000 when (and_ln50_2_fu_1104_p2(0) = '1') else 
        add_ln50_8_fu_1060_p2;
    select_ln50_6_fu_1144_p3 <= 
        select_ln50_4_fu_1128_p3 when (or_ln50_fu_1122_p2(0) = '1') else 
        select_ln50_5_fu_1136_p3;
    select_ln50_7_fu_1018_p3 <= 
        ap_const_lv18_1FFFF when (tmp_29_fu_1010_p3(0) = '1') else 
        add_ln50_5_fu_1004_p2;
    select_ln50_8_fu_1046_p3 <= 
        ap_const_lv18_1FFFF when (tmp_30_fu_1038_p3(0) = '1') else 
        add_ln50_6_fu_1032_p2;
    select_ln50_9_fu_1226_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_8_fu_1208_p2(0) = '1') else 
        add_ln50_9_fu_1158_p2;
    select_ln50_fu_1300_p3 <= 
        ap_const_lv10_1FF when (and_ln50_fu_1288_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_271_p3 <= 
        p_read_6_reg_1388_pp0_iter1_reg when (xor_ln65_1_fu_266_p2(0) = '1') else 
        p_read_5_reg_1381_pp0_iter1_reg;
    select_ln65_2_fu_289_p3 <= 
        select_ln65_fu_260_p3 when (xor_ln65_2_fu_283_p2(0) = '1') else 
        select_ln65_1_fu_271_p3;
    select_ln65_3_fu_302_p3 <= 
        p_read_4_reg_1374_pp0_iter1_reg when (xor_ln65_3_fu_297_p2(0) = '1') else 
        p_read_3_reg_1367_pp0_iter1_reg;
    select_ln65_4_fu_313_p3 <= 
        p_read_2_reg_1360_pp0_iter1_reg when (xor_ln65_4_fu_308_p2(0) = '1') else 
        p_read_1_reg_1353_pp0_iter1_reg;
    select_ln65_5_fu_331_p3 <= 
        select_ln65_3_fu_302_p3 when (xor_ln65_5_fu_325_p2(0) = '1') else 
        select_ln65_4_fu_313_p3;
    select_ln65_fu_260_p3 <= 
        p_read_8_reg_1402_pp0_iter1_reg when (xor_ln65_fu_255_p2(0) = '1') else 
        p_read_7_reg_1395_pp0_iter1_reg;
        sext_ln245_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_reg_1441),17));

        sext_ln245_2_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_7_reg_1395_pp0_iter3_reg),17));

        sext_ln245_3_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_6_reg_1388_pp0_iter3_reg),17));

        sext_ln245_4_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_5_reg_1381_pp0_iter3_reg),17));

        sext_ln245_5_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_1374_pp0_iter3_reg),17));

        sext_ln245_6_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_1367_pp0_iter3_reg),17));

        sext_ln245_7_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_1360_pp0_iter3_reg),17));

        sext_ln245_8_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_1353_pp0_iter3_reg),17));

        sext_ln245_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_8_reg_1402_pp0_iter3_reg),17));

        sext_ln50_1_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_11_reg_1597),19));

        sext_ln50_2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_2_reg_1567),19));

        sext_ln50_3_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_3_reg_1573),19));

        sext_ln50_4_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_7_reg_1579),19));

        sext_ln50_5_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_8_reg_1585),19));

        sext_ln50_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_6_reg_1591),19));

    sub_ln245_1_fu_404_p2 <= std_logic_vector(signed(sext_ln245_2_fu_401_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_2_fu_447_p2 <= std_logic_vector(signed(sext_ln245_3_fu_444_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_3_fu_490_p2 <= std_logic_vector(signed(sext_ln245_4_fu_487_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_4_fu_533_p2 <= std_logic_vector(signed(sext_ln245_5_fu_530_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_5_fu_576_p2 <= std_logic_vector(signed(sext_ln245_6_fu_573_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_6_fu_619_p2 <= std_logic_vector(signed(sext_ln245_7_fu_616_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_7_fu_662_p2 <= std_logic_vector(signed(sext_ln245_8_fu_659_p1) - signed(sext_ln245_1_fu_358_p1));
    sub_ln245_fu_361_p2 <= std_logic_vector(signed(sext_ln245_fu_355_p1) - signed(sext_ln245_1_fu_358_p1));
    tmp_10_fu_375_p3 <= sub_ln245_fu_361_p2(15 downto 15);
    tmp_11_fu_410_p3 <= sub_ln245_1_fu_404_p2(16 downto 16);
    tmp_12_fu_418_p3 <= sub_ln245_1_fu_404_p2(15 downto 15);
    tmp_13_fu_453_p3 <= sub_ln245_2_fu_447_p2(16 downto 16);
    tmp_14_fu_461_p3 <= sub_ln245_2_fu_447_p2(15 downto 15);
    tmp_15_fu_496_p3 <= sub_ln245_3_fu_490_p2(16 downto 16);
    tmp_16_fu_504_p3 <= sub_ln245_3_fu_490_p2(15 downto 15);
    tmp_17_fu_539_p3 <= sub_ln245_4_fu_533_p2(16 downto 16);
    tmp_18_fu_547_p3 <= sub_ln245_4_fu_533_p2(15 downto 15);
    tmp_19_fu_582_p3 <= sub_ln245_5_fu_576_p2(16 downto 16);
    tmp_1_fu_736_p4 <= sub_ln245_1_fu_404_p2(15 downto 6);
    tmp_20_fu_590_p3 <= sub_ln245_5_fu_576_p2(15 downto 15);
    tmp_21_fu_625_p3 <= sub_ln245_6_fu_619_p2(16 downto 16);
    tmp_22_fu_633_p3 <= sub_ln245_6_fu_619_p2(15 downto 15);
    tmp_23_fu_668_p3 <= sub_ln245_7_fu_662_p2(16 downto 16);
    tmp_24_fu_676_p3 <= sub_ln245_7_fu_662_p2(15 downto 15);
    tmp_25_fu_954_p3 <= add_ln50_2_fu_948_p2(17 downto 17);
    tmp_26_fu_982_p3 <= add_ln50_3_fu_976_p2(17 downto 17);
    tmp_27_fu_1070_p3 <= add_ln50_4_fu_1064_p2(18 downto 18);
    tmp_28_fu_1078_p3 <= add_ln50_8_fu_1060_p2(17 downto 17);
    tmp_29_fu_1010_p3 <= add_ln50_5_fu_1004_p2(17 downto 17);
    tmp_2_fu_762_p4 <= sub_ln245_2_fu_447_p2(15 downto 6);
    tmp_30_fu_1038_p3 <= add_ln50_6_fu_1032_p2(17 downto 17);
    tmp_31_fu_1168_p3 <= add_ln50_7_fu_1162_p2(18 downto 18);
    tmp_32_fu_1176_p3 <= add_ln50_9_fu_1158_p2(17 downto 17);
    tmp_33_fu_1266_p3 <= add_ln50_fu_1260_p2(18 downto 18);
    tmp_34_fu_1274_p3 <= add_ln50_1_fu_1256_p2(17 downto 17);
    tmp_3_fu_788_p4 <= sub_ln245_3_fu_490_p2(15 downto 6);
    tmp_4_fu_814_p4 <= sub_ln245_4_fu_533_p2(15 downto 6);
    tmp_5_fu_840_p4 <= sub_ln245_5_fu_576_p2(15 downto 6);
    tmp_6_fu_866_p4 <= sub_ln245_6_fu_619_p2(15 downto 6);
    tmp_7_fu_892_p4 <= sub_ln245_7_fu_662_p2(15 downto 6);
    tmp_8_fu_1308_p4 <= add_ln50_1_fu_1256_p2(17 downto 8);
    tmp_9_fu_367_p3 <= sub_ln245_fu_361_p2(16 downto 16);
    tmp_fu_710_p4 <= sub_ln245_fu_361_p2(15 downto 6);
    x_max_fu_349_p3 <= 
        select_ln65_2_reg_1429 when (xor_ln65_6_fu_343_p2(0) = '1') else 
        select_ln65_5_reg_1435;
    xor_ln245_10_fu_598_p2 <= (tmp_19_fu_582_p3 xor ap_const_lv1_1);
    xor_ln245_11_fu_610_p2 <= (tmp_20_fu_590_p3 xor tmp_19_fu_582_p3);
    xor_ln245_12_fu_641_p2 <= (tmp_21_fu_625_p3 xor ap_const_lv1_1);
    xor_ln245_13_fu_653_p2 <= (tmp_22_fu_633_p3 xor tmp_21_fu_625_p3);
    xor_ln245_14_fu_684_p2 <= (tmp_23_fu_668_p3 xor ap_const_lv1_1);
    xor_ln245_15_fu_696_p2 <= (tmp_24_fu_676_p3 xor tmp_23_fu_668_p3);
    xor_ln245_1_fu_395_p2 <= (tmp_9_fu_367_p3 xor tmp_10_fu_375_p3);
    xor_ln245_2_fu_426_p2 <= (tmp_11_fu_410_p3 xor ap_const_lv1_1);
    xor_ln245_3_fu_438_p2 <= (tmp_12_fu_418_p3 xor tmp_11_fu_410_p3);
    xor_ln245_4_fu_469_p2 <= (tmp_13_fu_453_p3 xor ap_const_lv1_1);
    xor_ln245_5_fu_481_p2 <= (tmp_14_fu_461_p3 xor tmp_13_fu_453_p3);
    xor_ln245_6_fu_512_p2 <= (tmp_15_fu_496_p3 xor ap_const_lv1_1);
    xor_ln245_7_fu_524_p2 <= (tmp_16_fu_504_p3 xor tmp_15_fu_496_p3);
    xor_ln245_8_fu_555_p2 <= (tmp_17_fu_539_p3 xor ap_const_lv1_1);
    xor_ln245_9_fu_567_p2 <= (tmp_18_fu_547_p3 xor tmp_17_fu_539_p3);
    xor_ln245_fu_383_p2 <= (tmp_9_fu_367_p3 xor ap_const_lv1_1);
    xor_ln50_1_fu_1294_p2 <= (tmp_34_fu_1274_p3 xor tmp_33_fu_1266_p3);
    xor_ln50_2_fu_1086_p2 <= (tmp_27_fu_1070_p3 xor ap_const_lv1_1);
    xor_ln50_3_fu_1098_p2 <= (tmp_28_fu_1078_p3 xor ap_const_lv1_1);
    xor_ln50_4_fu_1110_p2 <= (tmp_28_fu_1078_p3 xor tmp_27_fu_1070_p3);
    xor_ln50_5_fu_1116_p2 <= (xor_ln50_4_fu_1110_p2 xor ap_const_lv1_1);
    xor_ln50_6_fu_1184_p2 <= (tmp_31_fu_1168_p3 xor ap_const_lv1_1);
    xor_ln50_7_fu_1196_p2 <= (tmp_32_fu_1176_p3 xor ap_const_lv1_1);
    xor_ln50_8_fu_1208_p2 <= (tmp_32_fu_1176_p3 xor tmp_31_fu_1168_p3);
    xor_ln50_9_fu_1214_p2 <= (xor_ln50_8_fu_1208_p2 xor ap_const_lv1_1);
    xor_ln50_fu_1282_p2 <= (tmp_33_fu_1266_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_266_p2 <= (icmp_ln65_1_reg_1414 xor ap_const_lv1_1);
    xor_ln65_2_fu_283_p2 <= (icmp_ln65_2_fu_277_p2 xor ap_const_lv1_1);
    xor_ln65_3_fu_297_p2 <= (icmp_ln65_3_reg_1419 xor ap_const_lv1_1);
    xor_ln65_4_fu_308_p2 <= (icmp_ln65_4_reg_1424 xor ap_const_lv1_1);
    xor_ln65_5_fu_325_p2 <= (icmp_ln65_5_fu_319_p2 xor ap_const_lv1_1);
    xor_ln65_6_fu_343_p2 <= (icmp_ln65_6_fu_339_p2 xor ap_const_lv1_1);
    xor_ln65_fu_255_p2 <= (icmp_ln65_reg_1409 xor ap_const_lv1_1);
    zext_ln255_1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_3_reg_1451),64));
    zext_ln255_2_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_5_reg_1456),64));
    zext_ln255_3_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_7_reg_1461),64));
    zext_ln255_4_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_9_reg_1466),64));
    zext_ln255_5_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_11_reg_1471),64));
    zext_ln255_6_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_13_reg_1476),64));
    zext_ln255_7_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_15_reg_1481),64));
    zext_ln255_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_1_reg_1446),64));
    zext_ln265_fu_1326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_reg_1603),64));
    zext_ln50_1_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_reg_1531),18));
    zext_ln50_2_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_reg_1536),18));
    zext_ln50_3_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_reg_1541),18));
    zext_ln50_4_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_reg_1546),18));
    zext_ln50_5_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_5_reg_1551),18));
    zext_ln50_6_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_6_reg_1556),18));
    zext_ln50_7_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_reg_1561),18));
    zext_ln50_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_reg_1526),18));
end behav;
