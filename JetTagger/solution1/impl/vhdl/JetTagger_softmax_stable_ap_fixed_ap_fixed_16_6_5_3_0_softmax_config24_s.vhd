-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_7_val_read_reg_1349 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_7_val_read_reg_1349_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_val_read_reg_1349_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val_read_reg_1355 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val_read_reg_1355_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val_read_reg_1355_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val_read_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val_read_reg_1361_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val_read_reg_1361_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val_read_reg_1367 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val_read_reg_1367_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val_read_reg_1367_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val_read_reg_1373 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val_read_reg_1373_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val_read_reg_1373_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val_read_reg_1379 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val_read_reg_1379_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val_read_reg_1379_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_1385_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_1385_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_1391_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_1391_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1397 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_1402 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_reg_1407 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_286_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_1417 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_328_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_1423 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_fu_346_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_reg_1429 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln245_1_fu_717_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_1_reg_1434 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_fu_743_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_reg_1439 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_fu_769_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_reg_1444 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_fu_795_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_reg_1449 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_fu_821_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_reg_1454 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_fu_847_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_reg_1459 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_fu_873_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_reg_1464 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_fu_899_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_reg_1469 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_reg_1514 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_reg_1519 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_reg_1524 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_reg_1529 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_reg_1534 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_reg_1539 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_reg_1544 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_reg_1549_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_2_fu_959_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_2_reg_1555 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_fu_987_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_3_reg_1561 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_fu_1015_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_7_reg_1567 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_fu_1043_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_reg_1573 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_fu_1141_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_reg_1579 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_fu_1239_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_11_reg_1585 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_1_fu_1315_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_1_reg_1591 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_reg_1601 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_6_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_7_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_1323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln65_fu_228_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_234_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_240_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_240_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_246_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_246_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln65_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_257_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_2_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_2_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_4_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_310_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_5_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_5_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_6_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_fu_352_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln245_1_fu_355_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_fu_358_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_2_fu_398_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_1_fu_401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_3_fu_441_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_2_fu_444_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_4_fu_484_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_3_fu_487_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_6_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_5_fu_527_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_4_fu_530_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_8_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_6_fu_570_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_5_fu_573_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_10_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_7_fu_613_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_6_fu_616_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_12_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_8_fu_656_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_7_fu_659_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_14_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln245_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_707_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_2_fu_725_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_733_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_2_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_5_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_4_fu_751_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_759_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_3_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_7_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_6_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_785_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_4_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_9_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_8_fu_803_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_811_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_5_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_11_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_10_fu_829_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_837_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_6_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_13_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_12_fu_855_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_863_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_7_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_15_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_14_fu_881_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_889_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_fu_942_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_fu_939_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_945_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_951_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_1_fu_970_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_1_fu_967_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_3_fu_973_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_2_fu_998_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_2_fu_995_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_5_fu_1001_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_28_fu_1007_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_3_fu_1026_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_3_fu_1023_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_6_fu_1029_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_1035_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln50_3_fu_1054_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_2_fu_1051_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_4_fu_1061_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_8_fu_1057_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_1067_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1075_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_2_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_3_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_4_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_1_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_5_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_2_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_1125_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_5_fu_1133_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_5_fu_1152_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_4_fu_1149_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_7_fu_1159_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_9_fu_1155_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_1165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1173_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_6_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_7_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_8_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_3_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_9_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_4_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_1_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_9_fu_1223_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_10_fu_1231_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_fu_1247_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_1_fu_1250_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_fu_1257_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_1_fu_1253_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_32_fu_1263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_1297_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_1305_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1333_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1333_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1333_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component JetTagger_mul_18s_17ns_26_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7);

    invert_table_U : component JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_2_1_U5997 : component JetTagger_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => inv_exp_sum_reg_1601,
        din1 => grp_fu_1333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1333_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_val_read_reg_1391 <= data_0_val;
                data_0_val_read_reg_1391_pp0_iter1_reg <= data_0_val_read_reg_1391;
                data_1_val_read_reg_1385 <= data_1_val;
                data_1_val_read_reg_1385_pp0_iter1_reg <= data_1_val_read_reg_1385;
                data_2_val_read_reg_1379 <= data_2_val;
                data_2_val_read_reg_1379_pp0_iter1_reg <= data_2_val_read_reg_1379;
                data_3_val_read_reg_1373 <= data_3_val;
                data_3_val_read_reg_1373_pp0_iter1_reg <= data_3_val_read_reg_1373;
                data_4_val_read_reg_1367 <= data_4_val;
                data_4_val_read_reg_1367_pp0_iter1_reg <= data_4_val_read_reg_1367;
                data_5_val_read_reg_1361 <= data_5_val;
                data_5_val_read_reg_1361_pp0_iter1_reg <= data_5_val_read_reg_1361;
                data_6_val_read_reg_1355 <= data_6_val;
                data_6_val_read_reg_1355_pp0_iter1_reg <= data_6_val_read_reg_1355;
                data_7_val_read_reg_1349 <= data_7_val;
                data_7_val_read_reg_1349_pp0_iter1_reg <= data_7_val_read_reg_1349;
                icmp_ln65_1_reg_1402 <= icmp_ln65_1_fu_234_p2;
                icmp_ln65_3_reg_1407 <= icmp_ln65_3_fu_240_p2;
                icmp_ln65_4_reg_1412 <= icmp_ln65_4_fu_246_p2;
                icmp_ln65_reg_1397 <= icmp_ln65_fu_228_p2;
                select_ln65_2_reg_1417 <= select_ln65_2_fu_286_p3;
                select_ln65_5_reg_1423 <= select_ln65_5_fu_328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                data_0_val_read_reg_1391_pp0_iter2_reg <= data_0_val_read_reg_1391_pp0_iter1_reg;
                data_1_val_read_reg_1385_pp0_iter2_reg <= data_1_val_read_reg_1385_pp0_iter1_reg;
                data_2_val_read_reg_1379_pp0_iter2_reg <= data_2_val_read_reg_1379_pp0_iter1_reg;
                data_3_val_read_reg_1373_pp0_iter2_reg <= data_3_val_read_reg_1373_pp0_iter1_reg;
                data_4_val_read_reg_1367_pp0_iter2_reg <= data_4_val_read_reg_1367_pp0_iter1_reg;
                data_5_val_read_reg_1361_pp0_iter2_reg <= data_5_val_read_reg_1361_pp0_iter1_reg;
                data_6_val_read_reg_1355_pp0_iter2_reg <= data_6_val_read_reg_1355_pp0_iter1_reg;
                data_7_val_read_reg_1349_pp0_iter2_reg <= data_7_val_read_reg_1349_pp0_iter1_reg;
                exp_res_7_reg_1549_pp0_iter10_reg <= exp_res_7_reg_1549_pp0_iter9_reg;
                exp_res_7_reg_1549_pp0_iter6_reg <= exp_res_7_reg_1549;
                exp_res_7_reg_1549_pp0_iter7_reg <= exp_res_7_reg_1549_pp0_iter6_reg;
                exp_res_7_reg_1549_pp0_iter8_reg <= exp_res_7_reg_1549_pp0_iter7_reg;
                exp_res_7_reg_1549_pp0_iter9_reg <= exp_res_7_reg_1549_pp0_iter8_reg;
                inv_exp_sum_reg_1601 <= invert_table_q0;
                select_ln245_11_reg_1459 <= select_ln245_11_fu_847_p3;
                select_ln245_13_reg_1464 <= select_ln245_13_fu_873_p3;
                select_ln245_15_reg_1469 <= select_ln245_15_fu_899_p3;
                select_ln245_1_reg_1434 <= select_ln245_1_fu_717_p3;
                select_ln245_3_reg_1439 <= select_ln245_3_fu_743_p3;
                select_ln245_5_reg_1444 <= select_ln245_5_fu_769_p3;
                select_ln245_7_reg_1449 <= select_ln245_7_fu_795_p3;
                select_ln245_9_reg_1454 <= select_ln245_9_fu_821_p3;
                select_ln50_11_reg_1585 <= select_ln50_11_fu_1239_p3;
                select_ln50_1_reg_1591 <= select_ln50_1_fu_1315_p3;
                select_ln50_2_reg_1555 <= select_ln50_2_fu_959_p3;
                select_ln50_3_reg_1561 <= select_ln50_3_fu_987_p3;
                select_ln50_6_reg_1579 <= select_ln50_6_fu_1141_p3;
                select_ln50_7_reg_1567 <= select_ln50_7_fu_1015_p3;
                select_ln50_8_reg_1573 <= select_ln50_8_fu_1043_p3;
                x_max_reg_1429 <= x_max_fu_346_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                exp_res_1_reg_1519 <= exp_table_q6;
                exp_res_2_reg_1524 <= exp_table_q5;
                exp_res_3_reg_1529 <= exp_table_q4;
                exp_res_4_reg_1534 <= exp_table_q3;
                exp_res_5_reg_1539 <= exp_table_q2;
                exp_res_6_reg_1544 <= exp_table_q1;
                exp_res_7_reg_1549 <= exp_table_q0;
                exp_res_reg_1514 <= exp_table_q7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_1253_p2 <= std_logic_vector(signed(select_ln50_6_reg_1579) + signed(select_ln50_11_reg_1585));
    add_ln50_2_fu_945_p2 <= std_logic_vector(unsigned(zext_ln50_fu_942_p1) + unsigned(zext_ln43_fu_939_p1));
    add_ln50_3_fu_973_p2 <= std_logic_vector(unsigned(zext_ln50_1_fu_970_p1) + unsigned(zext_ln43_1_fu_967_p1));
    add_ln50_4_fu_1061_p2 <= std_logic_vector(signed(sext_ln50_3_fu_1054_p1) + signed(sext_ln50_2_fu_1051_p1));
    add_ln50_5_fu_1001_p2 <= std_logic_vector(unsigned(zext_ln50_2_fu_998_p1) + unsigned(zext_ln43_2_fu_995_p1));
    add_ln50_6_fu_1029_p2 <= std_logic_vector(unsigned(zext_ln50_3_fu_1026_p1) + unsigned(zext_ln43_3_fu_1023_p1));
    add_ln50_7_fu_1159_p2 <= std_logic_vector(signed(sext_ln50_5_fu_1152_p1) + signed(sext_ln50_4_fu_1149_p1));
    add_ln50_8_fu_1057_p2 <= std_logic_vector(signed(select_ln50_3_reg_1561) + signed(select_ln50_2_reg_1555));
    add_ln50_9_fu_1155_p2 <= std_logic_vector(signed(select_ln50_8_reg_1573) + signed(select_ln50_7_reg_1567));
    add_ln50_fu_1257_p2 <= std_logic_vector(signed(sext_ln50_fu_1247_p1) + signed(sext_ln50_1_fu_1250_p1));
    and_ln245_1_fu_429_p2 <= (xor_ln245_2_fu_423_p2 and tmp_11_fu_415_p3);
    and_ln245_2_fu_472_p2 <= (xor_ln245_4_fu_466_p2 and tmp_13_fu_458_p3);
    and_ln245_3_fu_515_p2 <= (xor_ln245_6_fu_509_p2 and tmp_15_fu_501_p3);
    and_ln245_4_fu_558_p2 <= (xor_ln245_8_fu_552_p2 and tmp_17_fu_544_p3);
    and_ln245_5_fu_601_p2 <= (xor_ln245_10_fu_595_p2 and tmp_19_fu_587_p3);
    and_ln245_6_fu_644_p2 <= (xor_ln245_12_fu_638_p2 and tmp_21_fu_630_p3);
    and_ln245_7_fu_687_p2 <= (xor_ln245_14_fu_681_p2 and tmp_23_fu_673_p3);
    and_ln245_fu_386_p2 <= (xor_ln245_fu_380_p2 and tmp_9_fu_372_p3);
    and_ln50_1_fu_1089_p2 <= (xor_ln50_2_fu_1083_p2 and tmp_27_fu_1075_p3);
    and_ln50_2_fu_1101_p2 <= (xor_ln50_3_fu_1095_p2 and tmp_26_fu_1067_p3);
    and_ln50_3_fu_1187_p2 <= (xor_ln50_6_fu_1181_p2 and tmp_31_fu_1173_p3);
    and_ln50_4_fu_1199_p2 <= (xor_ln50_7_fu_1193_p2 and tmp_30_fu_1165_p3);
    and_ln50_fu_1285_p2 <= (xor_ln50_fu_1279_p2 and tmp_33_fu_1271_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_1333_p2(25 downto 10);
    exp_table_address0 <= zext_ln255_7_fu_935_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_6_fu_931_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_5_fu_927_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_4_fu_923_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_3_fu_919_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_2_fu_915_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln255_1_fu_911_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln255_fu_907_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1333_p1 <= grp_fu_1333_p10(17 - 1 downto 0);
    grp_fu_1333_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_reg_1549_pp0_iter10_reg),26));
    icmp_ln65_1_fu_234_p0 <= data_2_val;
    icmp_ln65_1_fu_234_p1 <= data_3_val;
    icmp_ln65_1_fu_234_p2 <= "1" when (signed(icmp_ln65_1_fu_234_p0) < signed(icmp_ln65_1_fu_234_p1)) else "0";
    icmp_ln65_2_fu_274_p2 <= "1" when (signed(select_ln65_fu_257_p3) < signed(select_ln65_1_fu_268_p3)) else "0";
    icmp_ln65_3_fu_240_p0 <= data_4_val;
    icmp_ln65_3_fu_240_p1 <= data_5_val;
    icmp_ln65_3_fu_240_p2 <= "1" when (signed(icmp_ln65_3_fu_240_p0) < signed(icmp_ln65_3_fu_240_p1)) else "0";
    icmp_ln65_4_fu_246_p0 <= data_6_val;
    icmp_ln65_4_fu_246_p1 <= data_7_val;
    icmp_ln65_4_fu_246_p2 <= "1" when (signed(icmp_ln65_4_fu_246_p0) < signed(icmp_ln65_4_fu_246_p1)) else "0";
    icmp_ln65_5_fu_316_p2 <= "1" when (signed(select_ln65_3_fu_299_p3) < signed(select_ln65_4_fu_310_p3)) else "0";
    icmp_ln65_6_fu_336_p2 <= "1" when (signed(select_ln65_2_reg_1417) < signed(select_ln65_5_reg_1423)) else "0";
    icmp_ln65_fu_228_p0 <= data_0_val;
    icmp_ln65_fu_228_p1 <= data_1_val;
    icmp_ln65_fu_228_p2 <= "1" when (signed(icmp_ln65_fu_228_p0) < signed(icmp_ln65_fu_228_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_1323_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln50_1_fu_1217_p2 <= (xor_ln50_9_fu_1211_p2 or and_ln50_3_fu_1187_p2);
    or_ln50_fu_1119_p2 <= (xor_ln50_5_fu_1113_p2 or and_ln50_1_fu_1089_p2);
    select_ln245_10_fu_829_p3 <= 
        ap_const_lv10_1FF when (and_ln245_5_fu_601_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_11_fu_847_p3 <= 
        select_ln245_10_fu_829_p3 when (xor_ln245_11_fu_607_p2(0) = '1') else 
        tmp_4_fu_837_p4;
    select_ln245_12_fu_855_p3 <= 
        ap_const_lv10_1FF when (and_ln245_6_fu_644_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_13_fu_873_p3 <= 
        select_ln245_12_fu_855_p3 when (xor_ln245_13_fu_650_p2(0) = '1') else 
        tmp_5_fu_863_p4;
    select_ln245_14_fu_881_p3 <= 
        ap_const_lv10_1FF when (and_ln245_7_fu_687_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_15_fu_899_p3 <= 
        select_ln245_14_fu_881_p3 when (xor_ln245_15_fu_693_p2(0) = '1') else 
        tmp_6_fu_889_p4;
    select_ln245_1_fu_717_p3 <= 
        select_ln245_fu_699_p3 when (xor_ln245_1_fu_392_p2(0) = '1') else 
        tmp_fu_707_p4;
    select_ln245_2_fu_725_p3 <= 
        ap_const_lv10_1FF when (and_ln245_1_fu_429_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_3_fu_743_p3 <= 
        select_ln245_2_fu_725_p3 when (xor_ln245_3_fu_435_p2(0) = '1') else 
        tmp_s_fu_733_p4;
    select_ln245_4_fu_751_p3 <= 
        ap_const_lv10_1FF when (and_ln245_2_fu_472_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_5_fu_769_p3 <= 
        select_ln245_4_fu_751_p3 when (xor_ln245_5_fu_478_p2(0) = '1') else 
        tmp_1_fu_759_p4;
    select_ln245_6_fu_777_p3 <= 
        ap_const_lv10_1FF when (and_ln245_3_fu_515_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_7_fu_795_p3 <= 
        select_ln245_6_fu_777_p3 when (xor_ln245_7_fu_521_p2(0) = '1') else 
        tmp_2_fu_785_p4;
    select_ln245_8_fu_803_p3 <= 
        ap_const_lv10_1FF when (and_ln245_4_fu_558_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_9_fu_821_p3 <= 
        select_ln245_8_fu_803_p3 when (xor_ln245_9_fu_564_p2(0) = '1') else 
        tmp_3_fu_811_p4;
    select_ln245_fu_699_p3 <= 
        ap_const_lv10_1FF when (and_ln245_fu_386_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln50_10_fu_1231_p3 <= 
        ap_const_lv18_20000 when (and_ln50_4_fu_1199_p2(0) = '1') else 
        add_ln50_9_fu_1155_p2;
    select_ln50_11_fu_1239_p3 <= 
        select_ln50_9_fu_1223_p3 when (or_ln50_1_fu_1217_p2(0) = '1') else 
        select_ln50_10_fu_1231_p3;
    select_ln50_1_fu_1315_p3 <= 
        select_ln50_fu_1297_p3 when (xor_ln50_1_fu_1291_p2(0) = '1') else 
        tmp_7_fu_1305_p4;
    select_ln50_2_fu_959_p3 <= 
        ap_const_lv18_1FFFF when (tmp_24_fu_951_p3(0) = '1') else 
        add_ln50_2_fu_945_p2;
    select_ln50_3_fu_987_p3 <= 
        ap_const_lv18_1FFFF when (tmp_25_fu_979_p3(0) = '1') else 
        add_ln50_3_fu_973_p2;
    select_ln50_4_fu_1125_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_4_fu_1107_p2(0) = '1') else 
        add_ln50_8_fu_1057_p2;
    select_ln50_5_fu_1133_p3 <= 
        ap_const_lv18_20000 when (and_ln50_2_fu_1101_p2(0) = '1') else 
        add_ln50_8_fu_1057_p2;
    select_ln50_6_fu_1141_p3 <= 
        select_ln50_4_fu_1125_p3 when (or_ln50_fu_1119_p2(0) = '1') else 
        select_ln50_5_fu_1133_p3;
    select_ln50_7_fu_1015_p3 <= 
        ap_const_lv18_1FFFF when (tmp_28_fu_1007_p3(0) = '1') else 
        add_ln50_5_fu_1001_p2;
    select_ln50_8_fu_1043_p3 <= 
        ap_const_lv18_1FFFF when (tmp_29_fu_1035_p3(0) = '1') else 
        add_ln50_6_fu_1029_p2;
    select_ln50_9_fu_1223_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_8_fu_1205_p2(0) = '1') else 
        add_ln50_9_fu_1155_p2;
    select_ln50_fu_1297_p3 <= 
        ap_const_lv10_1FF when (and_ln50_fu_1285_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_268_p3 <= 
        data_2_val_read_reg_1379 when (xor_ln65_1_fu_263_p2(0) = '1') else 
        data_3_val_read_reg_1373;
    select_ln65_2_fu_286_p3 <= 
        select_ln65_fu_257_p3 when (xor_ln65_2_fu_280_p2(0) = '1') else 
        select_ln65_1_fu_268_p3;
    select_ln65_3_fu_299_p3 <= 
        data_4_val_read_reg_1367 when (xor_ln65_3_fu_294_p2(0) = '1') else 
        data_5_val_read_reg_1361;
    select_ln65_4_fu_310_p3 <= 
        data_6_val_read_reg_1355 when (xor_ln65_4_fu_305_p2(0) = '1') else 
        data_7_val_read_reg_1349;
    select_ln65_5_fu_328_p3 <= 
        select_ln65_3_fu_299_p3 when (xor_ln65_5_fu_322_p2(0) = '1') else 
        select_ln65_4_fu_310_p3;
    select_ln65_fu_257_p3 <= 
        data_0_val_read_reg_1391 when (xor_ln65_fu_252_p2(0) = '1') else 
        data_1_val_read_reg_1385;
        sext_ln245_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_reg_1429),17));

        sext_ln245_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_val_read_reg_1385_pp0_iter2_reg),17));

        sext_ln245_3_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_val_read_reg_1379_pp0_iter2_reg),17));

        sext_ln245_4_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_val_read_reg_1373_pp0_iter2_reg),17));

        sext_ln245_5_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_val_read_reg_1367_pp0_iter2_reg),17));

        sext_ln245_6_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_5_val_read_reg_1361_pp0_iter2_reg),17));

        sext_ln245_7_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_6_val_read_reg_1355_pp0_iter2_reg),17));

        sext_ln245_8_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_7_val_read_reg_1349_pp0_iter2_reg),17));

        sext_ln245_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val_read_reg_1391_pp0_iter2_reg),17));

        sext_ln50_1_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_11_reg_1585),19));

        sext_ln50_2_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_2_reg_1555),19));

        sext_ln50_3_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_3_reg_1561),19));

        sext_ln50_4_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_7_reg_1567),19));

        sext_ln50_5_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_8_reg_1573),19));

        sext_ln50_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_6_reg_1579),19));

    sub_ln245_1_fu_401_p2 <= std_logic_vector(signed(sext_ln245_2_fu_398_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_2_fu_444_p2 <= std_logic_vector(signed(sext_ln245_3_fu_441_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_3_fu_487_p2 <= std_logic_vector(signed(sext_ln245_4_fu_484_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_4_fu_530_p2 <= std_logic_vector(signed(sext_ln245_5_fu_527_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_5_fu_573_p2 <= std_logic_vector(signed(sext_ln245_6_fu_570_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_6_fu_616_p2 <= std_logic_vector(signed(sext_ln245_7_fu_613_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_7_fu_659_p2 <= std_logic_vector(signed(sext_ln245_8_fu_656_p1) - signed(sext_ln245_1_fu_355_p1));
    sub_ln245_fu_358_p2 <= std_logic_vector(signed(sext_ln245_fu_352_p1) - signed(sext_ln245_1_fu_355_p1));
    tmp_10_fu_407_p3 <= sub_ln245_1_fu_401_p2(16 downto 16);
    tmp_11_fu_415_p3 <= sub_ln245_1_fu_401_p2(15 downto 15);
    tmp_12_fu_450_p3 <= sub_ln245_2_fu_444_p2(16 downto 16);
    tmp_13_fu_458_p3 <= sub_ln245_2_fu_444_p2(15 downto 15);
    tmp_14_fu_493_p3 <= sub_ln245_3_fu_487_p2(16 downto 16);
    tmp_15_fu_501_p3 <= sub_ln245_3_fu_487_p2(15 downto 15);
    tmp_16_fu_536_p3 <= sub_ln245_4_fu_530_p2(16 downto 16);
    tmp_17_fu_544_p3 <= sub_ln245_4_fu_530_p2(15 downto 15);
    tmp_18_fu_579_p3 <= sub_ln245_5_fu_573_p2(16 downto 16);
    tmp_19_fu_587_p3 <= sub_ln245_5_fu_573_p2(15 downto 15);
    tmp_1_fu_759_p4 <= sub_ln245_2_fu_444_p2(15 downto 6);
    tmp_20_fu_622_p3 <= sub_ln245_6_fu_616_p2(16 downto 16);
    tmp_21_fu_630_p3 <= sub_ln245_6_fu_616_p2(15 downto 15);
    tmp_22_fu_665_p3 <= sub_ln245_7_fu_659_p2(16 downto 16);
    tmp_23_fu_673_p3 <= sub_ln245_7_fu_659_p2(15 downto 15);
    tmp_24_fu_951_p3 <= add_ln50_2_fu_945_p2(17 downto 17);
    tmp_25_fu_979_p3 <= add_ln50_3_fu_973_p2(17 downto 17);
    tmp_26_fu_1067_p3 <= add_ln50_4_fu_1061_p2(18 downto 18);
    tmp_27_fu_1075_p3 <= add_ln50_8_fu_1057_p2(17 downto 17);
    tmp_28_fu_1007_p3 <= add_ln50_5_fu_1001_p2(17 downto 17);
    tmp_29_fu_1035_p3 <= add_ln50_6_fu_1029_p2(17 downto 17);
    tmp_2_fu_785_p4 <= sub_ln245_3_fu_487_p2(15 downto 6);
    tmp_30_fu_1165_p3 <= add_ln50_7_fu_1159_p2(18 downto 18);
    tmp_31_fu_1173_p3 <= add_ln50_9_fu_1155_p2(17 downto 17);
    tmp_32_fu_1263_p3 <= add_ln50_fu_1257_p2(18 downto 18);
    tmp_33_fu_1271_p3 <= add_ln50_1_fu_1253_p2(17 downto 17);
    tmp_3_fu_811_p4 <= sub_ln245_4_fu_530_p2(15 downto 6);
    tmp_4_fu_837_p4 <= sub_ln245_5_fu_573_p2(15 downto 6);
    tmp_5_fu_863_p4 <= sub_ln245_6_fu_616_p2(15 downto 6);
    tmp_6_fu_889_p4 <= sub_ln245_7_fu_659_p2(15 downto 6);
    tmp_7_fu_1305_p4 <= add_ln50_1_fu_1253_p2(17 downto 8);
    tmp_8_fu_364_p3 <= sub_ln245_fu_358_p2(16 downto 16);
    tmp_9_fu_372_p3 <= sub_ln245_fu_358_p2(15 downto 15);
    tmp_fu_707_p4 <= sub_ln245_fu_358_p2(15 downto 6);
    tmp_s_fu_733_p4 <= sub_ln245_1_fu_401_p2(15 downto 6);
    x_max_fu_346_p3 <= 
        select_ln65_2_reg_1417 when (xor_ln65_6_fu_340_p2(0) = '1') else 
        select_ln65_5_reg_1423;
    xor_ln245_10_fu_595_p2 <= (tmp_18_fu_579_p3 xor ap_const_lv1_1);
    xor_ln245_11_fu_607_p2 <= (tmp_19_fu_587_p3 xor tmp_18_fu_579_p3);
    xor_ln245_12_fu_638_p2 <= (tmp_20_fu_622_p3 xor ap_const_lv1_1);
    xor_ln245_13_fu_650_p2 <= (tmp_21_fu_630_p3 xor tmp_20_fu_622_p3);
    xor_ln245_14_fu_681_p2 <= (tmp_22_fu_665_p3 xor ap_const_lv1_1);
    xor_ln245_15_fu_693_p2 <= (tmp_23_fu_673_p3 xor tmp_22_fu_665_p3);
    xor_ln245_1_fu_392_p2 <= (tmp_9_fu_372_p3 xor tmp_8_fu_364_p3);
    xor_ln245_2_fu_423_p2 <= (tmp_10_fu_407_p3 xor ap_const_lv1_1);
    xor_ln245_3_fu_435_p2 <= (tmp_11_fu_415_p3 xor tmp_10_fu_407_p3);
    xor_ln245_4_fu_466_p2 <= (tmp_12_fu_450_p3 xor ap_const_lv1_1);
    xor_ln245_5_fu_478_p2 <= (tmp_13_fu_458_p3 xor tmp_12_fu_450_p3);
    xor_ln245_6_fu_509_p2 <= (tmp_14_fu_493_p3 xor ap_const_lv1_1);
    xor_ln245_7_fu_521_p2 <= (tmp_15_fu_501_p3 xor tmp_14_fu_493_p3);
    xor_ln245_8_fu_552_p2 <= (tmp_16_fu_536_p3 xor ap_const_lv1_1);
    xor_ln245_9_fu_564_p2 <= (tmp_17_fu_544_p3 xor tmp_16_fu_536_p3);
    xor_ln245_fu_380_p2 <= (tmp_8_fu_364_p3 xor ap_const_lv1_1);
    xor_ln50_1_fu_1291_p2 <= (tmp_33_fu_1271_p3 xor tmp_32_fu_1263_p3);
    xor_ln50_2_fu_1083_p2 <= (tmp_26_fu_1067_p3 xor ap_const_lv1_1);
    xor_ln50_3_fu_1095_p2 <= (tmp_27_fu_1075_p3 xor ap_const_lv1_1);
    xor_ln50_4_fu_1107_p2 <= (tmp_27_fu_1075_p3 xor tmp_26_fu_1067_p3);
    xor_ln50_5_fu_1113_p2 <= (xor_ln50_4_fu_1107_p2 xor ap_const_lv1_1);
    xor_ln50_6_fu_1181_p2 <= (tmp_30_fu_1165_p3 xor ap_const_lv1_1);
    xor_ln50_7_fu_1193_p2 <= (tmp_31_fu_1173_p3 xor ap_const_lv1_1);
    xor_ln50_8_fu_1205_p2 <= (tmp_31_fu_1173_p3 xor tmp_30_fu_1165_p3);
    xor_ln50_9_fu_1211_p2 <= (xor_ln50_8_fu_1205_p2 xor ap_const_lv1_1);
    xor_ln50_fu_1279_p2 <= (tmp_32_fu_1263_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_263_p2 <= (icmp_ln65_1_reg_1402 xor ap_const_lv1_1);
    xor_ln65_2_fu_280_p2 <= (icmp_ln65_2_fu_274_p2 xor ap_const_lv1_1);
    xor_ln65_3_fu_294_p2 <= (icmp_ln65_3_reg_1407 xor ap_const_lv1_1);
    xor_ln65_4_fu_305_p2 <= (icmp_ln65_4_reg_1412 xor ap_const_lv1_1);
    xor_ln65_5_fu_322_p2 <= (icmp_ln65_5_fu_316_p2 xor ap_const_lv1_1);
    xor_ln65_6_fu_340_p2 <= (icmp_ln65_6_fu_336_p2 xor ap_const_lv1_1);
    xor_ln65_fu_252_p2 <= (icmp_ln65_reg_1397 xor ap_const_lv1_1);
    zext_ln255_1_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_3_reg_1439),64));
    zext_ln255_2_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_5_reg_1444),64));
    zext_ln255_3_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_7_reg_1449),64));
    zext_ln255_4_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_9_reg_1454),64));
    zext_ln255_5_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_11_reg_1459),64));
    zext_ln255_6_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_13_reg_1464),64));
    zext_ln255_7_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_15_reg_1469),64));
    zext_ln255_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_1_reg_1434),64));
    zext_ln265_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_reg_1591),64));
    zext_ln43_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_reg_1524),18));
    zext_ln43_2_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_reg_1534),18));
    zext_ln43_3_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_6_reg_1544),18));
    zext_ln43_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_reg_1514),18));
    zext_ln50_1_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_reg_1529),18));
    zext_ln50_2_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_5_reg_1539),18));
    zext_ln50_3_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_reg_1549),18));
    zext_ln50_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_reg_1519),18));
end behav;
