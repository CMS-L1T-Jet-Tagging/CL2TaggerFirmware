// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        data_4_val,
        data_5_val,
        data_6_val,
        data_7_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [15:0] data_4_val;
input  [15:0] data_5_val;
input  [15:0] data_6_val;
input  [15:0] data_7_val;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [16:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [16:0] exp_table_q4;
wire   [9:0] exp_table_address5;
reg    exp_table_ce5;
wire   [16:0] exp_table_q5;
wire   [9:0] exp_table_address6;
reg    exp_table_ce6;
wire   [16:0] exp_table_q6;
wire   [9:0] exp_table_address7;
reg    exp_table_ce7;
wire   [16:0] exp_table_q7;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] data_7_val_read_reg_1349;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_7_val_read_reg_1349_pp0_iter1_reg;
reg  signed [15:0] data_7_val_read_reg_1349_pp0_iter2_reg;
reg  signed [15:0] data_6_val_read_reg_1355;
reg  signed [15:0] data_6_val_read_reg_1355_pp0_iter1_reg;
reg  signed [15:0] data_6_val_read_reg_1355_pp0_iter2_reg;
reg  signed [15:0] data_5_val_read_reg_1361;
reg  signed [15:0] data_5_val_read_reg_1361_pp0_iter1_reg;
reg  signed [15:0] data_5_val_read_reg_1361_pp0_iter2_reg;
reg  signed [15:0] data_4_val_read_reg_1367;
reg  signed [15:0] data_4_val_read_reg_1367_pp0_iter1_reg;
reg  signed [15:0] data_4_val_read_reg_1367_pp0_iter2_reg;
reg  signed [15:0] data_3_val_read_reg_1373;
reg  signed [15:0] data_3_val_read_reg_1373_pp0_iter1_reg;
reg  signed [15:0] data_3_val_read_reg_1373_pp0_iter2_reg;
reg  signed [15:0] data_2_val_read_reg_1379;
reg  signed [15:0] data_2_val_read_reg_1379_pp0_iter1_reg;
reg  signed [15:0] data_2_val_read_reg_1379_pp0_iter2_reg;
reg  signed [15:0] data_1_val_read_reg_1385;
reg  signed [15:0] data_1_val_read_reg_1385_pp0_iter1_reg;
reg  signed [15:0] data_1_val_read_reg_1385_pp0_iter2_reg;
reg  signed [15:0] data_0_val_read_reg_1391;
reg  signed [15:0] data_0_val_read_reg_1391_pp0_iter1_reg;
reg  signed [15:0] data_0_val_read_reg_1391_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_228_p2;
reg   [0:0] icmp_ln65_reg_1397;
wire   [0:0] icmp_ln65_1_fu_234_p2;
reg   [0:0] icmp_ln65_1_reg_1402;
wire   [0:0] icmp_ln65_3_fu_240_p2;
reg   [0:0] icmp_ln65_3_reg_1407;
wire   [0:0] icmp_ln65_4_fu_246_p2;
reg   [0:0] icmp_ln65_4_reg_1412;
wire   [15:0] select_ln65_2_fu_286_p3;
reg   [15:0] select_ln65_2_reg_1417;
wire   [15:0] select_ln65_5_fu_328_p3;
reg   [15:0] select_ln65_5_reg_1423;
wire   [15:0] x_max_fu_346_p3;
reg   [15:0] x_max_reg_1429;
wire   [9:0] select_ln245_1_fu_717_p3;
reg   [9:0] select_ln245_1_reg_1434;
wire   [9:0] select_ln245_3_fu_743_p3;
reg   [9:0] select_ln245_3_reg_1439;
wire   [9:0] select_ln245_5_fu_769_p3;
reg   [9:0] select_ln245_5_reg_1444;
wire   [9:0] select_ln245_7_fu_795_p3;
reg   [9:0] select_ln245_7_reg_1449;
wire   [9:0] select_ln245_9_fu_821_p3;
reg   [9:0] select_ln245_9_reg_1454;
wire   [9:0] select_ln245_11_fu_847_p3;
reg   [9:0] select_ln245_11_reg_1459;
wire   [9:0] select_ln245_13_fu_873_p3;
reg   [9:0] select_ln245_13_reg_1464;
wire   [9:0] select_ln245_15_fu_899_p3;
reg   [9:0] select_ln245_15_reg_1469;
reg   [16:0] exp_res_reg_1514;
reg   [16:0] exp_res_1_reg_1519;
reg   [16:0] exp_res_2_reg_1524;
reg   [16:0] exp_res_3_reg_1529;
reg   [16:0] exp_res_4_reg_1534;
reg   [16:0] exp_res_5_reg_1539;
reg   [16:0] exp_res_6_reg_1544;
reg   [16:0] exp_res_7_reg_1549;
reg   [16:0] exp_res_7_reg_1549_pp0_iter6_reg;
reg   [16:0] exp_res_7_reg_1549_pp0_iter7_reg;
reg   [16:0] exp_res_7_reg_1549_pp0_iter8_reg;
reg   [16:0] exp_res_7_reg_1549_pp0_iter9_reg;
reg   [16:0] exp_res_7_reg_1549_pp0_iter10_reg;
wire  signed [17:0] select_ln50_2_fu_959_p3;
reg  signed [17:0] select_ln50_2_reg_1555;
wire  signed [17:0] select_ln50_3_fu_987_p3;
reg  signed [17:0] select_ln50_3_reg_1561;
wire  signed [17:0] select_ln50_7_fu_1015_p3;
reg  signed [17:0] select_ln50_7_reg_1567;
wire  signed [17:0] select_ln50_8_fu_1043_p3;
reg  signed [17:0] select_ln50_8_reg_1573;
wire  signed [17:0] select_ln50_6_fu_1141_p3;
reg  signed [17:0] select_ln50_6_reg_1579;
wire  signed [17:0] select_ln50_11_fu_1239_p3;
reg  signed [17:0] select_ln50_11_reg_1585;
wire   [9:0] select_ln50_1_fu_1315_p3;
reg   [9:0] select_ln50_1_reg_1591;
reg  signed [17:0] inv_exp_sum_reg_1601;
wire   [63:0] zext_ln255_fu_907_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_911_p1;
wire   [63:0] zext_ln255_2_fu_915_p1;
wire   [63:0] zext_ln255_3_fu_919_p1;
wire   [63:0] zext_ln255_4_fu_923_p1;
wire   [63:0] zext_ln255_5_fu_927_p1;
wire   [63:0] zext_ln255_6_fu_931_p1;
wire   [63:0] zext_ln255_7_fu_935_p1;
wire   [63:0] zext_ln265_fu_1323_p1;
wire  signed [15:0] icmp_ln65_fu_228_p0;
wire  signed [15:0] icmp_ln65_fu_228_p1;
wire  signed [15:0] icmp_ln65_1_fu_234_p0;
wire  signed [15:0] icmp_ln65_1_fu_234_p1;
wire  signed [15:0] icmp_ln65_3_fu_240_p0;
wire  signed [15:0] icmp_ln65_3_fu_240_p1;
wire  signed [15:0] icmp_ln65_4_fu_246_p0;
wire  signed [15:0] icmp_ln65_4_fu_246_p1;
wire   [0:0] xor_ln65_fu_252_p2;
wire   [0:0] xor_ln65_1_fu_263_p2;
wire   [15:0] select_ln65_fu_257_p3;
wire   [15:0] select_ln65_1_fu_268_p3;
wire   [0:0] icmp_ln65_2_fu_274_p2;
wire   [0:0] xor_ln65_2_fu_280_p2;
wire   [0:0] xor_ln65_3_fu_294_p2;
wire   [0:0] xor_ln65_4_fu_305_p2;
wire   [15:0] select_ln65_3_fu_299_p3;
wire   [15:0] select_ln65_4_fu_310_p3;
wire   [0:0] icmp_ln65_5_fu_316_p2;
wire   [0:0] xor_ln65_5_fu_322_p2;
wire   [0:0] icmp_ln65_6_fu_336_p2;
wire   [0:0] xor_ln65_6_fu_340_p2;
wire  signed [16:0] sext_ln245_fu_352_p1;
wire  signed [16:0] sext_ln245_1_fu_355_p1;
wire   [16:0] sub_ln245_fu_358_p2;
wire   [0:0] tmp_8_fu_364_p3;
wire   [0:0] tmp_9_fu_372_p3;
wire   [0:0] xor_ln245_fu_380_p2;
wire  signed [16:0] sext_ln245_2_fu_398_p1;
wire   [16:0] sub_ln245_1_fu_401_p2;
wire   [0:0] tmp_10_fu_407_p3;
wire   [0:0] tmp_11_fu_415_p3;
wire   [0:0] xor_ln245_2_fu_423_p2;
wire  signed [16:0] sext_ln245_3_fu_441_p1;
wire   [16:0] sub_ln245_2_fu_444_p2;
wire   [0:0] tmp_12_fu_450_p3;
wire   [0:0] tmp_13_fu_458_p3;
wire   [0:0] xor_ln245_4_fu_466_p2;
wire  signed [16:0] sext_ln245_4_fu_484_p1;
wire   [16:0] sub_ln245_3_fu_487_p2;
wire   [0:0] tmp_14_fu_493_p3;
wire   [0:0] tmp_15_fu_501_p3;
wire   [0:0] xor_ln245_6_fu_509_p2;
wire  signed [16:0] sext_ln245_5_fu_527_p1;
wire   [16:0] sub_ln245_4_fu_530_p2;
wire   [0:0] tmp_16_fu_536_p3;
wire   [0:0] tmp_17_fu_544_p3;
wire   [0:0] xor_ln245_8_fu_552_p2;
wire  signed [16:0] sext_ln245_6_fu_570_p1;
wire   [16:0] sub_ln245_5_fu_573_p2;
wire   [0:0] tmp_18_fu_579_p3;
wire   [0:0] tmp_19_fu_587_p3;
wire   [0:0] xor_ln245_10_fu_595_p2;
wire  signed [16:0] sext_ln245_7_fu_613_p1;
wire   [16:0] sub_ln245_6_fu_616_p2;
wire   [0:0] tmp_20_fu_622_p3;
wire   [0:0] tmp_21_fu_630_p3;
wire   [0:0] xor_ln245_12_fu_638_p2;
wire  signed [16:0] sext_ln245_8_fu_656_p1;
wire   [16:0] sub_ln245_7_fu_659_p2;
wire   [0:0] tmp_22_fu_665_p3;
wire   [0:0] tmp_23_fu_673_p3;
wire   [0:0] xor_ln245_14_fu_681_p2;
wire   [0:0] and_ln245_fu_386_p2;
wire   [0:0] xor_ln245_1_fu_392_p2;
wire   [9:0] select_ln245_fu_699_p3;
wire   [9:0] tmp_fu_707_p4;
wire   [0:0] and_ln245_1_fu_429_p2;
wire   [0:0] xor_ln245_3_fu_435_p2;
wire   [9:0] select_ln245_2_fu_725_p3;
wire   [9:0] tmp_s_fu_733_p4;
wire   [0:0] and_ln245_2_fu_472_p2;
wire   [0:0] xor_ln245_5_fu_478_p2;
wire   [9:0] select_ln245_4_fu_751_p3;
wire   [9:0] tmp_1_fu_759_p4;
wire   [0:0] and_ln245_3_fu_515_p2;
wire   [0:0] xor_ln245_7_fu_521_p2;
wire   [9:0] select_ln245_6_fu_777_p3;
wire   [9:0] tmp_2_fu_785_p4;
wire   [0:0] and_ln245_4_fu_558_p2;
wire   [0:0] xor_ln245_9_fu_564_p2;
wire   [9:0] select_ln245_8_fu_803_p3;
wire   [9:0] tmp_3_fu_811_p4;
wire   [0:0] and_ln245_5_fu_601_p2;
wire   [0:0] xor_ln245_11_fu_607_p2;
wire   [9:0] select_ln245_10_fu_829_p3;
wire   [9:0] tmp_4_fu_837_p4;
wire   [0:0] and_ln245_6_fu_644_p2;
wire   [0:0] xor_ln245_13_fu_650_p2;
wire   [9:0] select_ln245_12_fu_855_p3;
wire   [9:0] tmp_5_fu_863_p4;
wire   [0:0] and_ln245_7_fu_687_p2;
wire   [0:0] xor_ln245_15_fu_693_p2;
wire   [9:0] select_ln245_14_fu_881_p3;
wire   [9:0] tmp_6_fu_889_p4;
wire   [17:0] zext_ln50_fu_942_p1;
wire   [17:0] zext_ln43_fu_939_p1;
wire   [17:0] add_ln50_2_fu_945_p2;
wire   [0:0] tmp_24_fu_951_p3;
wire   [17:0] zext_ln50_1_fu_970_p1;
wire   [17:0] zext_ln43_1_fu_967_p1;
wire   [17:0] add_ln50_3_fu_973_p2;
wire   [0:0] tmp_25_fu_979_p3;
wire   [17:0] zext_ln50_2_fu_998_p1;
wire   [17:0] zext_ln43_2_fu_995_p1;
wire   [17:0] add_ln50_5_fu_1001_p2;
wire   [0:0] tmp_28_fu_1007_p3;
wire   [17:0] zext_ln50_3_fu_1026_p1;
wire   [17:0] zext_ln43_3_fu_1023_p1;
wire   [17:0] add_ln50_6_fu_1029_p2;
wire   [0:0] tmp_29_fu_1035_p3;
wire  signed [18:0] sext_ln50_3_fu_1054_p1;
wire  signed [18:0] sext_ln50_2_fu_1051_p1;
wire   [18:0] add_ln50_4_fu_1061_p2;
wire   [17:0] add_ln50_8_fu_1057_p2;
wire   [0:0] tmp_26_fu_1067_p3;
wire   [0:0] tmp_27_fu_1075_p3;
wire   [0:0] xor_ln50_2_fu_1083_p2;
wire   [0:0] xor_ln50_3_fu_1095_p2;
wire   [0:0] xor_ln50_4_fu_1107_p2;
wire   [0:0] and_ln50_1_fu_1089_p2;
wire   [0:0] xor_ln50_5_fu_1113_p2;
wire   [0:0] and_ln50_2_fu_1101_p2;
wire   [0:0] or_ln50_fu_1119_p2;
wire   [17:0] select_ln50_4_fu_1125_p3;
wire   [17:0] select_ln50_5_fu_1133_p3;
wire  signed [18:0] sext_ln50_5_fu_1152_p1;
wire  signed [18:0] sext_ln50_4_fu_1149_p1;
wire   [18:0] add_ln50_7_fu_1159_p2;
wire   [17:0] add_ln50_9_fu_1155_p2;
wire   [0:0] tmp_30_fu_1165_p3;
wire   [0:0] tmp_31_fu_1173_p3;
wire   [0:0] xor_ln50_6_fu_1181_p2;
wire   [0:0] xor_ln50_7_fu_1193_p2;
wire   [0:0] xor_ln50_8_fu_1205_p2;
wire   [0:0] and_ln50_3_fu_1187_p2;
wire   [0:0] xor_ln50_9_fu_1211_p2;
wire   [0:0] and_ln50_4_fu_1199_p2;
wire   [0:0] or_ln50_1_fu_1217_p2;
wire   [17:0] select_ln50_9_fu_1223_p3;
wire   [17:0] select_ln50_10_fu_1231_p3;
wire  signed [18:0] sext_ln50_fu_1247_p1;
wire  signed [18:0] sext_ln50_1_fu_1250_p1;
wire   [18:0] add_ln50_fu_1257_p2;
wire   [17:0] add_ln50_1_fu_1253_p2;
wire   [0:0] tmp_32_fu_1263_p3;
wire   [0:0] tmp_33_fu_1271_p3;
wire   [0:0] xor_ln50_fu_1279_p2;
wire   [0:0] and_ln50_fu_1285_p2;
wire   [0:0] xor_ln50_1_fu_1291_p2;
wire   [9:0] select_ln50_fu_1297_p3;
wire   [9:0] tmp_7_fu_1305_p4;
wire   [16:0] grp_fu_1333_p1;
wire   [25:0] grp_fu_1333_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to11;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] grp_fu_1333_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
end

JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4),
    .address5(exp_table_address5),
    .ce5(exp_table_ce5),
    .q5(exp_table_q5),
    .address6(exp_table_address6),
    .ce6(exp_table_ce6),
    .q6(exp_table_q6),
    .address7(exp_table_address7),
    .ce7(exp_table_ce7),
    .q7(exp_table_q7)
);

JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

JetTagger_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U5997(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inv_exp_sum_reg_1601),
    .din1(grp_fu_1333_p1),
    .ce(1'b1),
    .dout(grp_fu_1333_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_val_read_reg_1391 <= data_0_val;
        data_0_val_read_reg_1391_pp0_iter1_reg <= data_0_val_read_reg_1391;
        data_1_val_read_reg_1385 <= data_1_val;
        data_1_val_read_reg_1385_pp0_iter1_reg <= data_1_val_read_reg_1385;
        data_2_val_read_reg_1379 <= data_2_val;
        data_2_val_read_reg_1379_pp0_iter1_reg <= data_2_val_read_reg_1379;
        data_3_val_read_reg_1373 <= data_3_val;
        data_3_val_read_reg_1373_pp0_iter1_reg <= data_3_val_read_reg_1373;
        data_4_val_read_reg_1367 <= data_4_val;
        data_4_val_read_reg_1367_pp0_iter1_reg <= data_4_val_read_reg_1367;
        data_5_val_read_reg_1361 <= data_5_val;
        data_5_val_read_reg_1361_pp0_iter1_reg <= data_5_val_read_reg_1361;
        data_6_val_read_reg_1355 <= data_6_val;
        data_6_val_read_reg_1355_pp0_iter1_reg <= data_6_val_read_reg_1355;
        data_7_val_read_reg_1349 <= data_7_val;
        data_7_val_read_reg_1349_pp0_iter1_reg <= data_7_val_read_reg_1349;
        icmp_ln65_1_reg_1402 <= icmp_ln65_1_fu_234_p2;
        icmp_ln65_3_reg_1407 <= icmp_ln65_3_fu_240_p2;
        icmp_ln65_4_reg_1412 <= icmp_ln65_4_fu_246_p2;
        icmp_ln65_reg_1397 <= icmp_ln65_fu_228_p2;
        select_ln65_2_reg_1417 <= select_ln65_2_fu_286_p3;
        select_ln65_5_reg_1423 <= select_ln65_5_fu_328_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        data_0_val_read_reg_1391_pp0_iter2_reg <= data_0_val_read_reg_1391_pp0_iter1_reg;
        data_1_val_read_reg_1385_pp0_iter2_reg <= data_1_val_read_reg_1385_pp0_iter1_reg;
        data_2_val_read_reg_1379_pp0_iter2_reg <= data_2_val_read_reg_1379_pp0_iter1_reg;
        data_3_val_read_reg_1373_pp0_iter2_reg <= data_3_val_read_reg_1373_pp0_iter1_reg;
        data_4_val_read_reg_1367_pp0_iter2_reg <= data_4_val_read_reg_1367_pp0_iter1_reg;
        data_5_val_read_reg_1361_pp0_iter2_reg <= data_5_val_read_reg_1361_pp0_iter1_reg;
        data_6_val_read_reg_1355_pp0_iter2_reg <= data_6_val_read_reg_1355_pp0_iter1_reg;
        data_7_val_read_reg_1349_pp0_iter2_reg <= data_7_val_read_reg_1349_pp0_iter1_reg;
        exp_res_7_reg_1549_pp0_iter10_reg <= exp_res_7_reg_1549_pp0_iter9_reg;
        exp_res_7_reg_1549_pp0_iter6_reg <= exp_res_7_reg_1549;
        exp_res_7_reg_1549_pp0_iter7_reg <= exp_res_7_reg_1549_pp0_iter6_reg;
        exp_res_7_reg_1549_pp0_iter8_reg <= exp_res_7_reg_1549_pp0_iter7_reg;
        exp_res_7_reg_1549_pp0_iter9_reg <= exp_res_7_reg_1549_pp0_iter8_reg;
        inv_exp_sum_reg_1601 <= invert_table_q0;
        select_ln245_11_reg_1459 <= select_ln245_11_fu_847_p3;
        select_ln245_13_reg_1464 <= select_ln245_13_fu_873_p3;
        select_ln245_15_reg_1469 <= select_ln245_15_fu_899_p3;
        select_ln245_1_reg_1434 <= select_ln245_1_fu_717_p3;
        select_ln245_3_reg_1439 <= select_ln245_3_fu_743_p3;
        select_ln245_5_reg_1444 <= select_ln245_5_fu_769_p3;
        select_ln245_7_reg_1449 <= select_ln245_7_fu_795_p3;
        select_ln245_9_reg_1454 <= select_ln245_9_fu_821_p3;
        select_ln50_11_reg_1585 <= select_ln50_11_fu_1239_p3;
        select_ln50_1_reg_1591 <= select_ln50_1_fu_1315_p3;
        select_ln50_2_reg_1555 <= select_ln50_2_fu_959_p3;
        select_ln50_3_reg_1561 <= select_ln50_3_fu_987_p3;
        select_ln50_6_reg_1579 <= select_ln50_6_fu_1141_p3;
        select_ln50_7_reg_1567 <= select_ln50_7_fu_1015_p3;
        select_ln50_8_reg_1573 <= select_ln50_8_fu_1043_p3;
        x_max_reg_1429 <= x_max_fu_346_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_res_1_reg_1519 <= exp_table_q6;
        exp_res_2_reg_1524 <= exp_table_q5;
        exp_res_3_reg_1529 <= exp_table_q4;
        exp_res_4_reg_1534 <= exp_table_q3;
        exp_res_5_reg_1539 <= exp_table_q2;
        exp_res_6_reg_1544 <= exp_table_q1;
        exp_res_7_reg_1549 <= exp_table_q0;
        exp_res_reg_1514 <= exp_table_q7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to11 = 1'b1;
    end else begin
        ap_idle_pp0_0to11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to11 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce5 = 1'b1;
    end else begin
        exp_table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce6 = 1'b1;
    end else begin
        exp_table_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce7 = 1'b1;
    end else begin
        exp_table_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_1253_p2 = ($signed(select_ln50_6_reg_1579) + $signed(select_ln50_11_reg_1585));

assign add_ln50_2_fu_945_p2 = (zext_ln50_fu_942_p1 + zext_ln43_fu_939_p1);

assign add_ln50_3_fu_973_p2 = (zext_ln50_1_fu_970_p1 + zext_ln43_1_fu_967_p1);

assign add_ln50_4_fu_1061_p2 = ($signed(sext_ln50_3_fu_1054_p1) + $signed(sext_ln50_2_fu_1051_p1));

assign add_ln50_5_fu_1001_p2 = (zext_ln50_2_fu_998_p1 + zext_ln43_2_fu_995_p1);

assign add_ln50_6_fu_1029_p2 = (zext_ln50_3_fu_1026_p1 + zext_ln43_3_fu_1023_p1);

assign add_ln50_7_fu_1159_p2 = ($signed(sext_ln50_5_fu_1152_p1) + $signed(sext_ln50_4_fu_1149_p1));

assign add_ln50_8_fu_1057_p2 = ($signed(select_ln50_3_reg_1561) + $signed(select_ln50_2_reg_1555));

assign add_ln50_9_fu_1155_p2 = ($signed(select_ln50_8_reg_1573) + $signed(select_ln50_7_reg_1567));

assign add_ln50_fu_1257_p2 = ($signed(sext_ln50_fu_1247_p1) + $signed(sext_ln50_1_fu_1250_p1));

assign and_ln245_1_fu_429_p2 = (xor_ln245_2_fu_423_p2 & tmp_11_fu_415_p3);

assign and_ln245_2_fu_472_p2 = (xor_ln245_4_fu_466_p2 & tmp_13_fu_458_p3);

assign and_ln245_3_fu_515_p2 = (xor_ln245_6_fu_509_p2 & tmp_15_fu_501_p3);

assign and_ln245_4_fu_558_p2 = (xor_ln245_8_fu_552_p2 & tmp_17_fu_544_p3);

assign and_ln245_5_fu_601_p2 = (xor_ln245_10_fu_595_p2 & tmp_19_fu_587_p3);

assign and_ln245_6_fu_644_p2 = (xor_ln245_12_fu_638_p2 & tmp_21_fu_630_p3);

assign and_ln245_7_fu_687_p2 = (xor_ln245_14_fu_681_p2 & tmp_23_fu_673_p3);

assign and_ln245_fu_386_p2 = (xor_ln245_fu_380_p2 & tmp_9_fu_372_p3);

assign and_ln50_1_fu_1089_p2 = (xor_ln50_2_fu_1083_p2 & tmp_27_fu_1075_p3);

assign and_ln50_2_fu_1101_p2 = (xor_ln50_3_fu_1095_p2 & tmp_26_fu_1067_p3);

assign and_ln50_3_fu_1187_p2 = (xor_ln50_6_fu_1181_p2 & tmp_31_fu_1173_p3);

assign and_ln50_4_fu_1199_p2 = (xor_ln50_7_fu_1193_p2 & tmp_30_fu_1165_p3);

assign and_ln50_fu_1285_p2 = (xor_ln50_fu_1279_p2 & tmp_33_fu_1271_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{grp_fu_1333_p2[25:10]}};

assign exp_table_address0 = zext_ln255_7_fu_935_p1;

assign exp_table_address1 = zext_ln255_6_fu_931_p1;

assign exp_table_address2 = zext_ln255_5_fu_927_p1;

assign exp_table_address3 = zext_ln255_4_fu_923_p1;

assign exp_table_address4 = zext_ln255_3_fu_919_p1;

assign exp_table_address5 = zext_ln255_2_fu_915_p1;

assign exp_table_address6 = zext_ln255_1_fu_911_p1;

assign exp_table_address7 = zext_ln255_fu_907_p1;

assign grp_fu_1333_p1 = grp_fu_1333_p10;

assign grp_fu_1333_p10 = exp_res_7_reg_1549_pp0_iter10_reg;

assign icmp_ln65_1_fu_234_p0 = data_2_val;

assign icmp_ln65_1_fu_234_p1 = data_3_val;

assign icmp_ln65_1_fu_234_p2 = (($signed(icmp_ln65_1_fu_234_p0) < $signed(icmp_ln65_1_fu_234_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_274_p2 = (($signed(select_ln65_fu_257_p3) < $signed(select_ln65_1_fu_268_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_240_p0 = data_4_val;

assign icmp_ln65_3_fu_240_p1 = data_5_val;

assign icmp_ln65_3_fu_240_p2 = (($signed(icmp_ln65_3_fu_240_p0) < $signed(icmp_ln65_3_fu_240_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_246_p0 = data_6_val;

assign icmp_ln65_4_fu_246_p1 = data_7_val;

assign icmp_ln65_4_fu_246_p2 = (($signed(icmp_ln65_4_fu_246_p0) < $signed(icmp_ln65_4_fu_246_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_316_p2 = (($signed(select_ln65_3_fu_299_p3) < $signed(select_ln65_4_fu_310_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_336_p2 = (($signed(select_ln65_2_reg_1417) < $signed(select_ln65_5_reg_1423)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_228_p0 = data_0_val;

assign icmp_ln65_fu_228_p1 = data_1_val;

assign icmp_ln65_fu_228_p2 = (($signed(icmp_ln65_fu_228_p0) < $signed(icmp_ln65_fu_228_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_1323_p1;

assign or_ln50_1_fu_1217_p2 = (xor_ln50_9_fu_1211_p2 | and_ln50_3_fu_1187_p2);

assign or_ln50_fu_1119_p2 = (xor_ln50_5_fu_1113_p2 | and_ln50_1_fu_1089_p2);

assign select_ln245_10_fu_829_p3 = ((and_ln245_5_fu_601_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_11_fu_847_p3 = ((xor_ln245_11_fu_607_p2[0:0] == 1'b1) ? select_ln245_10_fu_829_p3 : tmp_4_fu_837_p4);

assign select_ln245_12_fu_855_p3 = ((and_ln245_6_fu_644_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_13_fu_873_p3 = ((xor_ln245_13_fu_650_p2[0:0] == 1'b1) ? select_ln245_12_fu_855_p3 : tmp_5_fu_863_p4);

assign select_ln245_14_fu_881_p3 = ((and_ln245_7_fu_687_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_15_fu_899_p3 = ((xor_ln245_15_fu_693_p2[0:0] == 1'b1) ? select_ln245_14_fu_881_p3 : tmp_6_fu_889_p4);

assign select_ln245_1_fu_717_p3 = ((xor_ln245_1_fu_392_p2[0:0] == 1'b1) ? select_ln245_fu_699_p3 : tmp_fu_707_p4);

assign select_ln245_2_fu_725_p3 = ((and_ln245_1_fu_429_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_3_fu_743_p3 = ((xor_ln245_3_fu_435_p2[0:0] == 1'b1) ? select_ln245_2_fu_725_p3 : tmp_s_fu_733_p4);

assign select_ln245_4_fu_751_p3 = ((and_ln245_2_fu_472_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_5_fu_769_p3 = ((xor_ln245_5_fu_478_p2[0:0] == 1'b1) ? select_ln245_4_fu_751_p3 : tmp_1_fu_759_p4);

assign select_ln245_6_fu_777_p3 = ((and_ln245_3_fu_515_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_7_fu_795_p3 = ((xor_ln245_7_fu_521_p2[0:0] == 1'b1) ? select_ln245_6_fu_777_p3 : tmp_2_fu_785_p4);

assign select_ln245_8_fu_803_p3 = ((and_ln245_4_fu_558_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_9_fu_821_p3 = ((xor_ln245_9_fu_564_p2[0:0] == 1'b1) ? select_ln245_8_fu_803_p3 : tmp_3_fu_811_p4);

assign select_ln245_fu_699_p3 = ((and_ln245_fu_386_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln50_10_fu_1231_p3 = ((and_ln50_4_fu_1199_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_9_fu_1155_p2);

assign select_ln50_11_fu_1239_p3 = ((or_ln50_1_fu_1217_p2[0:0] == 1'b1) ? select_ln50_9_fu_1223_p3 : select_ln50_10_fu_1231_p3);

assign select_ln50_1_fu_1315_p3 = ((xor_ln50_1_fu_1291_p2[0:0] == 1'b1) ? select_ln50_fu_1297_p3 : tmp_7_fu_1305_p4);

assign select_ln50_2_fu_959_p3 = ((tmp_24_fu_951_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_2_fu_945_p2);

assign select_ln50_3_fu_987_p3 = ((tmp_25_fu_979_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_3_fu_973_p2);

assign select_ln50_4_fu_1125_p3 = ((xor_ln50_4_fu_1107_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_8_fu_1057_p2);

assign select_ln50_5_fu_1133_p3 = ((and_ln50_2_fu_1101_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_8_fu_1057_p2);

assign select_ln50_6_fu_1141_p3 = ((or_ln50_fu_1119_p2[0:0] == 1'b1) ? select_ln50_4_fu_1125_p3 : select_ln50_5_fu_1133_p3);

assign select_ln50_7_fu_1015_p3 = ((tmp_28_fu_1007_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_5_fu_1001_p2);

assign select_ln50_8_fu_1043_p3 = ((tmp_29_fu_1035_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_6_fu_1029_p2);

assign select_ln50_9_fu_1223_p3 = ((xor_ln50_8_fu_1205_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_9_fu_1155_p2);

assign select_ln50_fu_1297_p3 = ((and_ln50_fu_1285_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_268_p3 = ((xor_ln65_1_fu_263_p2[0:0] == 1'b1) ? data_2_val_read_reg_1379 : data_3_val_read_reg_1373);

assign select_ln65_2_fu_286_p3 = ((xor_ln65_2_fu_280_p2[0:0] == 1'b1) ? select_ln65_fu_257_p3 : select_ln65_1_fu_268_p3);

assign select_ln65_3_fu_299_p3 = ((xor_ln65_3_fu_294_p2[0:0] == 1'b1) ? data_4_val_read_reg_1367 : data_5_val_read_reg_1361);

assign select_ln65_4_fu_310_p3 = ((xor_ln65_4_fu_305_p2[0:0] == 1'b1) ? data_6_val_read_reg_1355 : data_7_val_read_reg_1349);

assign select_ln65_5_fu_328_p3 = ((xor_ln65_5_fu_322_p2[0:0] == 1'b1) ? select_ln65_3_fu_299_p3 : select_ln65_4_fu_310_p3);

assign select_ln65_fu_257_p3 = ((xor_ln65_fu_252_p2[0:0] == 1'b1) ? data_0_val_read_reg_1391 : data_1_val_read_reg_1385);

assign sext_ln245_1_fu_355_p1 = $signed(x_max_reg_1429);

assign sext_ln245_2_fu_398_p1 = data_1_val_read_reg_1385_pp0_iter2_reg;

assign sext_ln245_3_fu_441_p1 = data_2_val_read_reg_1379_pp0_iter2_reg;

assign sext_ln245_4_fu_484_p1 = data_3_val_read_reg_1373_pp0_iter2_reg;

assign sext_ln245_5_fu_527_p1 = data_4_val_read_reg_1367_pp0_iter2_reg;

assign sext_ln245_6_fu_570_p1 = data_5_val_read_reg_1361_pp0_iter2_reg;

assign sext_ln245_7_fu_613_p1 = data_6_val_read_reg_1355_pp0_iter2_reg;

assign sext_ln245_8_fu_656_p1 = data_7_val_read_reg_1349_pp0_iter2_reg;

assign sext_ln245_fu_352_p1 = data_0_val_read_reg_1391_pp0_iter2_reg;

assign sext_ln50_1_fu_1250_p1 = select_ln50_11_reg_1585;

assign sext_ln50_2_fu_1051_p1 = select_ln50_2_reg_1555;

assign sext_ln50_3_fu_1054_p1 = select_ln50_3_reg_1561;

assign sext_ln50_4_fu_1149_p1 = select_ln50_7_reg_1567;

assign sext_ln50_5_fu_1152_p1 = select_ln50_8_reg_1573;

assign sext_ln50_fu_1247_p1 = select_ln50_6_reg_1579;

assign sub_ln245_1_fu_401_p2 = ($signed(sext_ln245_2_fu_398_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_2_fu_444_p2 = ($signed(sext_ln245_3_fu_441_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_3_fu_487_p2 = ($signed(sext_ln245_4_fu_484_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_4_fu_530_p2 = ($signed(sext_ln245_5_fu_527_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_5_fu_573_p2 = ($signed(sext_ln245_6_fu_570_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_6_fu_616_p2 = ($signed(sext_ln245_7_fu_613_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_7_fu_659_p2 = ($signed(sext_ln245_8_fu_656_p1) - $signed(sext_ln245_1_fu_355_p1));

assign sub_ln245_fu_358_p2 = ($signed(sext_ln245_fu_352_p1) - $signed(sext_ln245_1_fu_355_p1));

assign tmp_10_fu_407_p3 = sub_ln245_1_fu_401_p2[32'd16];

assign tmp_11_fu_415_p3 = sub_ln245_1_fu_401_p2[32'd15];

assign tmp_12_fu_450_p3 = sub_ln245_2_fu_444_p2[32'd16];

assign tmp_13_fu_458_p3 = sub_ln245_2_fu_444_p2[32'd15];

assign tmp_14_fu_493_p3 = sub_ln245_3_fu_487_p2[32'd16];

assign tmp_15_fu_501_p3 = sub_ln245_3_fu_487_p2[32'd15];

assign tmp_16_fu_536_p3 = sub_ln245_4_fu_530_p2[32'd16];

assign tmp_17_fu_544_p3 = sub_ln245_4_fu_530_p2[32'd15];

assign tmp_18_fu_579_p3 = sub_ln245_5_fu_573_p2[32'd16];

assign tmp_19_fu_587_p3 = sub_ln245_5_fu_573_p2[32'd15];

assign tmp_1_fu_759_p4 = {{sub_ln245_2_fu_444_p2[15:6]}};

assign tmp_20_fu_622_p3 = sub_ln245_6_fu_616_p2[32'd16];

assign tmp_21_fu_630_p3 = sub_ln245_6_fu_616_p2[32'd15];

assign tmp_22_fu_665_p3 = sub_ln245_7_fu_659_p2[32'd16];

assign tmp_23_fu_673_p3 = sub_ln245_7_fu_659_p2[32'd15];

assign tmp_24_fu_951_p3 = add_ln50_2_fu_945_p2[32'd17];

assign tmp_25_fu_979_p3 = add_ln50_3_fu_973_p2[32'd17];

assign tmp_26_fu_1067_p3 = add_ln50_4_fu_1061_p2[32'd18];

assign tmp_27_fu_1075_p3 = add_ln50_8_fu_1057_p2[32'd17];

assign tmp_28_fu_1007_p3 = add_ln50_5_fu_1001_p2[32'd17];

assign tmp_29_fu_1035_p3 = add_ln50_6_fu_1029_p2[32'd17];

assign tmp_2_fu_785_p4 = {{sub_ln245_3_fu_487_p2[15:6]}};

assign tmp_30_fu_1165_p3 = add_ln50_7_fu_1159_p2[32'd18];

assign tmp_31_fu_1173_p3 = add_ln50_9_fu_1155_p2[32'd17];

assign tmp_32_fu_1263_p3 = add_ln50_fu_1257_p2[32'd18];

assign tmp_33_fu_1271_p3 = add_ln50_1_fu_1253_p2[32'd17];

assign tmp_3_fu_811_p4 = {{sub_ln245_4_fu_530_p2[15:6]}};

assign tmp_4_fu_837_p4 = {{sub_ln245_5_fu_573_p2[15:6]}};

assign tmp_5_fu_863_p4 = {{sub_ln245_6_fu_616_p2[15:6]}};

assign tmp_6_fu_889_p4 = {{sub_ln245_7_fu_659_p2[15:6]}};

assign tmp_7_fu_1305_p4 = {{add_ln50_1_fu_1253_p2[17:8]}};

assign tmp_8_fu_364_p3 = sub_ln245_fu_358_p2[32'd16];

assign tmp_9_fu_372_p3 = sub_ln245_fu_358_p2[32'd15];

assign tmp_fu_707_p4 = {{sub_ln245_fu_358_p2[15:6]}};

assign tmp_s_fu_733_p4 = {{sub_ln245_1_fu_401_p2[15:6]}};

assign x_max_fu_346_p3 = ((xor_ln65_6_fu_340_p2[0:0] == 1'b1) ? select_ln65_2_reg_1417 : select_ln65_5_reg_1423);

assign xor_ln245_10_fu_595_p2 = (tmp_18_fu_579_p3 ^ 1'd1);

assign xor_ln245_11_fu_607_p2 = (tmp_19_fu_587_p3 ^ tmp_18_fu_579_p3);

assign xor_ln245_12_fu_638_p2 = (tmp_20_fu_622_p3 ^ 1'd1);

assign xor_ln245_13_fu_650_p2 = (tmp_21_fu_630_p3 ^ tmp_20_fu_622_p3);

assign xor_ln245_14_fu_681_p2 = (tmp_22_fu_665_p3 ^ 1'd1);

assign xor_ln245_15_fu_693_p2 = (tmp_23_fu_673_p3 ^ tmp_22_fu_665_p3);

assign xor_ln245_1_fu_392_p2 = (tmp_9_fu_372_p3 ^ tmp_8_fu_364_p3);

assign xor_ln245_2_fu_423_p2 = (tmp_10_fu_407_p3 ^ 1'd1);

assign xor_ln245_3_fu_435_p2 = (tmp_11_fu_415_p3 ^ tmp_10_fu_407_p3);

assign xor_ln245_4_fu_466_p2 = (tmp_12_fu_450_p3 ^ 1'd1);

assign xor_ln245_5_fu_478_p2 = (tmp_13_fu_458_p3 ^ tmp_12_fu_450_p3);

assign xor_ln245_6_fu_509_p2 = (tmp_14_fu_493_p3 ^ 1'd1);

assign xor_ln245_7_fu_521_p2 = (tmp_15_fu_501_p3 ^ tmp_14_fu_493_p3);

assign xor_ln245_8_fu_552_p2 = (tmp_16_fu_536_p3 ^ 1'd1);

assign xor_ln245_9_fu_564_p2 = (tmp_17_fu_544_p3 ^ tmp_16_fu_536_p3);

assign xor_ln245_fu_380_p2 = (tmp_8_fu_364_p3 ^ 1'd1);

assign xor_ln50_1_fu_1291_p2 = (tmp_33_fu_1271_p3 ^ tmp_32_fu_1263_p3);

assign xor_ln50_2_fu_1083_p2 = (tmp_26_fu_1067_p3 ^ 1'd1);

assign xor_ln50_3_fu_1095_p2 = (tmp_27_fu_1075_p3 ^ 1'd1);

assign xor_ln50_4_fu_1107_p2 = (tmp_27_fu_1075_p3 ^ tmp_26_fu_1067_p3);

assign xor_ln50_5_fu_1113_p2 = (xor_ln50_4_fu_1107_p2 ^ 1'd1);

assign xor_ln50_6_fu_1181_p2 = (tmp_30_fu_1165_p3 ^ 1'd1);

assign xor_ln50_7_fu_1193_p2 = (tmp_31_fu_1173_p3 ^ 1'd1);

assign xor_ln50_8_fu_1205_p2 = (tmp_31_fu_1173_p3 ^ tmp_30_fu_1165_p3);

assign xor_ln50_9_fu_1211_p2 = (xor_ln50_8_fu_1205_p2 ^ 1'd1);

assign xor_ln50_fu_1279_p2 = (tmp_32_fu_1263_p3 ^ 1'd1);

assign xor_ln65_1_fu_263_p2 = (icmp_ln65_1_reg_1402 ^ 1'd1);

assign xor_ln65_2_fu_280_p2 = (icmp_ln65_2_fu_274_p2 ^ 1'd1);

assign xor_ln65_3_fu_294_p2 = (icmp_ln65_3_reg_1407 ^ 1'd1);

assign xor_ln65_4_fu_305_p2 = (icmp_ln65_4_reg_1412 ^ 1'd1);

assign xor_ln65_5_fu_322_p2 = (icmp_ln65_5_fu_316_p2 ^ 1'd1);

assign xor_ln65_6_fu_340_p2 = (icmp_ln65_6_fu_336_p2 ^ 1'd1);

assign xor_ln65_fu_252_p2 = (icmp_ln65_reg_1397 ^ 1'd1);

assign zext_ln255_1_fu_911_p1 = select_ln245_3_reg_1439;

assign zext_ln255_2_fu_915_p1 = select_ln245_5_reg_1444;

assign zext_ln255_3_fu_919_p1 = select_ln245_7_reg_1449;

assign zext_ln255_4_fu_923_p1 = select_ln245_9_reg_1454;

assign zext_ln255_5_fu_927_p1 = select_ln245_11_reg_1459;

assign zext_ln255_6_fu_931_p1 = select_ln245_13_reg_1464;

assign zext_ln255_7_fu_935_p1 = select_ln245_15_reg_1469;

assign zext_ln255_fu_907_p1 = select_ln245_1_reg_1434;

assign zext_ln265_fu_1323_p1 = select_ln50_1_reg_1591;

assign zext_ln43_1_fu_967_p1 = exp_res_2_reg_1524;

assign zext_ln43_2_fu_995_p1 = exp_res_4_reg_1534;

assign zext_ln43_3_fu_1023_p1 = exp_res_6_reg_1544;

assign zext_ln43_fu_939_p1 = exp_res_reg_1514;

assign zext_ln50_1_fu_970_p1 = exp_res_3_reg_1529;

assign zext_ln50_2_fu_998_p1 = exp_res_5_reg_1539;

assign zext_ln50_3_fu_1026_p1 = exp_res_7_reg_1549;

assign zext_ln50_fu_942_p1 = exp_res_1_reg_1519;

endmodule //JetTagger_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s
