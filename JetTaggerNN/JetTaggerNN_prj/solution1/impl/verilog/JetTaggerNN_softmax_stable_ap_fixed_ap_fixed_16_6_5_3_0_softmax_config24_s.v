// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module JetTaggerNN_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        layer24_out_0,
        layer24_out_0_ap_vld,
        layer24_out_1,
        layer24_out_1_ap_vld,
        layer24_out_2,
        layer24_out_2_ap_vld,
        layer24_out_3,
        layer24_out_3_ap_vld,
        layer24_out_4,
        layer24_out_4_ap_vld,
        layer24_out_5,
        layer24_out_5_ap_vld,
        layer24_out_6,
        layer24_out_6_ap_vld,
        layer24_out_7,
        layer24_out_7_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
output  [15:0] layer24_out_0;
output   layer24_out_0_ap_vld;
output  [15:0] layer24_out_1;
output   layer24_out_1_ap_vld;
output  [15:0] layer24_out_2;
output   layer24_out_2_ap_vld;
output  [15:0] layer24_out_3;
output   layer24_out_3_ap_vld;
output  [15:0] layer24_out_4;
output   layer24_out_4_ap_vld;
output  [15:0] layer24_out_5;
output   layer24_out_5_ap_vld;
output  [15:0] layer24_out_6;
output   layer24_out_6_ap_vld;
output  [15:0] layer24_out_7;
output   layer24_out_7_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] layer24_out_0;
reg layer24_out_0_ap_vld;
reg[15:0] layer24_out_1;
reg layer24_out_1_ap_vld;
reg[15:0] layer24_out_2;
reg layer24_out_2_ap_vld;
reg[15:0] layer24_out_3;
reg layer24_out_3_ap_vld;
reg[15:0] layer24_out_4;
reg layer24_out_4_ap_vld;
reg[15:0] layer24_out_5;
reg layer24_out_5_ap_vld;
reg[15:0] layer24_out_6;
reg layer24_out_6_ap_vld;
reg[15:0] layer24_out_7;
reg layer24_out_7_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [16:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [16:0] exp_table_q4;
wire   [9:0] exp_table_address5;
reg    exp_table_ce5;
wire   [16:0] exp_table_q5;
wire   [9:0] exp_table_address6;
reg    exp_table_ce6;
wire   [16:0] exp_table_q6;
wire   [9:0] exp_table_address7;
reg    exp_table_ce7;
wire   [16:0] exp_table_q7;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] p_read_1_reg_1585;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] p_read_1_reg_1585_pp0_iter1_reg;
reg  signed [15:0] p_read_2_reg_1591;
reg  signed [15:0] p_read_2_reg_1591_pp0_iter1_reg;
reg  signed [15:0] p_read_3_reg_1597;
reg  signed [15:0] p_read_3_reg_1597_pp0_iter1_reg;
reg  signed [15:0] p_read_4_reg_1603;
reg  signed [15:0] p_read_4_reg_1603_pp0_iter1_reg;
reg  signed [15:0] p_read_5_reg_1609;
reg  signed [15:0] p_read_5_reg_1609_pp0_iter1_reg;
reg  signed [15:0] p_read_6_reg_1615;
reg  signed [15:0] p_read_6_reg_1615_pp0_iter1_reg;
reg  signed [15:0] p_read_7_reg_1621;
reg  signed [15:0] p_read_7_reg_1621_pp0_iter1_reg;
reg  signed [15:0] p_read_8_reg_1627;
reg  signed [15:0] p_read_8_reg_1627_pp0_iter1_reg;
wire   [0:0] icmp_ln65_fu_302_p2;
reg   [0:0] icmp_ln65_reg_1633;
wire   [0:0] icmp_ln65_1_fu_308_p2;
reg   [0:0] icmp_ln65_1_reg_1638;
wire   [0:0] icmp_ln65_3_fu_314_p2;
reg   [0:0] icmp_ln65_3_reg_1643;
wire   [0:0] icmp_ln65_4_fu_320_p2;
reg   [0:0] icmp_ln65_4_reg_1648;
wire   [15:0] x_max_fu_422_p3;
reg   [15:0] x_max_reg_1653;
reg   [16:0] exp_res_reg_1698;
reg   [16:0] exp_res_reg_1698_pp0_iter4_reg;
reg   [16:0] exp_res_reg_1698_pp0_iter5_reg;
reg   [16:0] exp_res_reg_1698_pp0_iter6_reg;
reg   [16:0] exp_res_1_reg_1703;
reg   [16:0] exp_res_1_reg_1703_pp0_iter4_reg;
reg   [16:0] exp_res_1_reg_1703_pp0_iter5_reg;
reg   [16:0] exp_res_1_reg_1703_pp0_iter6_reg;
reg   [16:0] exp_res_2_reg_1708;
reg   [16:0] exp_res_2_reg_1708_pp0_iter4_reg;
reg   [16:0] exp_res_2_reg_1708_pp0_iter5_reg;
reg   [16:0] exp_res_2_reg_1708_pp0_iter6_reg;
reg   [16:0] exp_res_3_reg_1713;
reg   [16:0] exp_res_3_reg_1713_pp0_iter4_reg;
reg   [16:0] exp_res_3_reg_1713_pp0_iter5_reg;
reg   [16:0] exp_res_3_reg_1713_pp0_iter6_reg;
reg   [16:0] exp_res_4_reg_1718;
reg   [16:0] exp_res_4_reg_1718_pp0_iter4_reg;
reg   [16:0] exp_res_4_reg_1718_pp0_iter5_reg;
reg   [16:0] exp_res_4_reg_1718_pp0_iter6_reg;
reg   [16:0] exp_res_5_reg_1723;
reg   [16:0] exp_res_5_reg_1723_pp0_iter4_reg;
reg   [16:0] exp_res_5_reg_1723_pp0_iter5_reg;
reg   [16:0] exp_res_5_reg_1723_pp0_iter6_reg;
reg   [16:0] exp_res_6_reg_1728;
reg   [16:0] exp_res_6_reg_1728_pp0_iter4_reg;
reg   [16:0] exp_res_6_reg_1728_pp0_iter5_reg;
reg   [16:0] exp_res_6_reg_1728_pp0_iter6_reg;
reg   [16:0] exp_res_7_reg_1733;
reg   [16:0] exp_res_7_reg_1733_pp0_iter4_reg;
reg   [16:0] exp_res_7_reg_1733_pp0_iter5_reg;
reg   [16:0] exp_res_7_reg_1733_pp0_iter6_reg;
wire  signed [17:0] select_ln50_2_fu_1047_p3;
reg  signed [17:0] select_ln50_2_reg_1738;
wire  signed [17:0] select_ln50_3_fu_1077_p3;
reg  signed [17:0] select_ln50_3_reg_1744;
wire  signed [17:0] select_ln50_7_fu_1107_p3;
reg  signed [17:0] select_ln50_7_reg_1750;
wire  signed [17:0] select_ln50_8_fu_1137_p3;
reg  signed [17:0] select_ln50_8_reg_1756;
wire  signed [17:0] select_ln50_6_fu_1235_p3;
reg  signed [17:0] select_ln50_6_reg_1762;
wire  signed [17:0] select_ln50_11_fu_1333_p3;
reg  signed [17:0] select_ln50_11_reg_1768;
reg   [17:0] inv_exp_sum_reg_1779;
wire   [63:0] zext_ln255_fu_803_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_834_p1;
wire   [63:0] zext_ln255_2_fu_865_p1;
wire   [63:0] zext_ln255_3_fu_896_p1;
wire   [63:0] zext_ln255_4_fu_927_p1;
wire   [63:0] zext_ln255_5_fu_958_p1;
wire   [63:0] zext_ln255_6_fu_989_p1;
wire   [63:0] zext_ln255_7_fu_1020_p1;
wire   [63:0] zext_ln265_fu_1417_p1;
reg   [15:0] layer24_out_0_preg;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] layer24_out_1_preg;
reg   [15:0] layer24_out_2_preg;
reg   [15:0] layer24_out_3_preg;
reg   [15:0] layer24_out_4_preg;
reg   [15:0] layer24_out_5_preg;
reg   [15:0] layer24_out_6_preg;
reg   [15:0] layer24_out_7_preg;
wire  signed [15:0] icmp_ln65_fu_302_p0;
wire  signed [15:0] icmp_ln65_fu_302_p1;
wire  signed [15:0] icmp_ln65_1_fu_308_p0;
wire  signed [15:0] icmp_ln65_1_fu_308_p1;
wire  signed [15:0] icmp_ln65_3_fu_314_p0;
wire  signed [15:0] icmp_ln65_3_fu_314_p1;
wire  signed [15:0] icmp_ln65_4_fu_320_p0;
wire  signed [15:0] icmp_ln65_4_fu_320_p1;
wire   [0:0] xor_ln65_fu_326_p2;
wire   [0:0] xor_ln65_1_fu_337_p2;
wire   [15:0] select_ln65_fu_331_p3;
wire   [15:0] select_ln65_1_fu_342_p3;
wire   [0:0] icmp_ln65_2_fu_348_p2;
wire   [0:0] xor_ln65_2_fu_354_p2;
wire   [0:0] xor_ln65_3_fu_368_p2;
wire   [0:0] xor_ln65_4_fu_379_p2;
wire   [15:0] select_ln65_3_fu_373_p3;
wire   [15:0] select_ln65_4_fu_384_p3;
wire   [0:0] icmp_ln65_5_fu_390_p2;
wire   [0:0] xor_ln65_5_fu_396_p2;
wire   [15:0] select_ln65_2_fu_360_p3;
wire   [15:0] select_ln65_5_fu_402_p3;
wire   [0:0] icmp_ln65_6_fu_410_p2;
wire   [0:0] xor_ln65_6_fu_416_p2;
wire  signed [16:0] sext_ln245_fu_430_p1;
wire  signed [16:0] sext_ln245_1_fu_433_p1;
wire   [16:0] sub_ln245_fu_436_p2;
wire   [0:0] tmp_9_fu_442_p3;
wire   [0:0] tmp_10_fu_450_p3;
wire   [0:0] xor_ln245_fu_458_p2;
wire  signed [16:0] sext_ln245_2_fu_476_p1;
wire   [16:0] sub_ln245_1_fu_479_p2;
wire   [0:0] tmp_11_fu_485_p3;
wire   [0:0] tmp_12_fu_493_p3;
wire   [0:0] xor_ln245_2_fu_501_p2;
wire  signed [16:0] sext_ln245_3_fu_519_p1;
wire   [16:0] sub_ln245_2_fu_522_p2;
wire   [0:0] tmp_13_fu_528_p3;
wire   [0:0] tmp_14_fu_536_p3;
wire   [0:0] xor_ln245_4_fu_544_p2;
wire  signed [16:0] sext_ln245_4_fu_562_p1;
wire   [16:0] sub_ln245_3_fu_565_p2;
wire   [0:0] tmp_15_fu_571_p3;
wire   [0:0] tmp_16_fu_579_p3;
wire   [0:0] xor_ln245_6_fu_587_p2;
wire  signed [16:0] sext_ln245_5_fu_605_p1;
wire   [16:0] sub_ln245_4_fu_608_p2;
wire   [0:0] tmp_17_fu_614_p3;
wire   [0:0] tmp_18_fu_622_p3;
wire   [0:0] xor_ln245_8_fu_630_p2;
wire  signed [16:0] sext_ln245_6_fu_648_p1;
wire   [16:0] sub_ln245_5_fu_651_p2;
wire   [0:0] tmp_19_fu_657_p3;
wire   [0:0] tmp_20_fu_665_p3;
wire   [0:0] xor_ln245_10_fu_673_p2;
wire  signed [16:0] sext_ln245_7_fu_691_p1;
wire   [16:0] sub_ln245_6_fu_694_p2;
wire   [0:0] tmp_21_fu_700_p3;
wire   [0:0] tmp_22_fu_708_p3;
wire   [0:0] xor_ln245_12_fu_716_p2;
wire  signed [16:0] sext_ln245_8_fu_734_p1;
wire   [16:0] sub_ln245_7_fu_737_p2;
wire   [0:0] tmp_23_fu_743_p3;
wire   [0:0] tmp_24_fu_751_p3;
wire   [0:0] xor_ln245_14_fu_759_p2;
wire   [0:0] and_ln245_fu_464_p2;
wire   [0:0] xor_ln245_1_fu_470_p2;
wire   [9:0] select_ln245_fu_777_p3;
wire   [9:0] tmp_fu_785_p4;
wire   [9:0] select_ln245_1_fu_795_p3;
wire   [0:0] and_ln245_1_fu_507_p2;
wire   [0:0] xor_ln245_3_fu_513_p2;
wire   [9:0] select_ln245_2_fu_808_p3;
wire   [9:0] tmp_1_fu_816_p4;
wire   [9:0] select_ln245_3_fu_826_p3;
wire   [0:0] and_ln245_2_fu_550_p2;
wire   [0:0] xor_ln245_5_fu_556_p2;
wire   [9:0] select_ln245_4_fu_839_p3;
wire   [9:0] tmp_2_fu_847_p4;
wire   [9:0] select_ln245_5_fu_857_p3;
wire   [0:0] and_ln245_3_fu_593_p2;
wire   [0:0] xor_ln245_7_fu_599_p2;
wire   [9:0] select_ln245_6_fu_870_p3;
wire   [9:0] tmp_3_fu_878_p4;
wire   [9:0] select_ln245_7_fu_888_p3;
wire   [0:0] and_ln245_4_fu_636_p2;
wire   [0:0] xor_ln245_9_fu_642_p2;
wire   [9:0] select_ln245_8_fu_901_p3;
wire   [9:0] tmp_4_fu_909_p4;
wire   [9:0] select_ln245_9_fu_919_p3;
wire   [0:0] and_ln245_5_fu_679_p2;
wire   [0:0] xor_ln245_11_fu_685_p2;
wire   [9:0] select_ln245_10_fu_932_p3;
wire   [9:0] tmp_5_fu_940_p4;
wire   [9:0] select_ln245_11_fu_950_p3;
wire   [0:0] and_ln245_6_fu_722_p2;
wire   [0:0] xor_ln245_13_fu_728_p2;
wire   [9:0] select_ln245_12_fu_963_p3;
wire   [9:0] tmp_6_fu_971_p4;
wire   [9:0] select_ln245_13_fu_981_p3;
wire   [0:0] and_ln245_7_fu_765_p2;
wire   [0:0] xor_ln245_15_fu_771_p2;
wire   [9:0] select_ln245_14_fu_994_p3;
wire   [9:0] tmp_7_fu_1002_p4;
wire   [9:0] select_ln245_15_fu_1012_p3;
wire   [17:0] zext_ln50_1_fu_1029_p1;
wire   [17:0] zext_ln50_fu_1025_p1;
wire   [17:0] add_ln50_2_fu_1033_p2;
wire   [0:0] tmp_25_fu_1039_p3;
wire   [17:0] zext_ln50_3_fu_1059_p1;
wire   [17:0] zext_ln50_2_fu_1055_p1;
wire   [17:0] add_ln50_3_fu_1063_p2;
wire   [0:0] tmp_26_fu_1069_p3;
wire   [17:0] zext_ln50_5_fu_1089_p1;
wire   [17:0] zext_ln50_4_fu_1085_p1;
wire   [17:0] add_ln50_5_fu_1093_p2;
wire   [0:0] tmp_29_fu_1099_p3;
wire   [17:0] zext_ln50_7_fu_1119_p1;
wire   [17:0] zext_ln50_6_fu_1115_p1;
wire   [17:0] add_ln50_6_fu_1123_p2;
wire   [0:0] tmp_30_fu_1129_p3;
wire  signed [18:0] sext_ln50_3_fu_1148_p1;
wire  signed [18:0] sext_ln50_2_fu_1145_p1;
wire   [18:0] add_ln50_4_fu_1155_p2;
wire   [17:0] add_ln50_8_fu_1151_p2;
wire   [0:0] tmp_27_fu_1161_p3;
wire   [0:0] tmp_28_fu_1169_p3;
wire   [0:0] xor_ln50_2_fu_1177_p2;
wire   [0:0] xor_ln50_3_fu_1189_p2;
wire   [0:0] xor_ln50_4_fu_1201_p2;
wire   [0:0] and_ln50_1_fu_1183_p2;
wire   [0:0] xor_ln50_5_fu_1207_p2;
wire   [0:0] and_ln50_2_fu_1195_p2;
wire   [0:0] or_ln50_fu_1213_p2;
wire   [17:0] select_ln50_4_fu_1219_p3;
wire   [17:0] select_ln50_5_fu_1227_p3;
wire  signed [18:0] sext_ln50_5_fu_1246_p1;
wire  signed [18:0] sext_ln50_4_fu_1243_p1;
wire   [18:0] add_ln50_7_fu_1253_p2;
wire   [17:0] add_ln50_9_fu_1249_p2;
wire   [0:0] tmp_31_fu_1259_p3;
wire   [0:0] tmp_32_fu_1267_p3;
wire   [0:0] xor_ln50_6_fu_1275_p2;
wire   [0:0] xor_ln50_7_fu_1287_p2;
wire   [0:0] xor_ln50_8_fu_1299_p2;
wire   [0:0] and_ln50_3_fu_1281_p2;
wire   [0:0] xor_ln50_9_fu_1305_p2;
wire   [0:0] and_ln50_4_fu_1293_p2;
wire   [0:0] or_ln50_1_fu_1311_p2;
wire   [17:0] select_ln50_9_fu_1317_p3;
wire   [17:0] select_ln50_10_fu_1325_p3;
wire  signed [18:0] sext_ln50_fu_1341_p1;
wire  signed [18:0] sext_ln50_1_fu_1344_p1;
wire   [18:0] add_ln50_fu_1351_p2;
wire   [17:0] add_ln50_1_fu_1347_p2;
wire   [0:0] tmp_33_fu_1357_p3;
wire   [0:0] tmp_34_fu_1365_p3;
wire   [0:0] xor_ln50_fu_1373_p2;
wire   [0:0] and_ln50_fu_1379_p2;
wire   [0:0] xor_ln50_1_fu_1385_p2;
wire   [9:0] select_ln50_fu_1391_p3;
wire   [9:0] tmp_8_fu_1399_p4;
wire   [9:0] select_ln50_1_fu_1409_p3;
wire  signed [17:0] mul_ln268_fu_1428_p0;
wire  signed [25:0] sext_ln268_fu_1422_p1;
wire   [16:0] mul_ln268_fu_1428_p1;
wire   [25:0] mul_ln268_fu_1428_p2;
wire  signed [17:0] mul_ln268_1_fu_1448_p0;
wire   [16:0] mul_ln268_1_fu_1448_p1;
wire   [25:0] mul_ln268_1_fu_1448_p2;
wire  signed [17:0] mul_ln268_2_fu_1468_p0;
wire   [16:0] mul_ln268_2_fu_1468_p1;
wire   [25:0] mul_ln268_2_fu_1468_p2;
wire  signed [17:0] mul_ln268_3_fu_1488_p0;
wire   [16:0] mul_ln268_3_fu_1488_p1;
wire   [25:0] mul_ln268_3_fu_1488_p2;
wire  signed [17:0] mul_ln268_4_fu_1508_p0;
wire   [16:0] mul_ln268_4_fu_1508_p1;
wire   [25:0] mul_ln268_4_fu_1508_p2;
wire  signed [17:0] mul_ln268_5_fu_1528_p0;
wire   [16:0] mul_ln268_5_fu_1528_p1;
wire   [25:0] mul_ln268_5_fu_1528_p2;
wire  signed [17:0] mul_ln268_6_fu_1548_p0;
wire   [16:0] mul_ln268_6_fu_1548_p1;
wire   [25:0] mul_ln268_6_fu_1548_p2;
wire  signed [17:0] mul_ln268_7_fu_1568_p0;
wire   [16:0] mul_ln268_7_fu_1568_p1;
wire   [25:0] mul_ln268_7_fu_1568_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln268_1_fu_1448_p10;
wire   [25:0] mul_ln268_2_fu_1468_p10;
wire   [25:0] mul_ln268_3_fu_1488_p10;
wire   [25:0] mul_ln268_4_fu_1508_p10;
wire   [25:0] mul_ln268_5_fu_1528_p10;
wire   [25:0] mul_ln268_6_fu_1548_p10;
wire   [25:0] mul_ln268_7_fu_1568_p10;
wire   [25:0] mul_ln268_fu_1428_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 layer24_out_0_preg = 16'd0;
#0 layer24_out_1_preg = 16'd0;
#0 layer24_out_2_preg = 16'd0;
#0 layer24_out_3_preg = 16'd0;
#0 layer24_out_4_preg = 16'd0;
#0 layer24_out_5_preg = 16'd0;
#0 layer24_out_6_preg = 16'd0;
#0 layer24_out_7_preg = 16'd0;
end

JetTaggerNN_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_exp_table_ROM_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4),
    .address5(exp_table_address5),
    .ce5(exp_table_ce5),
    .q5(exp_table_q5),
    .address6(exp_table_address6),
    .ce6(exp_table_ce6),
    .q6(exp_table_q6),
    .address7(exp_table_address7),
    .ce7(exp_table_ce7),
    .q7(exp_table_q7)
);

JetTaggerNN_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s_invert_table_Rcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5823(
    .din0(mul_ln268_fu_1428_p0),
    .din1(mul_ln268_fu_1428_p1),
    .dout(mul_ln268_fu_1428_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5824(
    .din0(mul_ln268_1_fu_1448_p0),
    .din1(mul_ln268_1_fu_1448_p1),
    .dout(mul_ln268_1_fu_1448_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5825(
    .din0(mul_ln268_2_fu_1468_p0),
    .din1(mul_ln268_2_fu_1468_p1),
    .dout(mul_ln268_2_fu_1468_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5826(
    .din0(mul_ln268_3_fu_1488_p0),
    .din1(mul_ln268_3_fu_1488_p1),
    .dout(mul_ln268_3_fu_1488_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5827(
    .din0(mul_ln268_4_fu_1508_p0),
    .din1(mul_ln268_4_fu_1508_p1),
    .dout(mul_ln268_4_fu_1508_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5828(
    .din0(mul_ln268_5_fu_1528_p0),
    .din1(mul_ln268_5_fu_1528_p1),
    .dout(mul_ln268_5_fu_1528_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5829(
    .din0(mul_ln268_6_fu_1548_p0),
    .din1(mul_ln268_6_fu_1548_p1),
    .dout(mul_ln268_6_fu_1548_p2)
);

JetTaggerNN_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U5830(
    .din0(mul_ln268_7_fu_1568_p0),
    .din1(mul_ln268_7_fu_1568_p1),
    .dout(mul_ln268_7_fu_1568_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_0_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_0_preg <= {{mul_ln268_fu_1428_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_1_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_1_preg <= {{mul_ln268_1_fu_1448_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_2_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_2_preg <= {{mul_ln268_2_fu_1468_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_3_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_3_preg <= {{mul_ln268_3_fu_1488_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_4_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_4_preg <= {{mul_ln268_4_fu_1508_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_5_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_5_preg <= {{mul_ln268_5_fu_1528_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_6_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_6_preg <= {{mul_ln268_6_fu_1548_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer24_out_7_preg <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            layer24_out_7_preg <= {{mul_ln268_7_fu_1568_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_1_reg_1703 <= exp_table_q6;
        exp_res_2_reg_1708 <= exp_table_q5;
        exp_res_3_reg_1713 <= exp_table_q4;
        exp_res_4_reg_1718 <= exp_table_q3;
        exp_res_5_reg_1723 <= exp_table_q2;
        exp_res_6_reg_1728 <= exp_table_q1;
        exp_res_7_reg_1733 <= exp_table_q0;
        exp_res_reg_1698 <= exp_table_q7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_1_reg_1703_pp0_iter4_reg <= exp_res_1_reg_1703;
        exp_res_1_reg_1703_pp0_iter5_reg <= exp_res_1_reg_1703_pp0_iter4_reg;
        exp_res_1_reg_1703_pp0_iter6_reg <= exp_res_1_reg_1703_pp0_iter5_reg;
        exp_res_2_reg_1708_pp0_iter4_reg <= exp_res_2_reg_1708;
        exp_res_2_reg_1708_pp0_iter5_reg <= exp_res_2_reg_1708_pp0_iter4_reg;
        exp_res_2_reg_1708_pp0_iter6_reg <= exp_res_2_reg_1708_pp0_iter5_reg;
        exp_res_3_reg_1713_pp0_iter4_reg <= exp_res_3_reg_1713;
        exp_res_3_reg_1713_pp0_iter5_reg <= exp_res_3_reg_1713_pp0_iter4_reg;
        exp_res_3_reg_1713_pp0_iter6_reg <= exp_res_3_reg_1713_pp0_iter5_reg;
        exp_res_4_reg_1718_pp0_iter4_reg <= exp_res_4_reg_1718;
        exp_res_4_reg_1718_pp0_iter5_reg <= exp_res_4_reg_1718_pp0_iter4_reg;
        exp_res_4_reg_1718_pp0_iter6_reg <= exp_res_4_reg_1718_pp0_iter5_reg;
        exp_res_5_reg_1723_pp0_iter4_reg <= exp_res_5_reg_1723;
        exp_res_5_reg_1723_pp0_iter5_reg <= exp_res_5_reg_1723_pp0_iter4_reg;
        exp_res_5_reg_1723_pp0_iter6_reg <= exp_res_5_reg_1723_pp0_iter5_reg;
        exp_res_6_reg_1728_pp0_iter4_reg <= exp_res_6_reg_1728;
        exp_res_6_reg_1728_pp0_iter5_reg <= exp_res_6_reg_1728_pp0_iter4_reg;
        exp_res_6_reg_1728_pp0_iter6_reg <= exp_res_6_reg_1728_pp0_iter5_reg;
        exp_res_7_reg_1733_pp0_iter4_reg <= exp_res_7_reg_1733;
        exp_res_7_reg_1733_pp0_iter5_reg <= exp_res_7_reg_1733_pp0_iter4_reg;
        exp_res_7_reg_1733_pp0_iter6_reg <= exp_res_7_reg_1733_pp0_iter5_reg;
        exp_res_reg_1698_pp0_iter4_reg <= exp_res_reg_1698;
        exp_res_reg_1698_pp0_iter5_reg <= exp_res_reg_1698_pp0_iter4_reg;
        exp_res_reg_1698_pp0_iter6_reg <= exp_res_reg_1698_pp0_iter5_reg;
        inv_exp_sum_reg_1779 <= invert_table_q0;
        select_ln50_11_reg_1768 <= select_ln50_11_fu_1333_p3;
        select_ln50_2_reg_1738 <= select_ln50_2_fu_1047_p3;
        select_ln50_3_reg_1744 <= select_ln50_3_fu_1077_p3;
        select_ln50_6_reg_1762 <= select_ln50_6_fu_1235_p3;
        select_ln50_7_reg_1750 <= select_ln50_7_fu_1107_p3;
        select_ln50_8_reg_1756 <= select_ln50_8_fu_1137_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln65_1_reg_1638 <= icmp_ln65_1_fu_308_p2;
        icmp_ln65_3_reg_1643 <= icmp_ln65_3_fu_314_p2;
        icmp_ln65_4_reg_1648 <= icmp_ln65_4_fu_320_p2;
        icmp_ln65_reg_1633 <= icmp_ln65_fu_302_p2;
        p_read_1_reg_1585 <= p_read7;
        p_read_1_reg_1585_pp0_iter1_reg <= p_read_1_reg_1585;
        p_read_2_reg_1591 <= p_read6;
        p_read_2_reg_1591_pp0_iter1_reg <= p_read_2_reg_1591;
        p_read_3_reg_1597 <= p_read5;
        p_read_3_reg_1597_pp0_iter1_reg <= p_read_3_reg_1597;
        p_read_4_reg_1603 <= p_read4;
        p_read_4_reg_1603_pp0_iter1_reg <= p_read_4_reg_1603;
        p_read_5_reg_1609 <= p_read3;
        p_read_5_reg_1609_pp0_iter1_reg <= p_read_5_reg_1609;
        p_read_6_reg_1615 <= p_read2;
        p_read_6_reg_1615_pp0_iter1_reg <= p_read_6_reg_1615;
        p_read_7_reg_1621 <= p_read1;
        p_read_7_reg_1621_pp0_iter1_reg <= p_read_7_reg_1621;
        p_read_8_reg_1627 <= p_read;
        p_read_8_reg_1627_pp0_iter1_reg <= p_read_8_reg_1627;
        x_max_reg_1653 <= x_max_fu_422_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce5 = 1'b1;
    end else begin
        exp_table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce6 = 1'b1;
    end else begin
        exp_table_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce7 = 1'b1;
    end else begin
        exp_table_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_0 = {{mul_ln268_fu_1428_p2[25:10]}};
    end else begin
        layer24_out_0 = layer24_out_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_0_ap_vld = 1'b1;
    end else begin
        layer24_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_1 = {{mul_ln268_1_fu_1448_p2[25:10]}};
    end else begin
        layer24_out_1 = layer24_out_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_1_ap_vld = 1'b1;
    end else begin
        layer24_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_2 = {{mul_ln268_2_fu_1468_p2[25:10]}};
    end else begin
        layer24_out_2 = layer24_out_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_2_ap_vld = 1'b1;
    end else begin
        layer24_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_3 = {{mul_ln268_3_fu_1488_p2[25:10]}};
    end else begin
        layer24_out_3 = layer24_out_3_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_3_ap_vld = 1'b1;
    end else begin
        layer24_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_4 = {{mul_ln268_4_fu_1508_p2[25:10]}};
    end else begin
        layer24_out_4 = layer24_out_4_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_4_ap_vld = 1'b1;
    end else begin
        layer24_out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_5 = {{mul_ln268_5_fu_1528_p2[25:10]}};
    end else begin
        layer24_out_5 = layer24_out_5_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_5_ap_vld = 1'b1;
    end else begin
        layer24_out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_6 = {{mul_ln268_6_fu_1548_p2[25:10]}};
    end else begin
        layer24_out_6 = layer24_out_6_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_6_ap_vld = 1'b1;
    end else begin
        layer24_out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_7 = {{mul_ln268_7_fu_1568_p2[25:10]}};
    end else begin
        layer24_out_7 = layer24_out_7_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        layer24_out_7_ap_vld = 1'b1;
    end else begin
        layer24_out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_1347_p2 = ($signed(select_ln50_6_reg_1762) + $signed(select_ln50_11_reg_1768));

assign add_ln50_2_fu_1033_p2 = (zext_ln50_1_fu_1029_p1 + zext_ln50_fu_1025_p1);

assign add_ln50_3_fu_1063_p2 = (zext_ln50_3_fu_1059_p1 + zext_ln50_2_fu_1055_p1);

assign add_ln50_4_fu_1155_p2 = ($signed(sext_ln50_3_fu_1148_p1) + $signed(sext_ln50_2_fu_1145_p1));

assign add_ln50_5_fu_1093_p2 = (zext_ln50_5_fu_1089_p1 + zext_ln50_4_fu_1085_p1);

assign add_ln50_6_fu_1123_p2 = (zext_ln50_7_fu_1119_p1 + zext_ln50_6_fu_1115_p1);

assign add_ln50_7_fu_1253_p2 = ($signed(sext_ln50_5_fu_1246_p1) + $signed(sext_ln50_4_fu_1243_p1));

assign add_ln50_8_fu_1151_p2 = ($signed(select_ln50_3_reg_1744) + $signed(select_ln50_2_reg_1738));

assign add_ln50_9_fu_1249_p2 = ($signed(select_ln50_8_reg_1756) + $signed(select_ln50_7_reg_1750));

assign add_ln50_fu_1351_p2 = ($signed(sext_ln50_fu_1341_p1) + $signed(sext_ln50_1_fu_1344_p1));

assign and_ln245_1_fu_507_p2 = (xor_ln245_2_fu_501_p2 & tmp_12_fu_493_p3);

assign and_ln245_2_fu_550_p2 = (xor_ln245_4_fu_544_p2 & tmp_14_fu_536_p3);

assign and_ln245_3_fu_593_p2 = (xor_ln245_6_fu_587_p2 & tmp_16_fu_579_p3);

assign and_ln245_4_fu_636_p2 = (xor_ln245_8_fu_630_p2 & tmp_18_fu_622_p3);

assign and_ln245_5_fu_679_p2 = (xor_ln245_10_fu_673_p2 & tmp_20_fu_665_p3);

assign and_ln245_6_fu_722_p2 = (xor_ln245_12_fu_716_p2 & tmp_22_fu_708_p3);

assign and_ln245_7_fu_765_p2 = (xor_ln245_14_fu_759_p2 & tmp_24_fu_751_p3);

assign and_ln245_fu_464_p2 = (xor_ln245_fu_458_p2 & tmp_10_fu_450_p3);

assign and_ln50_1_fu_1183_p2 = (xor_ln50_2_fu_1177_p2 & tmp_28_fu_1169_p3);

assign and_ln50_2_fu_1195_p2 = (xor_ln50_3_fu_1189_p2 & tmp_27_fu_1161_p3);

assign and_ln50_3_fu_1281_p2 = (xor_ln50_6_fu_1275_p2 & tmp_32_fu_1267_p3);

assign and_ln50_4_fu_1293_p2 = (xor_ln50_7_fu_1287_p2 & tmp_31_fu_1259_p3);

assign and_ln50_fu_1379_p2 = (xor_ln50_fu_1373_p2 & tmp_34_fu_1365_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table_address0 = zext_ln255_7_fu_1020_p1;

assign exp_table_address1 = zext_ln255_6_fu_989_p1;

assign exp_table_address2 = zext_ln255_5_fu_958_p1;

assign exp_table_address3 = zext_ln255_4_fu_927_p1;

assign exp_table_address4 = zext_ln255_3_fu_896_p1;

assign exp_table_address5 = zext_ln255_2_fu_865_p1;

assign exp_table_address6 = zext_ln255_1_fu_834_p1;

assign exp_table_address7 = zext_ln255_fu_803_p1;

assign icmp_ln65_1_fu_308_p0 = p_read2;

assign icmp_ln65_1_fu_308_p1 = p_read3;

assign icmp_ln65_1_fu_308_p2 = (($signed(icmp_ln65_1_fu_308_p0) < $signed(icmp_ln65_1_fu_308_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_348_p2 = (($signed(select_ln65_fu_331_p3) < $signed(select_ln65_1_fu_342_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_314_p0 = p_read4;

assign icmp_ln65_3_fu_314_p1 = p_read5;

assign icmp_ln65_3_fu_314_p2 = (($signed(icmp_ln65_3_fu_314_p0) < $signed(icmp_ln65_3_fu_314_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_320_p0 = p_read6;

assign icmp_ln65_4_fu_320_p1 = p_read7;

assign icmp_ln65_4_fu_320_p2 = (($signed(icmp_ln65_4_fu_320_p0) < $signed(icmp_ln65_4_fu_320_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_390_p2 = (($signed(select_ln65_3_fu_373_p3) < $signed(select_ln65_4_fu_384_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_410_p2 = (($signed(select_ln65_2_fu_360_p3) < $signed(select_ln65_5_fu_402_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_302_p0 = p_read;

assign icmp_ln65_fu_302_p1 = p_read1;

assign icmp_ln65_fu_302_p2 = (($signed(icmp_ln65_fu_302_p0) < $signed(icmp_ln65_fu_302_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_1417_p1;

assign mul_ln268_1_fu_1448_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_1_fu_1448_p1 = mul_ln268_1_fu_1448_p10;

assign mul_ln268_1_fu_1448_p10 = exp_res_1_reg_1703_pp0_iter6_reg;

assign mul_ln268_2_fu_1468_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_2_fu_1468_p1 = mul_ln268_2_fu_1468_p10;

assign mul_ln268_2_fu_1468_p10 = exp_res_2_reg_1708_pp0_iter6_reg;

assign mul_ln268_3_fu_1488_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_3_fu_1488_p1 = mul_ln268_3_fu_1488_p10;

assign mul_ln268_3_fu_1488_p10 = exp_res_3_reg_1713_pp0_iter6_reg;

assign mul_ln268_4_fu_1508_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_4_fu_1508_p1 = mul_ln268_4_fu_1508_p10;

assign mul_ln268_4_fu_1508_p10 = exp_res_4_reg_1718_pp0_iter6_reg;

assign mul_ln268_5_fu_1528_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_5_fu_1528_p1 = mul_ln268_5_fu_1528_p10;

assign mul_ln268_5_fu_1528_p10 = exp_res_5_reg_1723_pp0_iter6_reg;

assign mul_ln268_6_fu_1548_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_6_fu_1548_p1 = mul_ln268_6_fu_1548_p10;

assign mul_ln268_6_fu_1548_p10 = exp_res_6_reg_1728_pp0_iter6_reg;

assign mul_ln268_7_fu_1568_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_7_fu_1568_p1 = mul_ln268_7_fu_1568_p10;

assign mul_ln268_7_fu_1568_p10 = exp_res_7_reg_1733_pp0_iter6_reg;

assign mul_ln268_fu_1428_p0 = sext_ln268_fu_1422_p1;

assign mul_ln268_fu_1428_p1 = mul_ln268_fu_1428_p10;

assign mul_ln268_fu_1428_p10 = exp_res_reg_1698_pp0_iter6_reg;

assign or_ln50_1_fu_1311_p2 = (xor_ln50_9_fu_1305_p2 | and_ln50_3_fu_1281_p2);

assign or_ln50_fu_1213_p2 = (xor_ln50_5_fu_1207_p2 | and_ln50_1_fu_1183_p2);

assign select_ln245_10_fu_932_p3 = ((and_ln245_5_fu_679_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_11_fu_950_p3 = ((xor_ln245_11_fu_685_p2[0:0] == 1'b1) ? select_ln245_10_fu_932_p3 : tmp_5_fu_940_p4);

assign select_ln245_12_fu_963_p3 = ((and_ln245_6_fu_722_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_13_fu_981_p3 = ((xor_ln245_13_fu_728_p2[0:0] == 1'b1) ? select_ln245_12_fu_963_p3 : tmp_6_fu_971_p4);

assign select_ln245_14_fu_994_p3 = ((and_ln245_7_fu_765_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_15_fu_1012_p3 = ((xor_ln245_15_fu_771_p2[0:0] == 1'b1) ? select_ln245_14_fu_994_p3 : tmp_7_fu_1002_p4);

assign select_ln245_1_fu_795_p3 = ((xor_ln245_1_fu_470_p2[0:0] == 1'b1) ? select_ln245_fu_777_p3 : tmp_fu_785_p4);

assign select_ln245_2_fu_808_p3 = ((and_ln245_1_fu_507_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_3_fu_826_p3 = ((xor_ln245_3_fu_513_p2[0:0] == 1'b1) ? select_ln245_2_fu_808_p3 : tmp_1_fu_816_p4);

assign select_ln245_4_fu_839_p3 = ((and_ln245_2_fu_550_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_5_fu_857_p3 = ((xor_ln245_5_fu_556_p2[0:0] == 1'b1) ? select_ln245_4_fu_839_p3 : tmp_2_fu_847_p4);

assign select_ln245_6_fu_870_p3 = ((and_ln245_3_fu_593_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_7_fu_888_p3 = ((xor_ln245_7_fu_599_p2[0:0] == 1'b1) ? select_ln245_6_fu_870_p3 : tmp_3_fu_878_p4);

assign select_ln245_8_fu_901_p3 = ((and_ln245_4_fu_636_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_9_fu_919_p3 = ((xor_ln245_9_fu_642_p2[0:0] == 1'b1) ? select_ln245_8_fu_901_p3 : tmp_4_fu_909_p4);

assign select_ln245_fu_777_p3 = ((and_ln245_fu_464_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln50_10_fu_1325_p3 = ((and_ln50_4_fu_1293_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_9_fu_1249_p2);

assign select_ln50_11_fu_1333_p3 = ((or_ln50_1_fu_1311_p2[0:0] == 1'b1) ? select_ln50_9_fu_1317_p3 : select_ln50_10_fu_1325_p3);

assign select_ln50_1_fu_1409_p3 = ((xor_ln50_1_fu_1385_p2[0:0] == 1'b1) ? select_ln50_fu_1391_p3 : tmp_8_fu_1399_p4);

assign select_ln50_2_fu_1047_p3 = ((tmp_25_fu_1039_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_2_fu_1033_p2);

assign select_ln50_3_fu_1077_p3 = ((tmp_26_fu_1069_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_3_fu_1063_p2);

assign select_ln50_4_fu_1219_p3 = ((xor_ln50_4_fu_1201_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_8_fu_1151_p2);

assign select_ln50_5_fu_1227_p3 = ((and_ln50_2_fu_1195_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_8_fu_1151_p2);

assign select_ln50_6_fu_1235_p3 = ((or_ln50_fu_1213_p2[0:0] == 1'b1) ? select_ln50_4_fu_1219_p3 : select_ln50_5_fu_1227_p3);

assign select_ln50_7_fu_1107_p3 = ((tmp_29_fu_1099_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_5_fu_1093_p2);

assign select_ln50_8_fu_1137_p3 = ((tmp_30_fu_1129_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_6_fu_1123_p2);

assign select_ln50_9_fu_1317_p3 = ((xor_ln50_8_fu_1299_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_9_fu_1249_p2);

assign select_ln50_fu_1391_p3 = ((and_ln50_fu_1379_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_342_p3 = ((xor_ln65_1_fu_337_p2[0:0] == 1'b1) ? p_read_6_reg_1615 : p_read_5_reg_1609);

assign select_ln65_2_fu_360_p3 = ((xor_ln65_2_fu_354_p2[0:0] == 1'b1) ? select_ln65_fu_331_p3 : select_ln65_1_fu_342_p3);

assign select_ln65_3_fu_373_p3 = ((xor_ln65_3_fu_368_p2[0:0] == 1'b1) ? p_read_4_reg_1603 : p_read_3_reg_1597);

assign select_ln65_4_fu_384_p3 = ((xor_ln65_4_fu_379_p2[0:0] == 1'b1) ? p_read_2_reg_1591 : p_read_1_reg_1585);

assign select_ln65_5_fu_402_p3 = ((xor_ln65_5_fu_396_p2[0:0] == 1'b1) ? select_ln65_3_fu_373_p3 : select_ln65_4_fu_384_p3);

assign select_ln65_fu_331_p3 = ((xor_ln65_fu_326_p2[0:0] == 1'b1) ? p_read_8_reg_1627 : p_read_7_reg_1621);

assign sext_ln245_1_fu_433_p1 = $signed(x_max_reg_1653);

assign sext_ln245_2_fu_476_p1 = p_read_7_reg_1621_pp0_iter1_reg;

assign sext_ln245_3_fu_519_p1 = p_read_6_reg_1615_pp0_iter1_reg;

assign sext_ln245_4_fu_562_p1 = p_read_5_reg_1609_pp0_iter1_reg;

assign sext_ln245_5_fu_605_p1 = p_read_4_reg_1603_pp0_iter1_reg;

assign sext_ln245_6_fu_648_p1 = p_read_3_reg_1597_pp0_iter1_reg;

assign sext_ln245_7_fu_691_p1 = p_read_2_reg_1591_pp0_iter1_reg;

assign sext_ln245_8_fu_734_p1 = p_read_1_reg_1585_pp0_iter1_reg;

assign sext_ln245_fu_430_p1 = p_read_8_reg_1627_pp0_iter1_reg;

assign sext_ln268_fu_1422_p1 = $signed(inv_exp_sum_reg_1779);

assign sext_ln50_1_fu_1344_p1 = select_ln50_11_reg_1768;

assign sext_ln50_2_fu_1145_p1 = select_ln50_2_reg_1738;

assign sext_ln50_3_fu_1148_p1 = select_ln50_3_reg_1744;

assign sext_ln50_4_fu_1243_p1 = select_ln50_7_reg_1750;

assign sext_ln50_5_fu_1246_p1 = select_ln50_8_reg_1756;

assign sext_ln50_fu_1341_p1 = select_ln50_6_reg_1762;

assign sub_ln245_1_fu_479_p2 = ($signed(sext_ln245_2_fu_476_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_2_fu_522_p2 = ($signed(sext_ln245_3_fu_519_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_3_fu_565_p2 = ($signed(sext_ln245_4_fu_562_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_4_fu_608_p2 = ($signed(sext_ln245_5_fu_605_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_5_fu_651_p2 = ($signed(sext_ln245_6_fu_648_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_6_fu_694_p2 = ($signed(sext_ln245_7_fu_691_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_7_fu_737_p2 = ($signed(sext_ln245_8_fu_734_p1) - $signed(sext_ln245_1_fu_433_p1));

assign sub_ln245_fu_436_p2 = ($signed(sext_ln245_fu_430_p1) - $signed(sext_ln245_1_fu_433_p1));

assign tmp_10_fu_450_p3 = sub_ln245_fu_436_p2[32'd15];

assign tmp_11_fu_485_p3 = sub_ln245_1_fu_479_p2[32'd16];

assign tmp_12_fu_493_p3 = sub_ln245_1_fu_479_p2[32'd15];

assign tmp_13_fu_528_p3 = sub_ln245_2_fu_522_p2[32'd16];

assign tmp_14_fu_536_p3 = sub_ln245_2_fu_522_p2[32'd15];

assign tmp_15_fu_571_p3 = sub_ln245_3_fu_565_p2[32'd16];

assign tmp_16_fu_579_p3 = sub_ln245_3_fu_565_p2[32'd15];

assign tmp_17_fu_614_p3 = sub_ln245_4_fu_608_p2[32'd16];

assign tmp_18_fu_622_p3 = sub_ln245_4_fu_608_p2[32'd15];

assign tmp_19_fu_657_p3 = sub_ln245_5_fu_651_p2[32'd16];

assign tmp_1_fu_816_p4 = {{sub_ln245_1_fu_479_p2[15:6]}};

assign tmp_20_fu_665_p3 = sub_ln245_5_fu_651_p2[32'd15];

assign tmp_21_fu_700_p3 = sub_ln245_6_fu_694_p2[32'd16];

assign tmp_22_fu_708_p3 = sub_ln245_6_fu_694_p2[32'd15];

assign tmp_23_fu_743_p3 = sub_ln245_7_fu_737_p2[32'd16];

assign tmp_24_fu_751_p3 = sub_ln245_7_fu_737_p2[32'd15];

assign tmp_25_fu_1039_p3 = add_ln50_2_fu_1033_p2[32'd17];

assign tmp_26_fu_1069_p3 = add_ln50_3_fu_1063_p2[32'd17];

assign tmp_27_fu_1161_p3 = add_ln50_4_fu_1155_p2[32'd18];

assign tmp_28_fu_1169_p3 = add_ln50_8_fu_1151_p2[32'd17];

assign tmp_29_fu_1099_p3 = add_ln50_5_fu_1093_p2[32'd17];

assign tmp_2_fu_847_p4 = {{sub_ln245_2_fu_522_p2[15:6]}};

assign tmp_30_fu_1129_p3 = add_ln50_6_fu_1123_p2[32'd17];

assign tmp_31_fu_1259_p3 = add_ln50_7_fu_1253_p2[32'd18];

assign tmp_32_fu_1267_p3 = add_ln50_9_fu_1249_p2[32'd17];

assign tmp_33_fu_1357_p3 = add_ln50_fu_1351_p2[32'd18];

assign tmp_34_fu_1365_p3 = add_ln50_1_fu_1347_p2[32'd17];

assign tmp_3_fu_878_p4 = {{sub_ln245_3_fu_565_p2[15:6]}};

assign tmp_4_fu_909_p4 = {{sub_ln245_4_fu_608_p2[15:6]}};

assign tmp_5_fu_940_p4 = {{sub_ln245_5_fu_651_p2[15:6]}};

assign tmp_6_fu_971_p4 = {{sub_ln245_6_fu_694_p2[15:6]}};

assign tmp_7_fu_1002_p4 = {{sub_ln245_7_fu_737_p2[15:6]}};

assign tmp_8_fu_1399_p4 = {{add_ln50_1_fu_1347_p2[17:8]}};

assign tmp_9_fu_442_p3 = sub_ln245_fu_436_p2[32'd16];

assign tmp_fu_785_p4 = {{sub_ln245_fu_436_p2[15:6]}};

assign x_max_fu_422_p3 = ((xor_ln65_6_fu_416_p2[0:0] == 1'b1) ? select_ln65_2_fu_360_p3 : select_ln65_5_fu_402_p3);

assign xor_ln245_10_fu_673_p2 = (tmp_19_fu_657_p3 ^ 1'd1);

assign xor_ln245_11_fu_685_p2 = (tmp_20_fu_665_p3 ^ tmp_19_fu_657_p3);

assign xor_ln245_12_fu_716_p2 = (tmp_21_fu_700_p3 ^ 1'd1);

assign xor_ln245_13_fu_728_p2 = (tmp_22_fu_708_p3 ^ tmp_21_fu_700_p3);

assign xor_ln245_14_fu_759_p2 = (tmp_23_fu_743_p3 ^ 1'd1);

assign xor_ln245_15_fu_771_p2 = (tmp_24_fu_751_p3 ^ tmp_23_fu_743_p3);

assign xor_ln245_1_fu_470_p2 = (tmp_9_fu_442_p3 ^ tmp_10_fu_450_p3);

assign xor_ln245_2_fu_501_p2 = (tmp_11_fu_485_p3 ^ 1'd1);

assign xor_ln245_3_fu_513_p2 = (tmp_12_fu_493_p3 ^ tmp_11_fu_485_p3);

assign xor_ln245_4_fu_544_p2 = (tmp_13_fu_528_p3 ^ 1'd1);

assign xor_ln245_5_fu_556_p2 = (tmp_14_fu_536_p3 ^ tmp_13_fu_528_p3);

assign xor_ln245_6_fu_587_p2 = (tmp_15_fu_571_p3 ^ 1'd1);

assign xor_ln245_7_fu_599_p2 = (tmp_16_fu_579_p3 ^ tmp_15_fu_571_p3);

assign xor_ln245_8_fu_630_p2 = (tmp_17_fu_614_p3 ^ 1'd1);

assign xor_ln245_9_fu_642_p2 = (tmp_18_fu_622_p3 ^ tmp_17_fu_614_p3);

assign xor_ln245_fu_458_p2 = (tmp_9_fu_442_p3 ^ 1'd1);

assign xor_ln50_1_fu_1385_p2 = (tmp_34_fu_1365_p3 ^ tmp_33_fu_1357_p3);

assign xor_ln50_2_fu_1177_p2 = (tmp_27_fu_1161_p3 ^ 1'd1);

assign xor_ln50_3_fu_1189_p2 = (tmp_28_fu_1169_p3 ^ 1'd1);

assign xor_ln50_4_fu_1201_p2 = (tmp_28_fu_1169_p3 ^ tmp_27_fu_1161_p3);

assign xor_ln50_5_fu_1207_p2 = (xor_ln50_4_fu_1201_p2 ^ 1'd1);

assign xor_ln50_6_fu_1275_p2 = (tmp_31_fu_1259_p3 ^ 1'd1);

assign xor_ln50_7_fu_1287_p2 = (tmp_32_fu_1267_p3 ^ 1'd1);

assign xor_ln50_8_fu_1299_p2 = (tmp_32_fu_1267_p3 ^ tmp_31_fu_1259_p3);

assign xor_ln50_9_fu_1305_p2 = (xor_ln50_8_fu_1299_p2 ^ 1'd1);

assign xor_ln50_fu_1373_p2 = (tmp_33_fu_1357_p3 ^ 1'd1);

assign xor_ln65_1_fu_337_p2 = (icmp_ln65_1_reg_1638 ^ 1'd1);

assign xor_ln65_2_fu_354_p2 = (icmp_ln65_2_fu_348_p2 ^ 1'd1);

assign xor_ln65_3_fu_368_p2 = (icmp_ln65_3_reg_1643 ^ 1'd1);

assign xor_ln65_4_fu_379_p2 = (icmp_ln65_4_reg_1648 ^ 1'd1);

assign xor_ln65_5_fu_396_p2 = (icmp_ln65_5_fu_390_p2 ^ 1'd1);

assign xor_ln65_6_fu_416_p2 = (icmp_ln65_6_fu_410_p2 ^ 1'd1);

assign xor_ln65_fu_326_p2 = (icmp_ln65_reg_1633 ^ 1'd1);

assign zext_ln255_1_fu_834_p1 = select_ln245_3_fu_826_p3;

assign zext_ln255_2_fu_865_p1 = select_ln245_5_fu_857_p3;

assign zext_ln255_3_fu_896_p1 = select_ln245_7_fu_888_p3;

assign zext_ln255_4_fu_927_p1 = select_ln245_9_fu_919_p3;

assign zext_ln255_5_fu_958_p1 = select_ln245_11_fu_950_p3;

assign zext_ln255_6_fu_989_p1 = select_ln245_13_fu_981_p3;

assign zext_ln255_7_fu_1020_p1 = select_ln245_15_fu_1012_p3;

assign zext_ln255_fu_803_p1 = select_ln245_1_fu_795_p3;

assign zext_ln265_fu_1417_p1 = select_ln50_1_fu_1409_p3;

assign zext_ln50_1_fu_1029_p1 = exp_table_q6;

assign zext_ln50_2_fu_1055_p1 = exp_table_q5;

assign zext_ln50_3_fu_1059_p1 = exp_table_q4;

assign zext_ln50_4_fu_1085_p1 = exp_table_q3;

assign zext_ln50_5_fu_1089_p1 = exp_table_q2;

assign zext_ln50_6_fu_1115_p1 = exp_table_q1;

assign zext_ln50_7_fu_1119_p1 = exp_table_q0;

assign zext_ln50_fu_1025_p1 = exp_table_q7;

endmodule //JetTaggerNN_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config24_s
